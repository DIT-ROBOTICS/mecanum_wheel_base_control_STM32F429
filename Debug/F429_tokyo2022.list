
F429_tokyo2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08009e58  08009e58  00019e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a160  0800a160  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a160  0800a160  0001a160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a168  0800a168  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800a168  0800a168  0001a168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a174  0800a174  0001a174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001df4  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001e6c  20001e6c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025d44  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004411  00000000  00000000  00045de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  0004a200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001100  00000000  00000000  0004b470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027227  00000000  00000000  0004c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000194f1  00000000  00000000  00073797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2631  00000000  00000000  0008cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016f2b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053e4  00000000  00000000  0016f30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009e3c 	.word	0x08009e3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08009e3c 	.word	0x08009e3c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <_ZN3ros16normalizeSecNSecERmS0_>:
#include <Rosserial_STM32_Inc/ros/time.h>

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	0a5a      	lsrs	r2, r3, #9
 8000e10:	490f      	ldr	r1, [pc, #60]	; (8000e50 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e12:	fba1 1202 	umull	r1, r2, r1, r2
 8000e16:	09d2      	lsrs	r2, r2, #7
 8000e18:	490e      	ldr	r1, [pc, #56]	; (8000e54 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000e1a:	fb01 f202 	mul.w	r2, r1, r2
 8000e1e:	1a9b      	subs	r3, r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	0a5b      	lsrs	r3, r3, #9
 8000e28:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	09db      	lsrs	r3, r3, #7
 8000e30:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	441a      	add	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	601a      	str	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	00044b83 	.word	0x00044b83
 8000e54:	3b9aca00 	.word	0x3b9aca00

08000e58 <_ZN13LowPassFilterC1Ev>:
 *	https://github.com/jimmyberg/LowPassFilter
 */

#include <LowPassFilter.h>

LowPassFilter::LowPassFilter():
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	output_(0),ePow_(0)
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	e9c1 2300 	strd	r2, r3, [r1]
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	e9c1 2302 	strd	r2, r3, [r1, #8]
{
}
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	0000      	movs	r0, r0
 8000e8c:	0000      	movs	r0, r0
	...

08000e90 <_ZN13LowPassFilter4initEdd>:
	ePow_(1 - exp(-iDeltaTime * 2 * M_PI * iCutOffFrequency))
{
}

void LowPassFilter::init(double iCutOffFrequency, double iDeltaTime)
{
 8000e90:	b5b0      	push	{r4, r5, r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6178      	str	r0, [r7, #20]
 8000e98:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e9c:	ed87 1b00 	vstr	d1, [r7]
	output_ = 0;
 8000ea0:	6979      	ldr	r1, [r7, #20]
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9c1 2300 	strd	r2, r3, [r1]
	ePow_ = 1 - exp(-iDeltaTime * 2 * M_PI * iCutOffFrequency);
 8000eae:	683c      	ldr	r4, [r7, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000eb6:	4622      	mov	r2, r4
 8000eb8:	462b      	mov	r3, r5
 8000eba:	4620      	mov	r0, r4
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	f7ff f9a5 	bl	800020c <__adddf3>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	a314      	add	r3, pc, #80	; (adr r3, 8000f1c <_ZN13LowPassFilter4initEdd+0x8c>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fb52 	bl	8000578 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ee0:	f7ff fb4a 	bl	8000578 <__aeabi_dmul>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	ec43 2b17 	vmov	d7, r2, r3
 8000eec:	eeb0 0a47 	vmov.f32	s0, s14
 8000ef0:	eef0 0a67 	vmov.f32	s1, s15
 8000ef4:	f008 fbd4 	bl	80096a0 <exp>
 8000ef8:	ec53 2b10 	vmov	r2, r3, d0
 8000efc:	f04f 0000 	mov.w	r0, #0
 8000f00:	4905      	ldr	r1, [pc, #20]	; (8000f18 <_ZN13LowPassFilter4initEdd+0x88>)
 8000f02:	f7ff f981 	bl	8000208 <__aeabi_dsub>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	6979      	ldr	r1, [r7, #20]
 8000f0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bdb0      	pop	{r4, r5, r7, pc}
 8000f18:	3ff00000 	.word	0x3ff00000
 8000f1c:	54442d18 	.word	0x54442d18
 8000f20:	400921fb 	.word	0x400921fb

08000f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <MX_DMA_Init+0x4c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <MX_DMA_Init+0x4c>)
 8000f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <MX_DMA_Init+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	200c      	movs	r0, #12
 8000f4c:	f004 fd37 	bl	80059be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f50:	200c      	movs	r0, #12
 8000f52:	f004 fd50 	bl	80059f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	200e      	movs	r0, #14
 8000f5c:	f004 fd2f 	bl	80059be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f60:	200e      	movs	r0, #14
 8000f62:	f004 fd48 	bl	80059f6 <HAL_NVIC_EnableIRQ>

}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <_ZN7EncoderC1Ev>:
 *
 */

#include <encoder.h>

Encoder::Encoder() {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
}
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <_ZN7Encoder4initEv>:
		uint32_t channel_1, uint32_t channel_2) :
		inverted_(false), last_(0), current_(0), diff_(0), htim_(htim), timer_bits_(
				timer_bits), timer_channel_ { channel_1, channel_2 } {
}

void Encoder::init() {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(htim_, timer_channel_[0]);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	f006 faa3 	bl	80074e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(htim_, timer_channel_[1]);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4610      	mov	r0, r2
 8000fae:	f006 fa9b 	bl	80074e8 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(htim_, 0);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_ZN7Encoder4initEP17TIM_HandleTypeDefhmm>:

void Encoder::init(TIM_HandleTypeDef *htim, uint8_t timer_bits,
		uint32_t channel_1, uint32_t channel_2) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71fb      	strb	r3, [r7, #7]
	inverted_ = false;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
	last_ = 0;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
	current_ = 0;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
	diff_ = 0;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
	htim_ = htim;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	611a      	str	r2, [r3, #16]
	timer_bits_ = timer_bits;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	79fa      	ldrb	r2, [r7, #7]
 8000ff6:	751a      	strb	r2, [r3, #20]
	timer_channel_[0] = channel_1;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	619a      	str	r2, [r3, #24]
	timer_channel_[1] = channel_2;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	61da      	str	r2, [r3, #28]
	init();
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f7ff ffc0 	bl	8000f8a <_ZN7Encoder4initEv>
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_ZN7Encoder9readDeltaEv>:

void Encoder::setInverted(bool inverted) {
	inverted_ = inverted;
}

int32_t Encoder::readDelta() {
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	/* update encoder data */
	last_ = current_;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	605a      	str	r2, [r3, #4]
	current_ = __HAL_TIM_GET_COUNTER(htim_);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	609a      	str	r2, [r3, #8]

	/* check if inverted */
	if (!inverted_) {
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	f083 0301 	eor.w	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d008      	beq.n	800104e <_ZN7Encoder9readDeltaEv+0x3c>
		diff_ = current_ - last_;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	e007      	b.n	800105e <_ZN7Encoder9readDeltaEv+0x4c>
	} else {
		diff_ = last_ - current_;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60da      	str	r2, [r3, #12]
	}

	/* deal with counter overflow */
	/* 16-bit Timer */
	if (timer_bits_ == 16) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7d1b      	ldrb	r3, [r3, #20]
 8001062:	2b10      	cmp	r3, #16
 8001064:	d117      	bne.n	8001096 <_ZN7Encoder9readDeltaEv+0x84>
		if (diff_ > UINT16_MAX / 2)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800106e:	db06      	blt.n	800107e <_ZN7Encoder9readDeltaEv+0x6c>
			diff_ -= UINT16_MAX + 1;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	e01c      	b.n	80010b8 <_ZN7Encoder9readDeltaEv+0xa6>
		else if (diff_ < -UINT16_MAX / 2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001086:	dc17      	bgt.n	80010b8 <_ZN7Encoder9readDeltaEv+0xa6>
			diff_ += UINT16_MAX + 1;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	e010      	b.n	80010b8 <_ZN7Encoder9readDeltaEv+0xa6>
	}
	/* 32-bit Timer */
	else if (timer_bits_ == 32) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7d1b      	ldrb	r3, [r3, #20]
 800109a:	2b20      	cmp	r3, #32
 800109c:	d108      	bne.n	80010b0 <_ZN7Encoder9readDeltaEv+0x9e>
		if (diff_ > UINT32_MAX / 2)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	da08      	bge.n	80010b8 <_ZN7Encoder9readDeltaEv+0xa6>
			diff_ -= UINT32_MAX + 1;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	e003      	b.n	80010b8 <_ZN7Encoder9readDeltaEv+0xa6>
		else if (diff_ < -UINT32_MAX / 2)
			diff_ += UINT32_MAX + 1;
	}
	else {
		diff_ = -1;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f04f 32ff 	mov.w	r2, #4294967295
 80010b6:	60da      	str	r2, [r3, #12]
	}
	return diff_;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b54      	ldr	r3, [pc, #336]	; (8001234 <MX_GPIO_Init+0x16c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a53      	ldr	r2, [pc, #332]	; (8001234 <MX_GPIO_Init+0x16c>)
 80010e8:	f043 0310 	orr.w	r3, r3, #16
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b51      	ldr	r3, [pc, #324]	; (8001234 <MX_GPIO_Init+0x16c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a4c      	ldr	r2, [pc, #304]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <MX_GPIO_Init+0x16c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b46      	ldr	r3, [pc, #280]	; (8001234 <MX_GPIO_Init+0x16c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a45      	ldr	r2, [pc, #276]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b43      	ldr	r3, [pc, #268]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b3f      	ldr	r3, [pc, #252]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a3e      	ldr	r2, [pc, #248]	; (8001234 <MX_GPIO_Init+0x16c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b38      	ldr	r3, [pc, #224]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a37      	ldr	r2, [pc, #220]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a30      	ldr	r2, [pc, #192]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <MX_GPIO_Init+0x16c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	211c      	movs	r1, #28
 800118a:	482b      	ldr	r0, [pc, #172]	; (8001238 <MX_GPIO_Init+0x170>)
 800118c:	f005 f9fc 	bl	8006588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	4829      	ldr	r0, [pc, #164]	; (800123c <MX_GPIO_Init+0x174>)
 8001198:	f005 f9f6 	bl	8006588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80011a2:	4827      	ldr	r0, [pc, #156]	; (8001240 <MX_GPIO_Init+0x178>)
 80011a4:	f005 f9f0 	bl	8006588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80011ae:	4825      	ldr	r0, [pc, #148]	; (8001244 <MX_GPIO_Init+0x17c>)
 80011b0:	f005 f9ea 	bl	8006588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80011b4:	231c      	movs	r3, #28
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	481b      	ldr	r0, [pc, #108]	; (8001238 <MX_GPIO_Init+0x170>)
 80011cc:	f005 f830 	bl	8006230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4814      	ldr	r0, [pc, #80]	; (800123c <MX_GPIO_Init+0x174>)
 80011ea:	f005 f821 	bl	8006230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_GPIO_Init+0x178>)
 8001208:	f005 f812 	bl	8006230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 800120c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4807      	ldr	r0, [pc, #28]	; (8001244 <MX_GPIO_Init+0x17c>)
 8001226:	f005 f803 	bl	8006230 <HAL_GPIO_Init>

}
 800122a:	bf00      	nop
 800122c:	3730      	adds	r7, #48	; 0x30
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40021000 	.word	0x40021000
 800123c:	40020800 	.word	0x40020800
 8001240:	40020400 	.word	0x40020400
 8001244:	40020c00 	.word	0x40020c00

08001248 <_ZN9KinematicC1Ev>:
 *      \__\/         \__\/         \__\/
 *
 */
#include <kinematic.h>

Kinematic::Kinematic()
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
{
}
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <_ZN9Kinematic4initEddd>:

void Kinematic::init(double wheel_radius, double l_x, double l_y)
{
 800125e:	b480      	push	{r7}
 8001260:	b089      	sub	sp, #36	; 0x24
 8001262:	af00      	add	r7, sp, #0
 8001264:	61f8      	str	r0, [r7, #28]
 8001266:	ed87 0b04 	vstr	d0, [r7, #16]
 800126a:	ed87 1b02 	vstr	d1, [r7, #8]
 800126e:	ed87 2b00 	vstr	d2, [r7]
	wheel_radius_ = wheel_radius;  //meter
 8001272:	69f9      	ldr	r1, [r7, #28]
 8001274:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001278:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	l_x_ = l_x; //meter
 800127c:	69f9      	ldr	r1, [r7, #28]
 800127e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001282:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	l_y_ = l_y; //meter
 8001286:	69f9      	ldr	r1, [r7, #28]
 8001288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800128c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001290:	bf00      	nop
 8001292:	3724      	adds	r7, #36	; 0x24
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <_ZN9Kinematic14readRobotSpeedEddd>:
	wheel_speed_[2] = v3;
	wheel_speed_[3] = v4;
}

void Kinematic::readRobotSpeed(double vx, double vy, double w)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	61f8      	str	r0, [r7, #28]
 80012a4:	ed87 0b04 	vstr	d0, [r7, #16]
 80012a8:	ed87 1b02 	vstr	d1, [r7, #8]
 80012ac:	ed87 2b00 	vstr	d2, [r7]
	robot_speed.vx_ = vx;
 80012b0:	69f9      	ldr	r1, [r7, #28]
 80012b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012b6:	e9c1 2300 	strd	r2, r3, [r1]
	robot_speed.vy_ = vy;
 80012ba:	69f9      	ldr	r1, [r7, #28]
 80012bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	robot_speed.w_  = w;
 80012c4:	69f9      	ldr	r1, [r7, #28]
 80012c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80012ce:	bf00      	nop
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_ZN9Kinematic16inverseKinematicEddd>:
	robot_speed.vy_ = (-wheel_speed_[0] + wheel_speed_[1] + wheel_speed_[2] - wheel_speed_[3]) * wheel_radius_ / 4;
	robot_speed.w_  = (-wheel_speed_[0] + wheel_speed_[1] - wheel_speed_[2] + wheel_speed_[3]) * wheel_radius_ /(4 *(l_x_ + l_y_));
}

void Kinematic::inverseKinematic(double vx, double vy, double w)
{
 80012da:	b5b0      	push	{r4, r5, r7, lr}
 80012dc:	b088      	sub	sp, #32
 80012de:	af00      	add	r7, sp, #0
 80012e0:	61f8      	str	r0, [r7, #28]
 80012e2:	ed87 0b04 	vstr	d0, [r7, #16]
 80012e6:	ed87 1b02 	vstr	d1, [r7, #8]
 80012ea:	ed87 2b00 	vstr	d2, [r7]
	readRobotSpeed(vx, vy, w);
 80012ee:	ed97 2b00 	vldr	d2, [r7]
 80012f2:	ed97 1b02 	vldr	d1, [r7, #8]
 80012f6:	ed97 0b04 	vldr	d0, [r7, #16]
 80012fa:	69f8      	ldr	r0, [r7, #28]
 80012fc:	f7ff ffce 	bl	800129c <_ZN9Kinematic14readRobotSpeedEddd>
	wheel_speed_[0] = (robot_speed.vx_ - robot_speed.vy_ - (l_x_ + l_y_)*robot_speed.w_) / wheel_radius_;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800130c:	f7fe ff7c 	bl	8000208 <__aeabi_dsub>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4614      	mov	r4, r2
 8001316:	461d      	mov	r5, r3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001324:	f7fe ff72 	bl	800020c <__adddf3>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001336:	f7ff f91f 	bl	8000578 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4620      	mov	r0, r4
 8001340:	4629      	mov	r1, r5
 8001342:	f7fe ff61 	bl	8000208 <__aeabi_dsub>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001354:	f7ff fa3a 	bl	80007cc <__aeabi_ddiv>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	69f9      	ldr	r1, [r7, #28]
 800135e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	wheel_speed_[1] = (robot_speed.vx_ + robot_speed.vy_ + (l_x_ + l_y_)*robot_speed.w_) / wheel_radius_;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800136e:	f7fe ff4d 	bl	800020c <__adddf3>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4614      	mov	r4, r2
 8001378:	461d      	mov	r5, r3
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001386:	f7fe ff41 	bl	800020c <__adddf3>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001398:	f7ff f8ee 	bl	8000578 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4620      	mov	r0, r4
 80013a2:	4629      	mov	r1, r5
 80013a4:	f7fe ff32 	bl	800020c <__adddf3>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80013b6:	f7ff fa09 	bl	80007cc <__aeabi_ddiv>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	69f9      	ldr	r1, [r7, #28]
 80013c0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	wheel_speed_[2] = (robot_speed.vx_ + robot_speed.vy_ - (l_x_ + l_y_)*robot_speed.w_) / wheel_radius_;
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013d0:	f7fe ff1c 	bl	800020c <__adddf3>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4614      	mov	r4, r2
 80013da:	461d      	mov	r5, r3
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80013e8:	f7fe ff10 	bl	800020c <__adddf3>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013fa:	f7ff f8bd 	bl	8000578 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4620      	mov	r0, r4
 8001404:	4629      	mov	r1, r5
 8001406:	f7fe feff 	bl	8000208 <__aeabi_dsub>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001418:	f7ff f9d8 	bl	80007cc <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	69f9      	ldr	r1, [r7, #28]
 8001422:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	wheel_speed_[3] = (robot_speed.vx_ - robot_speed.vy_ + (l_x_ + l_y_)*robot_speed.w_) / wheel_radius_;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001432:	f7fe fee9 	bl	8000208 <__aeabi_dsub>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4614      	mov	r4, r2
 800143c:	461d      	mov	r5, r3
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800144a:	f7fe fedf 	bl	800020c <__adddf3>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800145c:	f7ff f88c 	bl	8000578 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4620      	mov	r0, r4
 8001466:	4629      	mov	r1, r5
 8001468:	f7fe fed0 	bl	800020c <__adddf3>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800147a:	f7ff f9a7 	bl	80007cc <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	69f9      	ldr	r1, [r7, #28]
 8001484:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bdb0      	pop	{r4, r5, r7, pc}

08001490 <_ZN5RobotC1Ev>:
#include <pid.h>
#include <vnh5019.h>
#include <encoder.h>
#include <LowPassFilter.h>

class Robot
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2403      	movs	r4, #3
 800149c:	461d      	mov	r5, r3
 800149e:	2c00      	cmp	r4, #0
 80014a0:	db05      	blt.n	80014ae <_ZN5RobotC1Ev+0x1e>
 80014a2:	4628      	mov	r0, r5
 80014a4:	f003 ffa6 	bl	80053f4 <_ZN7VNH5019C1Ev>
 80014a8:	3528      	adds	r5, #40	; 0x28
 80014aa:	3c01      	subs	r4, #1
 80014ac:	e7f7      	b.n	800149e <_ZN5RobotC1Ev+0xe>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	33a0      	adds	r3, #160	; 0xa0
 80014b2:	2403      	movs	r4, #3
 80014b4:	461d      	mov	r5, r3
 80014b6:	2c00      	cmp	r4, #0
 80014b8:	db05      	blt.n	80014c6 <_ZN5RobotC1Ev+0x36>
 80014ba:	4628      	mov	r0, r5
 80014bc:	f7ff fd5a 	bl	8000f74 <_ZN7EncoderC1Ev>
 80014c0:	3520      	adds	r5, #32
 80014c2:	3c01      	subs	r4, #1
 80014c4:	e7f7      	b.n	80014b6 <_ZN5RobotC1Ev+0x26>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80014cc:	2403      	movs	r4, #3
 80014ce:	461d      	mov	r5, r3
 80014d0:	2c00      	cmp	r4, #0
 80014d2:	db06      	blt.n	80014e2 <_ZN5RobotC1Ev+0x52>
 80014d4:	4628      	mov	r0, r5
 80014d6:	f000 f9e3 	bl	80018a0 <_ZN3PIDC1Ev>
 80014da:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80014de:	3c01      	subs	r4, #1
 80014e0:	e7f6      	b.n	80014d0 <_ZN5RobotC1Ev+0x40>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f503 6374 	add.w	r3, r3, #3904	; 0xf40
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fead 	bl	8001248 <_ZN9KinematicC1Ev>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fcaf 	bl	8000e58 <_ZN13LowPassFilterC1Ev>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bdb0      	pop	{r4, r5, r7, pc}

08001504 <_Z10speed_initv>:
	robot.pid[motor].setFeedback(OMEGA[motor]);				//set PID feedback
	duty[motor] = robot.pid[motor].clacOutput();			//calculate duty cycle
	robot.motor_[motor].writeDuty(duty[motor]);				//write duty cycle to VNH5019
}

void speed_init(){
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
	received_vel.vx = 0;
 8001508:	4917      	ldr	r1, [pc, #92]	; (8001568 <_Z10speed_initv+0x64>)
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9c1 2300 	strd	r2, r3, [r1]
	received_vel.vy = 0;
 8001516:	4914      	ldr	r1, [pc, #80]	; (8001568 <_Z10speed_initv+0x64>)
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9c1 2302 	strd	r2, r3, [r1, #8]
	received_vel.w  = 0;
 8001524:	4910      	ldr	r1, [pc, #64]	; (8001568 <_Z10speed_initv+0x64>)
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	odom_vel.vx = 0;
 8001532:	490e      	ldr	r1, [pc, #56]	; (800156c <_Z10speed_initv+0x68>)
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9c1 2300 	strd	r2, r3, [r1]
	odom_vel.vy = 0;
 8001540:	490a      	ldr	r1, [pc, #40]	; (800156c <_Z10speed_initv+0x68>)
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	odom_vel.w	= 0;
 800154e:	4907      	ldr	r1, [pc, #28]	; (800156c <_Z10speed_initv+0x68>)
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20001070 	.word	0x20001070
 800156c:	20001088 	.word	0x20001088

08001570 <HAL_TIM_PeriodElapsedCallback>:
	odom_vel.vx = robot.kn_.robot_speed.vx_;
	odom_vel.vy = robot.kn_.robot_speed.vy_;
	odom_vel.w  = robot.kn_.robot_speed.w_;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	if (htim == &htim7) {	/* HIGH FREQ EVENT : 1kHz*/
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a5a      	ldr	r2, [pc, #360]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800157c:	4293      	cmp	r3, r2
 800157e:	f040 80a5 	bne.w	80016cc <HAL_TIM_PeriodElapsedCallback+0x15c>
		robot.kn_.inverseKinematic(received_vel.vx, received_vel.vy, received_vel.w); //from target robot speed to 4 wheel's omega
 8001582:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001584:	ed93 7b00 	vldr	d7, [r3]
 8001588:	4b57      	ldr	r3, [pc, #348]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800158a:	ed93 6b02 	vldr	d6, [r3, #8]
 800158e:	4b56      	ldr	r3, [pc, #344]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001590:	ed93 5b04 	vldr	d5, [r3, #16]
 8001594:	eeb0 2a45 	vmov.f32	s4, s10
 8001598:	eef0 2a65 	vmov.f32	s5, s11
 800159c:	eeb0 1a46 	vmov.f32	s2, s12
 80015a0:	eef0 1a66 	vmov.f32	s3, s13
 80015a4:	eeb0 0a47 	vmov.f32	s0, s14
 80015a8:	eef0 0a67 	vmov.f32	s1, s15
 80015ac:	484f      	ldr	r0, [pc, #316]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80015ae:	f7ff fe94 	bl	80012da <_ZN9Kinematic16inverseKinematicEddd>
		for (int i = 0; i < 4; i++){
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	f300 808f 	bgt.w	80016dc <HAL_TIM_PeriodElapsedCallback+0x16c>
			target_wheel_w[i] = robot.kn_.wheel_speed_[i]; 			//get target wheel speed
 80015be:	4a4c      	ldr	r2, [pc, #304]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f203 13eb 	addw	r3, r3, #491	; 0x1eb
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4413      	add	r3, r2
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	4849      	ldr	r0, [pc, #292]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80015d0:	68f9      	ldr	r1, [r7, #12]
 80015d2:	00c9      	lsls	r1, r1, #3
 80015d4:	4401      	add	r1, r0
 80015d6:	e9c1 2300 	strd	r2, r3, [r1]
//			LPF_output[i] = robot.LPF_.update(target_wheel_w[i]);	//Low Pass Filter
			robot.pid[i].setSetpoint(target_wheel_w[i]); 			//set PID target
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f44f 7262 	mov.w	r2, #904	; 0x388
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80015e8:	4a41      	ldr	r2, [pc, #260]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80015ea:	441a      	add	r2, r3
 80015ec:	4941      	ldr	r1, [pc, #260]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	440b      	add	r3, r1
 80015f4:	ed93 7b00 	vldr	d7, [r3]
 80015f8:	eeb0 0a47 	vmov.f32	s0, s14
 80015fc:	eef0 0a67 	vmov.f32	s1, s15
 8001600:	4610      	mov	r0, r2
 8001602:	f000 f9ba 	bl	800197a <_ZN3PID11setSetpointEd>
			CNT_diff[i] = robot.encoder_[i].readDelta();			//read encoder counter difference
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3305      	adds	r3, #5
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	4a38      	ldr	r2, [pc, #224]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800160e:	4413      	add	r3, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fcfe 	bl	8001012 <_ZN7Encoder9readDeltaEv>
 8001616:	4602      	mov	r2, r0
 8001618:	4937      	ldr	r1, [pc, #220]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			OMEGA[i] = robot.diff_to_omega(CNT_diff[i]);			//from counter difference to omega
 8001620:	4a35      	ldr	r2, [pc, #212]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	4619      	mov	r1, r3
 800162a:	4831      	ldr	r0, [pc, #196]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800162c:	f000 fc3c 	bl	8001ea8 <_ZN5Robot13diff_to_omegaEl>
 8001630:	eeb0 7a40 	vmov.f32	s14, s0
 8001634:	eef0 7a60 	vmov.f32	s15, s1
 8001638:	4a30      	ldr	r2, [pc, #192]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	ed83 7b00 	vstr	d7, [r3]
			robot.pid[i].setFeedback(OMEGA[i]);						//set PID feedback
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f44f 7262 	mov.w	r2, #904	; 0x388
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001652:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001654:	441a      	add	r2, r3
 8001656:	4929      	ldr	r1, [pc, #164]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	ed93 7b00 	vldr	d7, [r3]
 8001662:	eeb0 0a47 	vmov.f32	s0, s14
 8001666:	eef0 0a67 	vmov.f32	s1, s15
 800166a:	4610      	mov	r0, r2
 800166c:	f000 f996 	bl	800199c <_ZN3PID11setFeedbackEd>
			duty[i] = robot.pid[i].clacOutput();					//calculate duty cycle
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f44f 7262 	mov.w	r2, #904	; 0x388
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001680:	4413      	add	r3, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f99c 	bl	80019c0 <_ZN3PID10clacOutputEv>
 8001688:	eeb0 7a40 	vmov.f32	s14, s0
 800168c:	eef0 7a60 	vmov.f32	s15, s1
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4413      	add	r3, r2
 8001698:	ed83 7b00 	vstr	d7, [r3]
			robot.motor_[i].writeDuty(duty[i]);						//write duty cycle to VNH
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80016a8:	441a      	add	r2, r3
 80016aa:	4915      	ldr	r1, [pc, #84]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	ed93 7b00 	vldr	d7, [r3]
 80016b6:	eeb0 0a47 	vmov.f32	s0, s14
 80016ba:	eef0 0a67 	vmov.f32	s1, s15
 80016be:	4610      	mov	r0, r2
 80016c0:	f003 ff14 	bl	80054ec <_ZN7VNH50199writeDutyEd>
		for (int i = 0; i < 4; i++){
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3301      	adds	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e774      	b.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0x46>
		}
//		robot.kn_.forwardKinematic(OMEGA[0], OMEGA[1], OMEGA[2], OMEGA[3]);
//		get_odom_vel();
//		odom_store();
	}
	else if(htim == &htim6){	/* odometry publish FREQ : 100Hz*/
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d103      	bne.n	80016dc <HAL_TIM_PeriodElapsedCallback+0x16c>
		odom_store();
 80016d4:	f002 f9ca 	bl	8003a6c <odom_store>
		odom_pub();
 80016d8:	f002 f9e6 	bl	8003aa8 <odom_pub>
	}
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20001c7c 	.word	0x20001c7c
 80016e8:	20001070 	.word	0x20001070
 80016ec:	20000fd8 	.word	0x20000fd8
 80016f0:	20000098 	.word	0x20000098
 80016f4:	200010a0 	.word	0x200010a0
 80016f8:	200010c0 	.word	0x200010c0
 80016fc:	200010d0 	.word	0x200010d0
 8001700:	200010f0 	.word	0x200010f0
 8001704:	20001c34 	.word	0x20001c34

08001708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800170c:	f004 f80a 	bl	8005724 <HAL_Init>

  /* USER CODE BEGIN Init */

  speed_init(); //********* for manual test **********
 8001710:	f7ff fef8 	bl	8001504 <_Z10speed_initv>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001714:	f000 f81e 	bl	8001754 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001718:	f7ff fcd6 	bl	80010c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800171c:	f7ff fc02 	bl	8000f24 <MX_DMA_Init>
  MX_TIM12_Init();
 8001720:	f003 fb1e 	bl	8004d60 <MX_TIM12_Init>
  MX_TIM9_Init();
 8001724:	f003 faae 	bl	8004c84 <MX_TIM9_Init>
  MX_TIM2_Init();
 8001728:	f003 f8f0 	bl	800490c <MX_TIM2_Init>
  MX_TIM3_Init();
 800172c:	f003 f942 	bl	80049b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001730:	f003 f994 	bl	8004a5c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001734:	f003 f9e6 	bl	8004b04 <MX_TIM5_Init>
  MX_TIM7_Init();
 8001738:	f003 fa6e 	bl	8004c18 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 800173c:	f003 fd58 	bl	80051f0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001740:	f003 fa34 	bl	8004bac <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  robot.init();
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <main+0x48>)
 8001746:	f000 fa27 	bl	8001b98 <_ZN5Robot4initEv>
  rosserial_setup();
 800174a:	f002 f975 	bl	8003a38 <rosserial_setup>
   while (1)
 800174e:	e7fe      	b.n	800174e <main+0x46>
 8001750:	20000098 	.word	0x20000098

08001754 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b094      	sub	sp, #80	; 0x50
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 0320 	add.w	r3, r7, #32
 800175e:	2230      	movs	r2, #48	; 0x30
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f008 f9e0 	bl	8009b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	4b34      	ldr	r3, [pc, #208]	; (8001850 <_Z18SystemClock_Configv+0xfc>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	4a33      	ldr	r2, [pc, #204]	; (8001850 <_Z18SystemClock_Configv+0xfc>)
 8001782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001786:	6413      	str	r3, [r2, #64]	; 0x40
 8001788:	4b31      	ldr	r3, [pc, #196]	; (8001850 <_Z18SystemClock_Configv+0xfc>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <_Z18SystemClock_Configv+0x100>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a2d      	ldr	r2, [pc, #180]	; (8001854 <_Z18SystemClock_Configv+0x100>)
 800179e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <_Z18SystemClock_Configv+0x100>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b0:	2301      	movs	r3, #1
 80017b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ba:	2302      	movs	r3, #2
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017c4:	2304      	movs	r3, #4
 80017c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80017c8:	23b4      	movs	r3, #180	; 0xb4
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017cc:	2302      	movs	r3, #2
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017d0:	2304      	movs	r3, #4
 80017d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d4:	f107 0320 	add.w	r3, r7, #32
 80017d8:	4618      	mov	r0, r3
 80017da:	f004 ff3f 	bl	800665c <HAL_RCC_OscConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	bf14      	ite	ne
 80017e4:	2301      	movne	r3, #1
 80017e6:	2300      	moveq	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80017ee:	f000 f833 	bl	8001858 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017f2:	f004 fee3 	bl	80065bc <HAL_PWREx_EnableOverDrive>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001806:	f000 f827 	bl	8001858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180a:	230f      	movs	r3, #15
 800180c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180e:	2302      	movs	r3, #2
 8001810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001816:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800181a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800181c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001820:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	2105      	movs	r1, #5
 8001828:	4618      	mov	r0, r3
 800182a:	f005 f98f 	bl	8006b4c <HAL_RCC_ClockConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 800183e:	f000 f80b 	bl	8001858 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001842:	f005 fa69 	bl	8006d18 <HAL_RCC_EnableCSS>
}
 8001846:	bf00      	nop
 8001848:	3750      	adds	r7, #80	; 0x50
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40007000 	.word	0x40007000

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001860:	e7fe      	b.n	8001860 <Error_Handler+0x8>
	...

08001864 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d107      	bne.n	8001884 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187a:	4293      	cmp	r3, r2
 800187c:	d102      	bne.n	8001884 <_Z41__static_initialization_and_destruction_0ii+0x20>
Robot robot;
 800187e:	4803      	ldr	r0, [pc, #12]	; (800188c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001880:	f7ff fe06 	bl	8001490 <_ZN5RobotC1Ev>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000098 	.word	0x20000098

08001890 <_GLOBAL__sub_I_robot>:
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
 8001894:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff ffe3 	bl	8001864 <_Z41__static_initialization_and_destruction_0ii>
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_ZN3PIDC1Ev>:
 *
 */

#include <pid.h>

PID::PID()
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
{
}
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_ZN3PID4initEv>:
  : dt_(dt), kp_(kp), ki_(ki), kd_(kd), kb_(kb),setpoint_(0.0), feedback_(0.0), error_(0.0), error_int_(0.0), error_diff_(0.0),	back_cal_(0.0)
{
}

void PID::init()
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_ZN3PID4initEddddd>:

void PID::init(double dt, double kp, double ki, double kd, double kb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b08c      	sub	sp, #48	; 0x30
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80018d2:	ed87 0b08 	vstr	d0, [r7, #32]
 80018d6:	ed87 1b06 	vstr	d1, [r7, #24]
 80018da:	ed87 2b04 	vstr	d2, [r7, #16]
 80018de:	ed87 3b02 	vstr	d3, [r7, #8]
 80018e2:	ed87 4b00 	vstr	d4, [r7]
	dt_ = dt;
 80018e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018ec:	e9c1 2300 	strd	r2, r3, [r1]
	kp_ = kp;
 80018f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018f6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ki_ = ki;
 80018fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001900:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kd_ = kd;
 8001904:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800190a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kb_ = kb;
 800190e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001914:	e9c1 2308 	strd	r2, r3, [r1, #32]

	setpoint_ = 0.0;
 8001918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	feedback_ = 0.0;
 8001926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	error_ = 0.0;
 8001934:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	error_int_ = 0.0;
 8001942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	error_diff_ = 0.0;
 8001950:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	back_cal_ = 0.0;
 800195e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9c1 23dc 	strd	r2, r3, [r1, #880]	; 0x370

	init();
 800196c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800196e:	f7ff ffa2 	bl	80018b6 <_ZN3PID4initEv>
}
 8001972:	bf00      	nop
 8001974:	3730      	adds	r7, #48	; 0x30
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_ZN3PID11setSetpointEd>:
void PID::setSetpoint(double setpoint)
{
 800197a:	b480      	push	{r7}
 800197c:	b085      	sub	sp, #20
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	ed87 0b00 	vstr	d0, [r7]
	setpoint_ = setpoint;
 8001986:	68f9      	ldr	r1, [r7, #12]
 8001988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800198c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_ZN3PID11setFeedbackEd>:
void PID::setFeedback(double feedback)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	ed87 0b00 	vstr	d0, [r7]
	feedback_ = feedback;
 80019a8:	68f9      	ldr	r1, [r7, #12]
 80019aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <_ZN3PID10clacOutputEv>:
double PID::clacOutput()
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	error_ = setpoint_ - feedback_;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019d4:	f7fe fc18 	bl	8000208 <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	for (int i = FILTER_COEFF - 1; i; --i)
 80019e2:	2363      	movs	r3, #99	; 0x63
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d012      	beq.n	8001a12 <_ZN3PID10clacOutputEv+0x52>
	{
		error_hist_[i] = error_hist_[i - 1];
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	3b01      	subs	r3, #1
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	330a      	adds	r3, #10
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a00:	310a      	adds	r1, #10
 8001a02:	00c9      	lsls	r1, r1, #3
 8001a04:	4401      	add	r1, r0
 8001a06:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = FILTER_COEFF - 1; i; --i)
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	e7e9      	b.n	80019e6 <_ZN3PID10clacOutputEv+0x26>
	}
	error_hist_[0] = error_;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	error_int_ += back_cal_; //Back Calculation
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	e9d3 23dc 	ldrd	r2, r3, [r3, #880]	; 0x370
 8001a2a:	f7fe fbef 	bl	800020c <__adddf3>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	error_int_ += error_ * dt_;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fd95 	bl	8000578 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4620      	mov	r0, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	f7fe fbd9 	bl	800020c <__adddf3>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	error_diff_ = error_hist_[0] - error_hist_[1];
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001a70:	f7fe fbca 	bl	8000208 <__aeabi_dsub>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	double p = kp_ * error_;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001a8a:	f7fe fd75 	bl	8000578 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double i = ki_ * error_int_;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001aa2:	f7fe fd69 	bl	8000578 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double d = kd_ * error_diff_;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001aba:	f7fe fd5d 	bl	8000578 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	output_ = p + i + d;
 8001ac6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ace:	f7fe fb9d 	bl	800020c <__adddf3>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ade:	f7fe fb95 	bl	800020c <__adddf3>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	e9c1 23de 	strd	r2, r3, [r1, #888]	; 0x378
	output_SAT_ = SATURATION(output_, -1, 1);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	e9d3 01de 	ldrd	r0, r1, [r3, #888]	; 0x378
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <_ZN3PID10clacOutputEv+0x1d0>)
 8001af8:	f7fe ffb0 	bl	8000a5c <__aeabi_dcmplt>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <_ZN3PID10clacOutputEv+0x14a>
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <_ZN3PID10clacOutputEv+0x1d0>)
 8001b08:	e011      	b.n	8001b2e <_ZN3PID10clacOutputEv+0x16e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	e9d3 01de 	ldrd	r0, r1, [r3, #888]	; 0x378
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <_ZN3PID10clacOutputEv+0x1d4>)
 8001b16:	f7fe ffbf 	bl	8000a98 <__aeabi_dcmpgt>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <_ZN3PID10clacOutputEv+0x168>
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <_ZN3PID10clacOutputEv+0x1d4>)
 8001b26:	e002      	b.n	8001b2e <_ZN3PID10clacOutputEv+0x16e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	e9c1 23e0 	strd	r2, r3, [r1, #896]	; 0x380
	if(output_ != output_SAT_){
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	e9d3 01de 	ldrd	r0, r1, [r3, #888]	; 0x378
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	e9d3 23e0 	ldrd	r2, r3, [r3, #896]	; 0x380
 8001b40:	f7fe ff82 	bl	8000a48 <__aeabi_dcmpeq>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d115      	bne.n	8001b76 <_ZN3PID10clacOutputEv+0x1b6>
		back_cal_ = (output_SAT_ - output_) * kb_;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	e9d3 01e0 	ldrd	r0, r1, [r3, #896]	; 0x380
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8001b56:	f7fe fb57 	bl	8000208 <__aeabi_dsub>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b68:	f7fe fd06 	bl	8000578 <__aeabi_dmul>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	e9c1 23dc 	strd	r2, r3, [r1, #880]	; 0x370
	}
	return output_SAT_;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	e9d3 23e0 	ldrd	r2, r3, [r3, #896]	; 0x380
 8001b7c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b80:	eeb0 0a47 	vmov.f32	s0, s14
 8001b84:	eef0 0a67 	vmov.f32	s1, s15
 8001b88:	3728      	adds	r7, #40	; 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	bff00000 	.word	0xbff00000
 8001b94:	3ff00000 	.word	0x3ff00000

08001b98 <_ZN5Robot4initEv>:
 *
 */

#include <robot.h>

void Robot::init() {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af04      	add	r7, sp, #16
 8001b9e:	6078      	str	r0, [r7, #4]
	//Robot hardware parameters
	wheel_radius_ 	= (double)0.075/2;	//meter
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	a3b6      	add	r3, pc, #728	; (adr r3, 8001e84 <_ZN5Robot4initEv+0x2ec>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	e9c1 2300 	strd	r2, r3, [r1]
	l_x_ 			= (double)0.248/2;	//meter
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	a3b4      	add	r3, pc, #720	; (adr r3, 8001e8c <_ZN5Robot4initEv+0x2f4>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	e941 2302 	strd	r2, r3, [r1, #-8]
	l_y_ 			= (double)0.200/2;	//meter
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	a3b1      	add	r3, pc, #708	; (adr r3, 8001e94 <_ZN5Robot4initEv+0x2fc>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	e9c1 2300 	strd	r2, r3, [r1]
	dt_ = 0.001; //PeriodElapsedCallback rate = 1k Hz (TIM7)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	a3af      	add	r3, pc, #700	; (adr r3, 8001e9c <_ZN5Robot4initEv+0x304>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	e941 2302 	strd	r2, r3, [r1, #-8]
	encoder_resolution_ = 1024;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bee:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
	reduction_ratio_ = 44; //1:44 reduction_ratio
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	222c      	movs	r2, #44	; 0x2c
 8001bf6:	f8c3 2fc4 	str.w	r2, [r3, #4036]	; 0xfc4
	one_round_count_ = encoder_resolution_ * reduction_ratio_ * 4; //encoder's count for one round
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	; 0xfc0
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	f8d2 2fc4 	ldr.w	r2, [r2, #4036]	; 0xfc4
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	009a      	lsls	r2, r3, #2
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8c3 2fc8 	str.w	r2, [r3, #4040]	; 0xfc8

	motor_[0].init(&htim12, TIM_CHANNEL_2, 4499, GPIOD, GPIOD, GPIO_PIN_8, GPIO_PIN_14); //(*htim, channel, resolution, port_a, port_b, pin_a, pin_b)
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c18:	9303      	str	r3, [sp, #12]
 8001c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c1e:	9302      	str	r3, [sp, #8]
 8001c20:	4b8d      	ldr	r3, [pc, #564]	; (8001e58 <_ZN5Robot4initEv+0x2c0>)
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	4b8c      	ldr	r3, [pc, #560]	; (8001e58 <_ZN5Robot4initEv+0x2c0>)
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	f241 1393 	movw	r3, #4499	; 0x1193
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	498b      	ldr	r1, [pc, #556]	; (8001e5c <_ZN5Robot4initEv+0x2c4>)
 8001c30:	f003 fc1e 	bl	8005470 <_ZN7VNH50194initEP17TIM_HandleTypeDefmmP12GPIO_TypeDefS3_tt>
	motor_[1].init(&htim12, TIM_CHANNEL_1, 4499, GPIOB, GPIOB, GPIO_PIN_12, GPIO_PIN_13);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3e:	9303      	str	r3, [sp, #12]
 8001c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	4b86      	ldr	r3, [pc, #536]	; (8001e60 <_ZN5Robot4initEv+0x2c8>)
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	4b85      	ldr	r3, [pc, #532]	; (8001e60 <_ZN5Robot4initEv+0x2c8>)
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	f241 1393 	movw	r3, #4499	; 0x1193
 8001c52:	2200      	movs	r2, #0
 8001c54:	4981      	ldr	r1, [pc, #516]	; (8001e5c <_ZN5Robot4initEv+0x2c4>)
 8001c56:	f003 fc0b 	bl	8005470 <_ZN7VNH50194initEP17TIM_HandleTypeDefmmP12GPIO_TypeDefS3_tt>
	motor_[2].init(&htim9, TIM_CHANNEL_1, 4499, GPIOE, GPIOE, GPIO_PIN_2, GPIO_PIN_3);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8001c60:	2308      	movs	r3, #8
 8001c62:	9303      	str	r3, [sp, #12]
 8001c64:	2304      	movs	r3, #4
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	4b7e      	ldr	r3, [pc, #504]	; (8001e64 <_ZN5Robot4initEv+0x2cc>)
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	4b7d      	ldr	r3, [pc, #500]	; (8001e64 <_ZN5Robot4initEv+0x2cc>)
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	f241 1393 	movw	r3, #4499	; 0x1193
 8001c74:	2200      	movs	r2, #0
 8001c76:	497c      	ldr	r1, [pc, #496]	; (8001e68 <_ZN5Robot4initEv+0x2d0>)
 8001c78:	f003 fbfa 	bl	8005470 <_ZN7VNH50194initEP17TIM_HandleTypeDefmmP12GPIO_TypeDefS3_tt>
	motor_[3].init(&htim9, TIM_CHANNEL_2, 4499, GPIOE, GPIOC, GPIO_PIN_4, GPIO_PIN_13);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8001c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c86:	9303      	str	r3, [sp, #12]
 8001c88:	2310      	movs	r3, #16
 8001c8a:	9302      	str	r3, [sp, #8]
 8001c8c:	4b77      	ldr	r3, [pc, #476]	; (8001e6c <_ZN5Robot4initEv+0x2d4>)
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	4b74      	ldr	r3, [pc, #464]	; (8001e64 <_ZN5Robot4initEv+0x2cc>)
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f241 1393 	movw	r3, #4499	; 0x1193
 8001c98:	2204      	movs	r2, #4
 8001c9a:	4973      	ldr	r1, [pc, #460]	; (8001e68 <_ZN5Robot4initEv+0x2d0>)
 8001c9c:	f003 fbe8 	bl	8005470 <_ZN7VNH50194initEP17TIM_HandleTypeDefmmP12GPIO_TypeDefS3_tt>
	motor_[1].setInverted(true);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3328      	adds	r3, #40	; 0x28
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 fc10 	bl	80054cc <_ZN7VNH501911setInvertedEb>
	motor_[3].setInverted(true);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3378      	adds	r3, #120	; 0x78
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fc0a 	bl	80054cc <_ZN7VNH501911setInvertedEb>

	encoder_[0].init(&htim2, 32, TIM_CHANNEL_1, TIM_CHANNEL_2); //(*htim, timer_bits, channel_1, channel_2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	496a      	ldr	r1, [pc, #424]	; (8001e70 <_ZN5Robot4initEv+0x2d8>)
 8001cc8:	f7ff f97c 	bl	8000fc4 <_ZN7Encoder4initEP17TIM_HandleTypeDefhmm>
	encoder_[1].init(&htim5, 32, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2220      	movs	r2, #32
 8001cda:	4966      	ldr	r1, [pc, #408]	; (8001e74 <_ZN5Robot4initEv+0x2dc>)
 8001cdc:	f7ff f972 	bl	8000fc4 <_ZN7Encoder4initEP17TIM_HandleTypeDefhmm>
	encoder_[2].init(&htim3, 16, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2300      	movs	r3, #0
 8001cec:	2210      	movs	r2, #16
 8001cee:	4962      	ldr	r1, [pc, #392]	; (8001e78 <_ZN5Robot4initEv+0x2e0>)
 8001cf0:	f7ff f968 	bl	8000fc4 <_ZN7Encoder4initEP17TIM_HandleTypeDefhmm>
	encoder_[3].init(&htim4, 16, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2210      	movs	r2, #16
 8001d02:	495e      	ldr	r1, [pc, #376]	; (8001e7c <_ZN5Robot4initEv+0x2e4>)
 8001d04:	f7ff f95e 	bl	8000fc4 <_ZN7Encoder4initEP17TIM_HandleTypeDefhmm>

	pid[0].init(dt_, 0.132, 15.47, 0.0, 0); //(dt, kp, ki, kd, kb)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8001d14:	ed13 7b02 	vldr	d7, [r3, #-8]
 8001d18:	ed9f 4b47 	vldr	d4, [pc, #284]	; 8001e38 <_ZN5Robot4initEv+0x2a0>
 8001d1c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8001e38 <_ZN5Robot4initEv+0x2a0>
 8001d20:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8001e40 <_ZN5Robot4initEv+0x2a8>
 8001d24:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8001e48 <_ZN5Robot4initEv+0x2b0>
 8001d28:	eeb0 0a47 	vmov.f32	s0, s14
 8001d2c:	eef0 0a67 	vmov.f32	s1, s15
 8001d30:	4610      	mov	r0, r2
 8001d32:	f7ff fdca 	bl	80018ca <_ZN3PID4initEddddd>
	pid[1].init(dt_, 0.132, 15.47, 0.0, 0);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f503 6295 	add.w	r2, r3, #1192	; 0x4a8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8001d42:	ed13 7b02 	vldr	d7, [r3, #-8]
 8001d46:	ed9f 4b3c 	vldr	d4, [pc, #240]	; 8001e38 <_ZN5Robot4initEv+0x2a0>
 8001d4a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8001e38 <_ZN5Robot4initEv+0x2a0>
 8001d4e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8001e40 <_ZN5Robot4initEv+0x2a8>
 8001d52:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8001e48 <_ZN5Robot4initEv+0x2b0>
 8001d56:	eeb0 0a47 	vmov.f32	s0, s14
 8001d5a:	eef0 0a67 	vmov.f32	s1, s15
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f7ff fdb3 	bl	80018ca <_ZN3PID4initEddddd>
	pid[2].init(dt_, 0.132, 15.47, 0.0, 0);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f503 6203 	add.w	r2, r3, #2096	; 0x830
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8001d70:	ed13 7b02 	vldr	d7, [r3, #-8]
 8001d74:	ed9f 4b30 	vldr	d4, [pc, #192]	; 8001e38 <_ZN5Robot4initEv+0x2a0>
 8001d78:	ed9f 3b2f 	vldr	d3, [pc, #188]	; 8001e38 <_ZN5Robot4initEv+0x2a0>
 8001d7c:	ed9f 2b30 	vldr	d2, [pc, #192]	; 8001e40 <_ZN5Robot4initEv+0x2a8>
 8001d80:	ed9f 1b31 	vldr	d1, [pc, #196]	; 8001e48 <_ZN5Robot4initEv+0x2b0>
 8001d84:	eeb0 0a47 	vmov.f32	s0, s14
 8001d88:	eef0 0a67 	vmov.f32	s1, s15
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	f7ff fd9c 	bl	80018ca <_ZN3PID4initEddddd>
	pid[3].init(dt_, 0.132, 15.47, 0.0, 0);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f603 32b8 	addw	r2, r3, #3000	; 0xbb8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8001d9e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8001da2:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8001e38 <_ZN5Robot4initEv+0x2a0>
 8001da6:	ed9f 3b24 	vldr	d3, [pc, #144]	; 8001e38 <_ZN5Robot4initEv+0x2a0>
 8001daa:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8001e40 <_ZN5Robot4initEv+0x2a8>
 8001dae:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001e48 <_ZN5Robot4initEv+0x2b0>
 8001db2:	eeb0 0a47 	vmov.f32	s0, s14
 8001db6:	eef0 0a67 	vmov.f32	s1, s15
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f7ff fd85 	bl	80018ca <_ZN3PID4initEddddd>

	kn_.init(wheel_radius_, l_x_, l_y_); //(wheel_radius, l_x, l_y)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f503 6274 	add.w	r2, r3, #3904	; 0xf40
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001dcc:	ed93 7b00 	vldr	d7, [r3]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001dd6:	ed13 6b02 	vldr	d6, [r3, #-8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001de0:	ed93 5b00 	vldr	d5, [r3]
 8001de4:	eeb0 2a45 	vmov.f32	s4, s10
 8001de8:	eef0 2a65 	vmov.f32	s5, s11
 8001dec:	eeb0 1a46 	vmov.f32	s2, s12
 8001df0:	eef0 1a66 	vmov.f32	s3, s13
 8001df4:	eeb0 0a47 	vmov.f32	s0, s14
 8001df8:	eef0 0a67 	vmov.f32	s1, s15
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7ff fa2e 	bl	800125e <_ZN9Kinematic4initEddd>

	LPF_.init(1000, dt_); //(iCutOffFrequency, iDeltaTime)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f503 6279 	add.w	r2, r3, #3984	; 0xf90
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8001e0e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8001e12:	eeb0 1a47 	vmov.f32	s2, s14
 8001e16:	eef0 1a67 	vmov.f32	s3, s15
 8001e1a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8001e50 <_ZN5Robot4initEv+0x2b8>
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f7ff f836 	bl	8000e90 <_ZN13LowPassFilter4initEdd>

	HAL_TIM_Base_Start_IT (&htim7);
 8001e24:	4816      	ldr	r0, [pc, #88]	; (8001e80 <_ZN5Robot4initEv+0x2e8>)
 8001e26:	f005 f927 	bl	8007078 <HAL_TIM_Base_Start_IT>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	f3af 8000 	nop.w
	...
 8001e40:	d70a3d71 	.word	0xd70a3d71
 8001e44:	402ef0a3 	.word	0x402ef0a3
 8001e48:	4189374c 	.word	0x4189374c
 8001e4c:	3fc0e560 	.word	0x3fc0e560
 8001e50:	00000000 	.word	0x00000000
 8001e54:	408f4000 	.word	0x408f4000
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	20001d0c 	.word	0x20001d0c
 8001e60:	40020400 	.word	0x40020400
 8001e64:	40021000 	.word	0x40021000
 8001e68:	20001cc4 	.word	0x20001cc4
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	20001b14 	.word	0x20001b14
 8001e74:	20001bec 	.word	0x20001bec
 8001e78:	20001b5c 	.word	0x20001b5c
 8001e7c:	20001ba4 	.word	0x20001ba4
 8001e80:	20001c7c 	.word	0x20001c7c
 8001e84:	33333333 	.word	0x33333333
 8001e88:	3fa33333 	.word	0x3fa33333
 8001e8c:	c8b43958 	.word	0xc8b43958
 8001e90:	3fbfbe76 	.word	0x3fbfbe76
 8001e94:	9999999a 	.word	0x9999999a
 8001e98:	3fb99999 	.word	0x3fb99999
 8001e9c:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ea0:	3f50624d 	.word	0x3f50624d
 8001ea4:	00000000 	.word	0x00000000

08001ea8 <_ZN5Robot13diff_to_omegaEl>:

double Robot::diff_to_omega(int32_t diff){
 8001ea8:	b5b0      	push	{r4, r5, r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
	omega_ = 2 * M_PI * diff / one_round_count_ /dt_;
 8001eb2:	6838      	ldr	r0, [r7, #0]
 8001eb4:	f7fe faf6 	bl	80004a4 <__aeabi_i2d>
 8001eb8:	a31b      	add	r3, pc, #108	; (adr r3, 8001f28 <_ZN5Robot13diff_to_omegaEl+0x80>)
 8001eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebe:	f7fe fb5b 	bl	8000578 <__aeabi_dmul>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4614      	mov	r4, r2
 8001ec8:	461d      	mov	r5, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fae7 	bl	80004a4 <__aeabi_i2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4620      	mov	r0, r4
 8001edc:	4629      	mov	r1, r5
 8001ede:	f7fe fc75 	bl	80007cc <__aeabi_ddiv>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8001ef0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001ef4:	f7fe fc6a 	bl	80007cc <__aeabi_ddiv>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	f501 617d 	add.w	r1, r1, #4048	; 0xfd0
 8001f02:	e9c1 2300 	strd	r2, r3, [r1]
	return omega_;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f503 637d 	add.w	r3, r3, #4048	; 0xfd0
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f14:	eeb0 0a47 	vmov.f32	s0, s14
 8001f18:	eef0 0a67 	vmov.f32	s1, s15
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bdb0      	pop	{r4, r5, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	f3af 8000 	nop.w
 8001f28:	54442d18 	.word	0x54442d18
 8001f2c:	401921fb 	.word	0x401921fb

08001f30 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <_ZN3ros3MsgC1Ev+0x1c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	0800a100 	.word	0x0800a100

08001f50 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ffe8 	bl	8001f30 <_ZN3ros3MsgC1Ev>
 8001f60:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	0800a0e8 	.word	0x0800a0e8

08001fa0 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fa0:	b480      	push	{r7}
 8001fa2:	b08b      	sub	sp, #44	; 0x2c
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001fb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8001fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	4401      	add	r1, r0
 8001fc2:	b2d3      	uxtb	r3, r2
 8001fc4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8001fc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	0a02      	lsrs	r2, r0, #8
 8001fd4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001fd8:	0a0b      	lsrs	r3, r1, #8
 8001fda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fdc:	3101      	adds	r1, #1
 8001fde:	6838      	ldr	r0, [r7, #0]
 8001fe0:	4401      	add	r1, r0
 8001fe2:	b2d3      	uxtb	r3, r2
 8001fe4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8001fe6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	0c02      	lsrs	r2, r0, #16
 8001ff4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ff8:	0c0b      	lsrs	r3, r1, #16
 8001ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ffc:	3102      	adds	r1, #2
 8001ffe:	6838      	ldr	r0, [r7, #0]
 8002000:	4401      	add	r1, r0
 8002002:	b2d3      	uxtb	r3, r2
 8002004:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002006:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	0e02      	lsrs	r2, r0, #24
 8002014:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002018:	0e0b      	lsrs	r3, r1, #24
 800201a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800201c:	3103      	adds	r1, #3
 800201e:	6838      	ldr	r0, [r7, #0]
 8002020:	4401      	add	r1, r0
 8002022:	b2d3      	uxtb	r3, r2
 8002024:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002026:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	000a      	movs	r2, r1
 8002034:	2300      	movs	r3, #0
 8002036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002038:	3104      	adds	r1, #4
 800203a:	6838      	ldr	r0, [r7, #0]
 800203c:	4401      	add	r1, r0
 800203e:	b2d3      	uxtb	r3, r2
 8002040:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002042:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	0a0a      	lsrs	r2, r1, #8
 8002050:	2300      	movs	r3, #0
 8002052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002054:	3105      	adds	r1, #5
 8002056:	6838      	ldr	r0, [r7, #0]
 8002058:	4401      	add	r1, r0
 800205a:	b2d3      	uxtb	r3, r2
 800205c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800205e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	0c0a      	lsrs	r2, r1, #16
 800206c:	2300      	movs	r3, #0
 800206e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002070:	3106      	adds	r1, #6
 8002072:	6838      	ldr	r0, [r7, #0]
 8002074:	4401      	add	r1, r0
 8002076:	b2d3      	uxtb	r3, r2
 8002078:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800207a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	0e0a      	lsrs	r2, r1, #24
 8002088:	2300      	movs	r3, #0
 800208a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800208c:	3107      	adds	r1, #7
 800208e:	6838      	ldr	r0, [r7, #0]
 8002090:	4401      	add	r1, r0
 8002092:	b2d3      	uxtb	r3, r2
 8002094:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	3308      	adds	r3, #8
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80020a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ac:	6838      	ldr	r0, [r7, #0]
 80020ae:	4401      	add	r1, r0
 80020b0:	b2d3      	uxtb	r3, r2
 80020b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80020b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	0a02      	lsrs	r2, r0, #8
 80020c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80020c6:	0a0b      	lsrs	r3, r1, #8
 80020c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ca:	3101      	adds	r1, #1
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	4401      	add	r1, r0
 80020d0:	b2d3      	uxtb	r3, r2
 80020d2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80020d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	0c02      	lsrs	r2, r0, #16
 80020e2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80020e6:	0c0b      	lsrs	r3, r1, #16
 80020e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ea:	3102      	adds	r1, #2
 80020ec:	6838      	ldr	r0, [r7, #0]
 80020ee:	4401      	add	r1, r0
 80020f0:	b2d3      	uxtb	r3, r2
 80020f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80020f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	0e02      	lsrs	r2, r0, #24
 8002102:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002106:	0e0b      	lsrs	r3, r1, #24
 8002108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800210a:	3103      	adds	r1, #3
 800210c:	6838      	ldr	r0, [r7, #0]
 800210e:	4401      	add	r1, r0
 8002110:	b2d3      	uxtb	r3, r2
 8002112:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002114:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	000a      	movs	r2, r1
 8002122:	2300      	movs	r3, #0
 8002124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002126:	3104      	adds	r1, #4
 8002128:	6838      	ldr	r0, [r7, #0]
 800212a:	4401      	add	r1, r0
 800212c:	b2d3      	uxtb	r3, r2
 800212e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002130:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	0a0a      	lsrs	r2, r1, #8
 800213e:	2300      	movs	r3, #0
 8002140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002142:	3105      	adds	r1, #5
 8002144:	6838      	ldr	r0, [r7, #0]
 8002146:	4401      	add	r1, r0
 8002148:	b2d3      	uxtb	r3, r2
 800214a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800214c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	0c0a      	lsrs	r2, r1, #16
 800215a:	2300      	movs	r3, #0
 800215c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215e:	3106      	adds	r1, #6
 8002160:	6838      	ldr	r0, [r7, #0]
 8002162:	4401      	add	r1, r0
 8002164:	b2d3      	uxtb	r3, r2
 8002166:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002168:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	0e0a      	lsrs	r2, r1, #24
 8002176:	2300      	movs	r3, #0
 8002178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217a:	3107      	adds	r1, #7
 800217c:	6838      	ldr	r0, [r7, #0]
 800217e:	4401      	add	r1, r0
 8002180:	b2d3      	uxtb	r3, r2
 8002182:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	3308      	adds	r3, #8
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002190:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800219a:	6838      	ldr	r0, [r7, #0]
 800219c:	4401      	add	r1, r0
 800219e:	b2d3      	uxtb	r3, r2
 80021a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80021a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	0a02      	lsrs	r2, r0, #8
 80021b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80021b4:	0a0b      	lsrs	r3, r1, #8
 80021b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021b8:	3101      	adds	r1, #1
 80021ba:	6838      	ldr	r0, [r7, #0]
 80021bc:	4401      	add	r1, r0
 80021be:	b2d3      	uxtb	r3, r2
 80021c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80021c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	0c02      	lsrs	r2, r0, #16
 80021d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80021d4:	0c0b      	lsrs	r3, r1, #16
 80021d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d8:	3102      	adds	r1, #2
 80021da:	6838      	ldr	r0, [r7, #0]
 80021dc:	4401      	add	r1, r0
 80021de:	b2d3      	uxtb	r3, r2
 80021e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80021e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	0e02      	lsrs	r2, r0, #24
 80021f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021f4:	0e0b      	lsrs	r3, r1, #24
 80021f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f8:	3103      	adds	r1, #3
 80021fa:	6838      	ldr	r0, [r7, #0]
 80021fc:	4401      	add	r1, r0
 80021fe:	b2d3      	uxtb	r3, r2
 8002200:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002202:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	000a      	movs	r2, r1
 8002210:	2300      	movs	r3, #0
 8002212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002214:	3104      	adds	r1, #4
 8002216:	6838      	ldr	r0, [r7, #0]
 8002218:	4401      	add	r1, r0
 800221a:	b2d3      	uxtb	r3, r2
 800221c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800221e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	0a0a      	lsrs	r2, r1, #8
 800222c:	2300      	movs	r3, #0
 800222e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002230:	3105      	adds	r1, #5
 8002232:	6838      	ldr	r0, [r7, #0]
 8002234:	4401      	add	r1, r0
 8002236:	b2d3      	uxtb	r3, r2
 8002238:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800223a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	0c0a      	lsrs	r2, r1, #16
 8002248:	2300      	movs	r3, #0
 800224a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800224c:	3106      	adds	r1, #6
 800224e:	6838      	ldr	r0, [r7, #0]
 8002250:	4401      	add	r1, r0
 8002252:	b2d3      	uxtb	r3, r2
 8002254:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002256:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	0e0a      	lsrs	r2, r1, #24
 8002264:	2300      	movs	r3, #0
 8002266:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002268:	3107      	adds	r1, #7
 800226a:	6838      	ldr	r0, [r7, #0]
 800226c:	4401      	add	r1, r0
 800226e:	b2d3      	uxtb	r3, r2
 8002270:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	3308      	adds	r3, #8
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800227a:	4618      	mov	r0, r3
 800227c:	372c      	adds	r7, #44	; 0x2c
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002286:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800228a:	b0eb      	sub	sp, #428	; 0x1ac
 800228c:	af00      	add	r7, sp, #0
 800228e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002292:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80022ac:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80022b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022b4:	4413      	add	r3, r2
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2200      	movs	r2, #0
 80022bc:	461c      	mov	r4, r3
 80022be:	4615      	mov	r5, r2
 80022c0:	ea40 0804 	orr.w	r8, r0, r4
 80022c4:	ea41 0905 	orr.w	r9, r1, r5
 80022c8:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022cc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80022d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2200      	movs	r2, #0
 80022e2:	469a      	mov	sl, r3
 80022e4:	4693      	mov	fp, r2
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80022f2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80022f6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80022fa:	ea40 0402 	orr.w	r4, r0, r2
 80022fe:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002302:	430b      	orrs	r3, r1
 8002304:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002308:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800230c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002310:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002314:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002318:	1c9a      	adds	r2, r3, #2
 800231a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800231e:	4413      	add	r3, r2
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2200      	movs	r2, #0
 8002326:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800232a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800233a:	464c      	mov	r4, r9
 800233c:	0423      	lsls	r3, r4, #16
 800233e:	4644      	mov	r4, r8
 8002340:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002344:	4644      	mov	r4, r8
 8002346:	0422      	lsls	r2, r4, #16
 8002348:	ea40 0402 	orr.w	r4, r0, r2
 800234c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002350:	430b      	orrs	r3, r1
 8002352:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002356:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800235a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800235e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002362:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002366:	1cda      	adds	r2, r3, #3
 8002368:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800236c:	4413      	add	r3, r2
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2200      	movs	r2, #0
 8002374:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002378:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800237c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002380:	4623      	mov	r3, r4
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002388:	4623      	mov	r3, r4
 800238a:	061b      	lsls	r3, r3, #24
 800238c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002390:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002394:	4623      	mov	r3, r4
 8002396:	4303      	orrs	r3, r0
 8002398:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800239c:	462b      	mov	r3, r5
 800239e:	430b      	orrs	r3, r1
 80023a0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023a4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80023a8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80023ac:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80023b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023b4:	1d1a      	adds	r2, r3, #4
 80023b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023ba:	4413      	add	r3, r2
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2200      	movs	r2, #0
 80023c2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80023c6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80023d6:	0023      	movs	r3, r4
 80023d8:	2200      	movs	r2, #0
 80023da:	ea40 0402 	orr.w	r4, r0, r2
 80023de:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80023e2:	430b      	orrs	r3, r1
 80023e4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80023e8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80023ec:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80023f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80023f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023f8:	1d5a      	adds	r2, r3, #5
 80023fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2200      	movs	r2, #0
 8002406:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800240a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800241a:	0223      	lsls	r3, r4, #8
 800241c:	2200      	movs	r2, #0
 800241e:	ea40 0402 	orr.w	r4, r0, r2
 8002422:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002426:	430b      	orrs	r3, r1
 8002428:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800242c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002430:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002434:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002438:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800243c:	1d9a      	adds	r2, r3, #6
 800243e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002442:	4413      	add	r3, r2
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2200      	movs	r2, #0
 800244a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800244e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800245e:	0423      	lsls	r3, r4, #16
 8002460:	2200      	movs	r2, #0
 8002462:	ea40 0402 	orr.w	r4, r0, r2
 8002466:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800246a:	430b      	orrs	r3, r1
 800246c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002470:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002474:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002478:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800247c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002480:	1dda      	adds	r2, r3, #7
 8002482:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002486:	4413      	add	r3, r2
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2200      	movs	r2, #0
 800248e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002492:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80024a2:	0623      	lsls	r3, r4, #24
 80024a4:	2200      	movs	r2, #0
 80024a6:	ea40 0402 	orr.w	r4, r0, r2
 80024aa:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80024ae:	430b      	orrs	r3, r1
 80024b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80024b4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80024b8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80024bc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80024c0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80024c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80024c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024cc:	3308      	adds	r3, #8
 80024ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024de:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80024e2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80024e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024ea:	4413      	add	r3, r2
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2200      	movs	r2, #0
 80024f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80024f6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80024fa:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80024fe:	4623      	mov	r3, r4
 8002500:	4303      	orrs	r3, r0
 8002502:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002506:	462b      	mov	r3, r5
 8002508:	430b      	orrs	r3, r1
 800250a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800250e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002512:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002516:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800251a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002524:	4413      	add	r3, r2
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2200      	movs	r2, #0
 800252c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002530:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002540:	464c      	mov	r4, r9
 8002542:	0223      	lsls	r3, r4, #8
 8002544:	4644      	mov	r4, r8
 8002546:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800254a:	4644      	mov	r4, r8
 800254c:	0222      	lsls	r2, r4, #8
 800254e:	ea40 0402 	orr.w	r4, r0, r2
 8002552:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002556:	430b      	orrs	r3, r1
 8002558:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800255c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002560:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002564:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002568:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800256c:	1c9a      	adds	r2, r3, #2
 800256e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002572:	4413      	add	r3, r2
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2200      	movs	r2, #0
 800257a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800257e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800258e:	464c      	mov	r4, r9
 8002590:	0423      	lsls	r3, r4, #16
 8002592:	4644      	mov	r4, r8
 8002594:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002598:	4644      	mov	r4, r8
 800259a:	0422      	lsls	r2, r4, #16
 800259c:	ea40 0402 	orr.w	r4, r0, r2
 80025a0:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80025a4:	430b      	orrs	r3, r1
 80025a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025aa:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80025ae:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025b2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80025b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025ba:	1cda      	adds	r2, r3, #3
 80025bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025c0:	4413      	add	r3, r2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2200      	movs	r2, #0
 80025c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025cc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025d0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80025d4:	4623      	mov	r3, r4
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025dc:	4623      	mov	r3, r4
 80025de:	061b      	lsls	r3, r3, #24
 80025e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025e4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80025e8:	4623      	mov	r3, r4
 80025ea:	4303      	orrs	r3, r0
 80025ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025f0:	462b      	mov	r3, r5
 80025f2:	430b      	orrs	r3, r1
 80025f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025f8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80025fc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002600:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002604:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002608:	1d1a      	adds	r2, r3, #4
 800260a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800260e:	4413      	add	r3, r2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2200      	movs	r2, #0
 8002616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800261a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800262a:	0023      	movs	r3, r4
 800262c:	2200      	movs	r2, #0
 800262e:	ea40 0402 	orr.w	r4, r0, r2
 8002632:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002636:	430b      	orrs	r3, r1
 8002638:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800263c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002640:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002644:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002648:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800264c:	1d5a      	adds	r2, r3, #5
 800264e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002652:	4413      	add	r3, r2
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2200      	movs	r2, #0
 800265a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800265e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800266e:	0223      	lsls	r3, r4, #8
 8002670:	2200      	movs	r2, #0
 8002672:	ea40 0402 	orr.w	r4, r0, r2
 8002676:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800267a:	430b      	orrs	r3, r1
 800267c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002680:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002684:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002688:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800268c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002690:	1d9a      	adds	r2, r3, #6
 8002692:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002696:	4413      	add	r3, r2
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2200      	movs	r2, #0
 800269e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80026b2:	0423      	lsls	r3, r4, #16
 80026b4:	2200      	movs	r2, #0
 80026b6:	ea40 0402 	orr.w	r4, r0, r2
 80026ba:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80026be:	430b      	orrs	r3, r1
 80026c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026c4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80026c8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80026cc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80026d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026d4:	1dda      	adds	r2, r3, #7
 80026d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2200      	movs	r2, #0
 80026e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80026f6:	0623      	lsls	r3, r4, #24
 80026f8:	2200      	movs	r2, #0
 80026fa:	ea40 0402 	orr.w	r4, r0, r2
 80026fe:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002702:	430b      	orrs	r3, r1
 8002704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002708:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800270c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002710:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002714:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002718:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 800271c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002720:	3308      	adds	r3, #8
 8002722:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002732:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002736:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800273a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800273e:	4413      	add	r3, r2
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2200      	movs	r2, #0
 8002746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800274a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800274e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002752:	4623      	mov	r3, r4
 8002754:	4303      	orrs	r3, r0
 8002756:	67bb      	str	r3, [r7, #120]	; 0x78
 8002758:	462b      	mov	r3, r5
 800275a:	430b      	orrs	r3, r1
 800275c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800275e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002762:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002766:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800276a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002774:	4413      	add	r3, r2
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2200      	movs	r2, #0
 800277c:	673b      	str	r3, [r7, #112]	; 0x70
 800277e:	677a      	str	r2, [r7, #116]	; 0x74
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800278c:	464c      	mov	r4, r9
 800278e:	0223      	lsls	r3, r4, #8
 8002790:	4644      	mov	r4, r8
 8002792:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002796:	4644      	mov	r4, r8
 8002798:	0222      	lsls	r2, r4, #8
 800279a:	ea40 0402 	orr.w	r4, r0, r2
 800279e:	66bc      	str	r4, [r7, #104]	; 0x68
 80027a0:	430b      	orrs	r3, r1
 80027a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027a4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80027a8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027ac:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80027b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027b4:	1c9a      	adds	r2, r3, #2
 80027b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027ba:	4413      	add	r3, r2
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2200      	movs	r2, #0
 80027c2:	663b      	str	r3, [r7, #96]	; 0x60
 80027c4:	667a      	str	r2, [r7, #100]	; 0x64
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027d2:	464c      	mov	r4, r9
 80027d4:	0423      	lsls	r3, r4, #16
 80027d6:	4644      	mov	r4, r8
 80027d8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80027dc:	4644      	mov	r4, r8
 80027de:	0422      	lsls	r2, r4, #16
 80027e0:	ea40 0402 	orr.w	r4, r0, r2
 80027e4:	65bc      	str	r4, [r7, #88]	; 0x58
 80027e6:	430b      	orrs	r3, r1
 80027e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ea:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80027ee:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027f2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80027f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027fa:	1cda      	adds	r2, r3, #3
 80027fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002800:	4413      	add	r3, r2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2200      	movs	r2, #0
 8002808:	653b      	str	r3, [r7, #80]	; 0x50
 800280a:	657a      	str	r2, [r7, #84]	; 0x54
 800280c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002810:	4623      	mov	r3, r4
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002816:	4623      	mov	r3, r4
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	64bb      	str	r3, [r7, #72]	; 0x48
 800281c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002820:	4623      	mov	r3, r4
 8002822:	4303      	orrs	r3, r0
 8002824:	643b      	str	r3, [r7, #64]	; 0x40
 8002826:	462b      	mov	r3, r5
 8002828:	430b      	orrs	r3, r1
 800282a:	647b      	str	r3, [r7, #68]	; 0x44
 800282c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002830:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002834:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002838:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800283c:	1d1a      	adds	r2, r3, #4
 800283e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002842:	4413      	add	r3, r2
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2200      	movs	r2, #0
 800284a:	63bb      	str	r3, [r7, #56]	; 0x38
 800284c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002858:	0023      	movs	r3, r4
 800285a:	2200      	movs	r2, #0
 800285c:	ea40 0402 	orr.w	r4, r0, r2
 8002860:	633c      	str	r4, [r7, #48]	; 0x30
 8002862:	430b      	orrs	r3, r1
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
 8002866:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800286a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800286e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002872:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002876:	1d5a      	adds	r2, r3, #5
 8002878:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800287c:	4413      	add	r3, r2
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2200      	movs	r2, #0
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
 8002886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002892:	0223      	lsls	r3, r4, #8
 8002894:	2200      	movs	r2, #0
 8002896:	ea40 0402 	orr.w	r4, r0, r2
 800289a:	623c      	str	r4, [r7, #32]
 800289c:	430b      	orrs	r3, r1
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
 80028a0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80028a4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80028a8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028b0:	3306      	adds	r3, #6
 80028b2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80028b6:	4413      	add	r3, r2
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2200      	movs	r2, #0
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	61fa      	str	r2, [r7, #28]
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	69bc      	ldr	r4, [r7, #24]
 80028cc:	0423      	lsls	r3, r4, #16
 80028ce:	2200      	movs	r2, #0
 80028d0:	ea40 0402 	orr.w	r4, r0, r2
 80028d4:	613c      	str	r4, [r7, #16]
 80028d6:	430b      	orrs	r3, r1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80028de:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80028e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028ea:	3307      	adds	r3, #7
 80028ec:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80028f0:	4413      	add	r3, r2
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2200      	movs	r2, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	60fa      	str	r2, [r7, #12]
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	68bc      	ldr	r4, [r7, #8]
 8002906:	0623      	lsls	r3, r4, #24
 8002908:	2200      	movs	r2, #0
 800290a:	ea40 0402 	orr.w	r4, r0, r2
 800290e:	603c      	str	r4, [r7, #0]
 8002910:	430b      	orrs	r3, r1
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002918:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 800291c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002920:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002924:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002928:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800292c:	3308      	adds	r3, #8
 800292e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002932:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002936:	4618      	mov	r0, r3
 8002938:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 800293c:	46bd      	mov	sp, r7
 800293e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002942:	4770      	bx	lr

08002944 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	08009e58 	.word	0x08009e58

08002960 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	08009e70 	.word	0x08009e70

0800297c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fad2 	bl	8001f30 <_ZN3ros3MsgC1Ev>
 800298c:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3308      	adds	r3, #8
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fada 	bl	8001f50 <_ZN13geometry_msgs7Vector3C1Ev>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3328      	adds	r3, #40	; 0x28
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fad5 	bl	8001f50 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	0800a0d0 	.word	0x0800a0d0

080029b4 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f103 0008 	add.w	r0, r3, #8
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	4413      	add	r3, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	f7ff fae6 	bl	8001fa0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	f7ff fad9 	bl	8001fa0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80029ee:	4602      	mov	r2, r0
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
      return offset;
 80029f6:	68fb      	ldr	r3, [r7, #12]
    }
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f103 0008 	add.w	r0, r3, #8
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f7ff fc33 	bl	8002286 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4413      	add	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	4413      	add	r3, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7ff fc26 	bl	8002286 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
     return offset;
 8002a42:	68fb      	ldr	r3, [r7, #12]
    }
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	08009e94 	.word	0x08009e94

08002a68 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	08009ea8 	.word	0x08009ea8

08002a84 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fa4e 	bl	8001f30 <_ZN3ros3MsgC1Ev>
 8002a94:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	711a      	strb	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002aa4:	609a      	str	r2, [r3, #8]
    {
    }
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	0800a0b8 	.word	0x0800a0b8
 8002ab4:	08009ecc 	.word	0x08009ecc

08002ab8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	7912      	ldrb	r2, [r2, #4]
 8002ad0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fb87 	bl	80001f0 <strlen>
 8002ae2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 ffed 	bl	8003acc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3304      	adds	r3, #4
 8002af6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	18d0      	adds	r0, r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	4619      	mov	r1, r3
 8002b06:	f007 f801 	bl	8009b0c <memcpy>
      offset += length_msg;
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4413      	add	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b12:	68fb      	ldr	r3, [r7, #12]
    }
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	441a      	add	r2, r3
 8002b42:	f107 030c 	add.w	r3, r7, #12
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 ffdd 	bl	8003b08 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	3304      	adds	r3, #4
 8002b52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d20c      	bcs.n	8002b7e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	441a      	add	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	440b      	add	r3, r1
 8002b72:	7812      	ldrb	r2, [r2, #0]
 8002b74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e7ec      	b.n	8002b58 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	3b01      	subs	r3, #1
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	441a      	add	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
     return offset;
 8002ba2:	693b      	ldr	r3, [r7, #16]
    }
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	08009ed0 	.word	0x08009ed0

08002bc8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	08009ee4 	.word	0x08009ee4

08002be4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff f99e 	bl	8001f30 <_ZN3ros3MsgC1Ev>
 8002bf4:	4a0c      	ldr	r2, [pc, #48]	; (8002c28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	61da      	str	r2, [r3, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	0800a0a0 	.word	0x0800a0a0

08002c2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	b2ca      	uxtb	r2, r1
 8002c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	0a19      	lsrs	r1, r3, #8
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	3301      	adds	r3, #1
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	4413      	add	r3, r2
 8002c56:	b2ca      	uxtb	r2, r1
 8002c58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	0c19      	lsrs	r1, r3, #16
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	3302      	adds	r3, #2
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	b2ca      	uxtb	r2, r1
 8002c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0e19      	lsrs	r1, r3, #24
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	3303      	adds	r3, #3
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	4413      	add	r3, r2
 8002c7a:	b2ca      	uxtb	r2, r1
 8002c7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	3304      	adds	r3, #4
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002c84:	2300      	movs	r3, #0
 8002c86:	623b      	str	r3, [r7, #32]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d22b      	bcs.n	8002cea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002ca0:	6939      	ldr	r1, [r7, #16]
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b2ca      	uxtb	r2, r1
 8002caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	0a19      	lsrs	r1, r3, #8
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b2ca      	uxtb	r2, r1
 8002cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	0c19      	lsrs	r1, r3, #16
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	b2ca      	uxtb	r2, r1
 8002cca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	0e19      	lsrs	r1, r3, #24
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	3303      	adds	r3, #3
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	b2ca      	uxtb	r2, r1
 8002cda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	3304      	adds	r3, #4
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	e7ce      	b.n	8002c88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6919      	ldr	r1, [r3, #16]
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	b2ca      	uxtb	r2, r1
 8002cf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	0a19      	lsrs	r1, r3, #8
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	3301      	adds	r3, #1
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	b2ca      	uxtb	r2, r1
 8002d08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	0c19      	lsrs	r1, r3, #16
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	3302      	adds	r3, #2
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	4413      	add	r3, r2
 8002d18:	b2ca      	uxtb	r2, r1
 8002d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	0e19      	lsrs	r1, r3, #24
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	3303      	adds	r3, #3
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	4413      	add	r3, r2
 8002d2a:	b2ca      	uxtb	r2, r1
 8002d2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	3304      	adds	r3, #4
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002d34:	2300      	movs	r3, #0
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d22b      	bcs.n	8002d9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002d50:	68f9      	ldr	r1, [r7, #12]
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	b2ca      	uxtb	r2, r1
 8002d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	0a19      	lsrs	r1, r3, #8
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	3301      	adds	r3, #1
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	b2ca      	uxtb	r2, r1
 8002d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	0c19      	lsrs	r1, r3, #16
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	3302      	adds	r3, #2
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	b2ca      	uxtb	r2, r1
 8002d7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	0e19      	lsrs	r1, r3, #24
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	3303      	adds	r3, #3
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	b2ca      	uxtb	r2, r1
 8002d8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	3304      	adds	r3, #4
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	e7ce      	b.n	8002d38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69d9      	ldr	r1, [r3, #28]
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	b2ca      	uxtb	r2, r1
 8002da6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	0a19      	lsrs	r1, r3, #8
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	3301      	adds	r3, #1
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	b2ca      	uxtb	r2, r1
 8002db8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	0c19      	lsrs	r1, r3, #16
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b2ca      	uxtb	r2, r1
 8002dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	0e19      	lsrs	r1, r3, #24
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	3303      	adds	r3, #3
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	4413      	add	r3, r2
 8002dda:	b2ca      	uxtb	r2, r1
 8002ddc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	3304      	adds	r3, #4
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d228      	bcs.n	8002e44 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd f9f6 	bl	80001f0 <strlen>
 8002e04:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	6979      	ldr	r1, [r7, #20]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fe5c 	bl	8003acc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	3304      	adds	r3, #4
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	18d0      	adds	r0, r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f006 fe6c 	bl	8009b0c <memcpy>
      offset += length_stringsi;
 8002e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	4413      	add	r3, r2
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	e7d1      	b.n	8002de8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002e46:	4618      	mov	r0, r3
 8002e48:	3728      	adds	r7, #40	; 0x28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b08e      	sub	sp, #56	; 0x38
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	4413      	add	r3, r2
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e68:	3301      	adds	r3, #1
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	6a3a      	ldr	r2, [r7, #32]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	041b      	lsls	r3, r3, #16
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8c:	3303      	adds	r3, #3
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	4413      	add	r3, r2
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	6a3a      	ldr	r2, [r7, #32]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	6a3a      	ldr	r2, [r7, #32]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d90a      	bls.n	8002ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f006 fe3e 	bl	8009b38 <realloc>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a3a      	ldr	r2, [r7, #32]
 8002ec6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002ec8:	2300      	movs	r3, #0
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d236      	bcs.n	8002f44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ede:	6839      	ldr	r1, [r7, #0]
 8002ee0:	440a      	add	r2, r1
 8002ee2:	7812      	ldrb	r2, [r2, #0]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	3301      	adds	r3, #1
 8002eee:	6839      	ldr	r1, [r7, #0]
 8002ef0:	440b      	add	r3, r1
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	3302      	adds	r3, #2
 8002f00:	6839      	ldr	r1, [r7, #0]
 8002f02:	440b      	add	r3, r1
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	041b      	lsls	r3, r3, #16
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f10:	3303      	adds	r3, #3
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	440b      	add	r3, r1
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f26:	3304      	adds	r3, #4
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	3208      	adds	r2, #8
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	3301      	adds	r3, #1
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30
 8002f42:	e7c3      	b.n	8002ecc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4413      	add	r3, r2
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f50:	3301      	adds	r3, #1
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	4413      	add	r3, r2
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f62:	3302      	adds	r3, #2
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f74:	3303      	adds	r3, #3
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	4413      	add	r3, r2
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f86:	3304      	adds	r3, #4
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d90a      	bls.n	8002faa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699a      	ldr	r2, [r3, #24]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	f006 fdca 	bl	8009b38 <realloc>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d236      	bcs.n	800302c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fc6:	6839      	ldr	r1, [r7, #0]
 8002fc8:	440a      	add	r2, r1
 8002fca:	7812      	ldrb	r2, [r2, #0]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	6839      	ldr	r1, [r7, #0]
 8002fd8:	440b      	add	r3, r1
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	6839      	ldr	r1, [r7, #0]
 8002fea:	440b      	add	r3, r1
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	041b      	lsls	r3, r3, #16
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff8:	3303      	adds	r3, #3
 8002ffa:	6839      	ldr	r1, [r7, #0]
 8002ffc:	440b      	add	r3, r1
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	3304      	adds	r3, #4
 8003010:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	3214      	adds	r2, #20
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	3301      	adds	r3, #1
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302a:	e7c3      	b.n	8002fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800302c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	4413      	add	r3, r2
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003038:	3301      	adds	r3, #1
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	4413      	add	r3, r2
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304a:	3302      	adds	r3, #2
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	4413      	add	r3, r2
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	041b      	lsls	r3, r3, #16
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305c:	3303      	adds	r3, #3
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	4413      	add	r3, r2
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	3304      	adds	r3, #4
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	429a      	cmp	r2, r3
 800307a:	d90a      	bls.n	8003092 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f006 fd56 	bl	8009b38 <realloc>
 800308c:	4602      	mov	r2, r0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003098:	2300      	movs	r3, #0
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d23f      	bcs.n	8003126 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80030a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	441a      	add	r2, r3
 80030ac:	f107 030c 	add.w	r3, r7, #12
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fd28 	bl	8003b08 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80030b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ba:	3304      	adds	r3, #4
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80030be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
 80030c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d20c      	bcs.n	80030e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	441a      	add	r2, r3
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	3b01      	subs	r3, #1
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	440b      	add	r3, r1
 80030dc:	7812      	ldrb	r2, [r2, #0]
 80030de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	3301      	adds	r3, #1
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
 80030e6:	e7ec      	b.n	80030c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80030e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	3b01      	subs	r3, #1
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80030f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fa:	3b01      	subs	r3, #1
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	441a      	add	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4413      	add	r3, r2
 800310a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	3220      	adds	r2, #32
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	3301      	adds	r3, #1
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
 8003124:	e7ba      	b.n	800309c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8003126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003128:	4618      	mov	r0, r3
 800312a:	3738      	adds	r7, #56	; 0x38
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	08009ff4 	.word	0x08009ff4

0800314c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	08009f08 	.word	0x08009f08

08003168 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fedc 	bl	8001f30 <_ZN3ros3MsgC1Ev>
 8003178:	4a0b      	ldr	r2, [pc, #44]	; (80031a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	809a      	strh	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a07      	ldr	r2, [pc, #28]	; (80031ac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a06      	ldr	r2, [pc, #24]	; (80031ac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003194:	611a      	str	r2, [r3, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	615a      	str	r2, [r3, #20]
    {
    }
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	0800a088 	.word	0x0800a088
 80031ac:	08009ecc 	.word	0x08009ecc

080031b0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8899      	ldrh	r1, [r3, #4]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	b2ca      	uxtb	r2, r1
 80031ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	889b      	ldrh	r3, [r3, #4]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	b299      	uxth	r1, r3
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	3301      	adds	r3, #1
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	4413      	add	r3, r2
 80031dc:	b2ca      	uxtb	r2, r1
 80031de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	3302      	adds	r3, #2
 80031e4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd f800 	bl	80001f0 <strlen>
 80031f0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	4413      	add	r3, r2
 80031f8:	69b9      	ldr	r1, [r7, #24]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fc66 	bl	8003acc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	3304      	adds	r3, #4
 8003204:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	18d0      	adds	r0, r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4619      	mov	r1, r3
 8003214:	f006 fc7a 	bl	8009b0c <memcpy>
      offset += length_topic_name;
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	4413      	add	r3, r2
 800321e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fc ffe3 	bl	80001f0 <strlen>
 800322a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	4413      	add	r3, r2
 8003232:	6979      	ldr	r1, [r7, #20]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fc49 	bl	8003acc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3304      	adds	r3, #4
 800323e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	18d0      	adds	r0, r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4619      	mov	r1, r3
 800324e:	f006 fc5d 	bl	8009b0c <memcpy>
      offset += length_message_type;
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	4413      	add	r3, r2
 8003258:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fc ffc6 	bl	80001f0 <strlen>
 8003264:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	4413      	add	r3, r2
 800326c:	6939      	ldr	r1, [r7, #16]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fc2c 	bl	8003acc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	3304      	adds	r3, #4
 8003278:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	18d0      	adds	r0, r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4619      	mov	r1, r3
 8003288:	f006 fc40 	bl	8009b0c <memcpy>
      offset += length_md5sum;
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800329a:	68f9      	ldr	r1, [r7, #12]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4413      	add	r3, r2
 80032a2:	b2ca      	uxtb	r2, r1
 80032a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	0a19      	lsrs	r1, r3, #8
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3301      	adds	r3, #1
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	4413      	add	r3, r2
 80032b2:	b2ca      	uxtb	r2, r1
 80032b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	0c19      	lsrs	r1, r3, #16
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3302      	adds	r3, #2
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	4413      	add	r3, r2
 80032c2:	b2ca      	uxtb	r2, r1
 80032c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	0e19      	lsrs	r1, r3, #24
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3303      	adds	r3, #3
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	4413      	add	r3, r2
 80032d2:	b2ca      	uxtb	r2, r1
 80032d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3304      	adds	r3, #4
 80032da:	61fb      	str	r3, [r7, #28]
      return offset;
 80032dc:	69fb      	ldr	r3, [r7, #28]
    }
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b08a      	sub	sp, #40	; 0x28
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	4413      	add	r3, r2
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	889b      	ldrh	r3, [r3, #4]
 8003306:	b21a      	sxth	r2, r3
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	3301      	adds	r3, #1
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	440b      	add	r3, r1
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	b21b      	sxth	r3, r3
 8003316:	4313      	orrs	r3, r2
 8003318:	b21b      	sxth	r3, r3
 800331a:	b29a      	uxth	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	3302      	adds	r3, #2
 8003324:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	441a      	add	r2, r3
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fbe8 	bl	8003b08 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	3304      	adds	r3, #4
 800333c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4413      	add	r3, r2
 8003348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334a:	429a      	cmp	r2, r3
 800334c:	d20c      	bcs.n	8003368 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	441a      	add	r2, r3
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	3b01      	subs	r3, #1
 8003358:	6839      	ldr	r1, [r7, #0]
 800335a:	440b      	add	r3, r1
 800335c:	7812      	ldrb	r2, [r2, #0]
 800335e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	3301      	adds	r3, #1
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
 8003366:	e7ec      	b.n	8003342 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4413      	add	r3, r2
 800336e:	3b01      	subs	r3, #1
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	4413      	add	r3, r2
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	3b01      	subs	r3, #1
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	441a      	add	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	4413      	add	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	441a      	add	r2, r3
 8003392:	f107 0310 	add.w	r3, r7, #16
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fbb5 	bl	8003b08 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	3304      	adds	r3, #4
 80033a2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	623b      	str	r3, [r7, #32]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4413      	add	r3, r2
 80033ae:	6a3a      	ldr	r2, [r7, #32]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d20c      	bcs.n	80033ce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	441a      	add	r2, r3
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	3b01      	subs	r3, #1
 80033be:	6839      	ldr	r1, [r7, #0]
 80033c0:	440b      	add	r3, r1
 80033c2:	7812      	ldrb	r2, [r2, #0]
 80033c4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	3301      	adds	r3, #1
 80033ca:	623b      	str	r3, [r7, #32]
 80033cc:	e7ec      	b.n	80033a8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4413      	add	r3, r2
 80033d4:	3b01      	subs	r3, #1
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	441a      	add	r2, r3
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fb82 	bl	8003b08 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	3304      	adds	r3, #4
 8003408:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	429a      	cmp	r2, r3
 8003418:	d20c      	bcs.n	8003434 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	441a      	add	r2, r3
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	3b01      	subs	r3, #1
 8003424:	6839      	ldr	r1, [r7, #0]
 8003426:	440b      	add	r3, r1
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	3301      	adds	r3, #1
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	e7ec      	b.n	800340e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	3b01      	subs	r3, #1
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	4413      	add	r3, r2
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	3b01      	subs	r3, #1
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	441a      	add	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	6839      	ldr	r1, [r7, #0]
 8003462:	440a      	add	r2, r1
 8003464:	7812      	ldrb	r2, [r2, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	3301      	adds	r3, #1
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	440b      	add	r3, r1
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	4313      	orrs	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	3302      	adds	r3, #2
 8003482:	6839      	ldr	r1, [r7, #0]
 8003484:	440b      	add	r3, r1
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	4313      	orrs	r3, r2
 800348c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	3303      	adds	r3, #3
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	440b      	add	r3, r1
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	061b      	lsls	r3, r3, #24
 800349c:	4313      	orrs	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	3304      	adds	r3, #4
 80034aa:	61bb      	str	r3, [r7, #24]
     return offset;
 80034ac:	69bb      	ldr	r3, [r7, #24]
    }
 80034ae:	4618      	mov	r0, r3
 80034b0:	3728      	adds	r7, #40	; 0x28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	08009f2c 	.word	0x08009f2c

080034d4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	08009f48 	.word	0x08009f48

080034f0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
      data()
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fd06 	bl	8001f30 <_ZN3ros3MsgC1Ev>
 8003524:	4a06      	ldr	r2, [pc, #24]	; (8003540 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ffde 	bl	80034f0 <_ZN3ros4TimeC1Ev>
    {
    }
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	0800a070 	.word	0x0800a070

08003544 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6859      	ldr	r1, [r3, #4]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	4413      	add	r3, r2
 800355c:	b2ca      	uxtb	r2, r1
 800355e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	0a19      	lsrs	r1, r3, #8
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	3301      	adds	r3, #1
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	4413      	add	r3, r2
 800356e:	b2ca      	uxtb	r2, r1
 8003570:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	0c19      	lsrs	r1, r3, #16
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	3302      	adds	r3, #2
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	4413      	add	r3, r2
 8003580:	b2ca      	uxtb	r2, r1
 8003582:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	0e19      	lsrs	r1, r3, #24
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3303      	adds	r3, #3
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4413      	add	r3, r2
 8003592:	b2ca      	uxtb	r2, r1
 8003594:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3304      	adds	r3, #4
 800359a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6899      	ldr	r1, [r3, #8]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	4413      	add	r3, r2
 80035a6:	b2ca      	uxtb	r2, r1
 80035a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0a19      	lsrs	r1, r3, #8
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	b2ca      	uxtb	r2, r1
 80035ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	0c19      	lsrs	r1, r3, #16
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3302      	adds	r3, #2
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	4413      	add	r3, r2
 80035ca:	b2ca      	uxtb	r2, r1
 80035cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0e19      	lsrs	r1, r3, #24
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3303      	adds	r3, #3
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	b2ca      	uxtb	r2, r1
 80035de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3304      	adds	r3, #4
 80035e4:	60fb      	str	r3, [r7, #12]
      return offset;
 80035e6:	68fb      	ldr	r3, [r7, #12]
    }
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	4413      	add	r3, r2
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3301      	adds	r3, #1
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	440b      	add	r3, r1
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	3302      	adds	r3, #2
 800362e:	6839      	ldr	r1, [r7, #0]
 8003630:	440b      	add	r3, r1
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	041b      	lsls	r3, r3, #16
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3303      	adds	r3, #3
 8003644:	6839      	ldr	r1, [r7, #0]
 8003646:	440b      	add	r3, r1
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	061b      	lsls	r3, r3, #24
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3304      	adds	r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	4413      	add	r3, r2
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3301      	adds	r3, #1
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	440b      	add	r3, r1
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3302      	adds	r3, #2
 8003684:	6839      	ldr	r1, [r7, #0]
 8003686:	440b      	add	r3, r1
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	041b      	lsls	r3, r3, #16
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3303      	adds	r3, #3
 800369a:	6839      	ldr	r1, [r7, #0]
 800369c:	440b      	add	r3, r1
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3304      	adds	r3, #4
 80036ac:	60fb      	str	r3, [r7, #12]
     return offset;
 80036ae:	68fb      	ldr	r3, [r7, #12]
    }
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	08009f6c 	.word	0x08009f6c

080036d8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	08009f7c 	.word	0x08009f7c

080036f4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	611a      	str	r2, [r3, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68d8      	ldr	r0, [r3, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6891      	ldr	r1, [r2, #8]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	4798      	blx	r3
 8003740:	4603      	mov	r3, r0
  };
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
  }
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <_ZN13STM32HardwareC1Ev+0x34>)
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	20001d54 	.word	0x20001d54

080037c0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f804 	bl	80037d6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3304      	adds	r3, #4
 80037e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ea:	4619      	mov	r1, r3
 80037ec:	f004 fe30 	bl	8008450 <HAL_UART_Receive_DMA>
    }
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
      int c = -1;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ffa8 	bl	8003762 <_ZN13STM32Hardware10getRdmaIndEv>
 8003812:	4603      	mov	r3, r0
 8003814:	429c      	cmp	r4, r3
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2300      	moveq	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d012      	beq.n	8003848 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003828:	1c59      	adds	r1, r3, #1
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	791b      	ldrb	r3, [r3, #4]
 8003836:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800383e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8003848:	68fb      	ldr	r3, [r7, #12]
    }
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	bd90      	pop	{r4, r7, pc}
	...

08003854 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b20      	cmp	r3, #32
 8003868:	d108      	bne.n	800387c <_ZN13STM32Hardware5flushEv+0x28>
 800386a:	4b28      	ldr	r3, [pc, #160]	; (800390c <_ZN13STM32Hardware5flushEv+0xb8>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	f083 0301 	eor.w	r3, r3, #1
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <_ZN13STM32Hardware5flushEv+0x28>
 8003878:	2301      	movs	r3, #1
 800387a:	e000      	b.n	800387e <_ZN13STM32Hardware5flushEv+0x2a>
 800387c:	2300      	movs	r3, #0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d03f      	beq.n	8003902 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8003882:	4b22      	ldr	r3, [pc, #136]	; (800390c <_ZN13STM32Hardware5flushEv+0xb8>)
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003894:	429a      	cmp	r2, r3
 8003896:	d031      	beq.n	80038fc <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d20a      	bcs.n	80038be <_ZN13STM32Hardware5flushEv+0x6a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	e006      	b.n	80038cc <_ZN13STM32Hardware5flushEv+0x78>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80038d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4413      	add	r3, r2
 80038e0:	89fa      	ldrh	r2, [r7, #14]
 80038e2:	4619      	mov	r1, r3
 80038e4:	f004 fd36 	bl	8008354 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80038ee:	89fb      	ldrh	r3, [r7, #14]
 80038f0:	4413      	add	r3, r2
 80038f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <_ZN13STM32Hardware5flushEv+0xb8>)
 80038fe:	2200      	movs	r2, #0
 8003900:	701a      	strb	r2, [r3, #0]
      }
    }
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20001110 	.word	0x20001110

08003910 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
      int n = length;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003926:	bfa8      	it	ge
 8003928:	f44f 7300 	movge.w	r3, #512	; 0x200
 800392c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003934:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	4293      	cmp	r3, r2
 800393c:	bf28      	it	cs
 800393e:	4613      	movcs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003948:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4413      	add	r3, r2
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	4618      	mov	r0, r3
 8003956:	f006 f8d9 	bl	8009b0c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	4413      	add	r3, r2
 8003964:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	429a      	cmp	r2, r3
 8003974:	d00b      	beq.n	800398e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	18d1      	adds	r1, r2, r3
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	461a      	mov	r2, r3
 800398a:	f006 f8bf 	bl	8009b0c <memcpy>
      }

      flush();
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7ff ff60 	bl	8003854 <_ZN13STM32Hardware5flushEv>
    }
 8003994:	bf00      	nop
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	f001 ff24 	bl	80057f0 <HAL_GetTick>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include <rosserial.h>
#include <Rosserial_STM32_Inc/geometry_msgs/Twist.h>
#include <Rosserial_STM32_Inc/ros.h>

void vel_callback(const geometry_msgs::Twist &msg)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	received_vel.vx = msg.linear.x;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80039c2:	490a      	ldr	r1, [pc, #40]	; (80039ec <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 80039c4:	e9c1 2300 	strd	r2, r3, [r1]
	received_vel.vy = msg.linear.y;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80039ce:	4907      	ldr	r1, [pc, #28]	; (80039ec <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 80039d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	received_vel.w 	= msg.angular.z;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80039da:	4904      	ldr	r1, [pc, #16]	; (80039ec <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 80039dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	20001070 	.word	0x20001070

080039f0 <HAL_UART_TxCpltCallback>:
ros::NodeHandle nh;
ros::Publisher pub("base_speed", &real_speed);
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 80039f8:	4805      	ldr	r0, [pc, #20]	; (8003a10 <HAL_UART_TxCpltCallback+0x20>)
 80039fa:	f000 f96f 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff27 	bl	8003854 <_ZN13STM32Hardware5flushEv>
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20001160 	.word	0x20001160

08003a14 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003a1c:	4805      	ldr	r0, [pc, #20]	; (8003a34 <HAL_UART_RxCpltCallback+0x20>)
 8003a1e:	f000 f95d 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fed6 	bl	80037d6 <_ZN13STM32Hardware10reset_rbufEv>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20001160 	.word	0x20001160

08003a38 <rosserial_setup>:

void rosserial_setup(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
    nh.initNode();
 8003a3c:	4807      	ldr	r0, [pc, #28]	; (8003a5c <rosserial_setup+0x24>)
 8003a3e:	f000 f959 	bl	8003cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.advertise(pub);
 8003a42:	4907      	ldr	r1, [pc, #28]	; (8003a60 <rosserial_setup+0x28>)
 8003a44:	4805      	ldr	r0, [pc, #20]	; (8003a5c <rosserial_setup+0x24>)
 8003a46:	f000 f972 	bl	8003d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.subscribe(vel_sub);
 8003a4a:	4906      	ldr	r1, [pc, #24]	; (8003a64 <rosserial_setup+0x2c>)
 8003a4c:	4803      	ldr	r0, [pc, #12]	; (8003a5c <rosserial_setup+0x24>)
 8003a4e:	f000 f99e 	bl	8003d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    HAL_TIM_Base_Start_IT (&htim6);
 8003a52:	4805      	ldr	r0, [pc, #20]	; (8003a68 <rosserial_setup+0x30>)
 8003a54:	f003 fb10 	bl	8007078 <HAL_TIM_Base_Start_IT>
}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20001160 	.word	0x20001160
 8003a60:	20001a9c 	.word	0x20001a9c
 8003a64:	20001ab0 	.word	0x20001ab0
 8003a68:	20001c34 	.word	0x20001c34

08003a6c <odom_store>:

void odom_store(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
	real_speed.linear.x  = odom_vel.vx;
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <odom_store+0x34>)
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	490b      	ldr	r1, [pc, #44]	; (8003aa4 <odom_store+0x38>)
 8003a78:	e9c1 2304 	strd	r2, r3, [r1, #16]
	real_speed.linear.y  = odom_vel.vy;
 8003a7c:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <odom_store+0x34>)
 8003a7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a82:	4908      	ldr	r1, [pc, #32]	; (8003aa4 <odom_store+0x38>)
 8003a84:	e9c1 2306 	strd	r2, r3, [r1, #24]
	real_speed.angular.z = odom_vel.w;
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <odom_store+0x34>)
 8003a8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a8e:	4905      	ldr	r1, [pc, #20]	; (8003aa4 <odom_store+0x38>)
 8003a90:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20001088 	.word	0x20001088
 8003aa4:	20001118 	.word	0x20001118

08003aa8 <odom_pub>:

void odom_pub(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
	pub.publish(&real_speed);
 8003aac:	4904      	ldr	r1, [pc, #16]	; (8003ac0 <odom_pub+0x18>)
 8003aae:	4805      	ldr	r0, [pc, #20]	; (8003ac4 <odom_pub+0x1c>)
 8003ab0:	f7ff fe37 	bl	8003722 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 8003ab4:	4804      	ldr	r0, [pc, #16]	; (8003ac8 <odom_pub+0x20>)
 8003ab6:	f000 f995 	bl	8003de4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20001118 	.word	0x20001118
 8003ac4:	20001a9c 	.word	0x20001a9c
 8003ac8:	20001160 	.word	0x20001160

08003acc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d80d      	bhi.n	8003afc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	fa22 f103 	lsr.w	r1, r2, r3
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	b2ca      	uxtb	r2, r1
 8003af2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3301      	adds	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	e7ee      	b.n	8003ada <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d811      	bhi.n	8003b46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6839      	ldr	r1, [r7, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	440a      	add	r2, r1
 8003b2c:	7812      	ldrb	r2, [r2, #0]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	00d2      	lsls	r2, r2, #3
 8003b34:	fa01 f202 	lsl.w	r2, r1, r2
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	e7ea      	b.n	8003b1c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
	...

08003b54 <_ZN3ros15NodeHandleBase_C1Ev>:


namespace ros
{

class NodeHandleBase_
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	0800a05c 	.word	0x0800a05c

08003b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff ffe8 	bl	8003b54 <_ZN3ros15NodeHandleBase_C1Ev>
 8003b84:	4a3a      	ldr	r2, [pc, #232]	; (8003c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fdfa 	bl	8003788 <_ZN13STM32HardwareC1Ev>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff f81e 	bl	8002be4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b18      	cmp	r3, #24
 8003bb0:	d80b      	bhi.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e7f0      	b.n	8003bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b18      	cmp	r3, #24
 8003bd2:	d80a      	bhi.n	8003bea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003bdc:	2100      	movs	r1, #0
 8003bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	3301      	adds	r3, #1
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	e7f1      	b.n	8003bce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf4:	d20a      	bcs.n	8003c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3301      	adds	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e7f0      	b.n	8003bee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c16:	d20a      	bcs.n	8003c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	e7f0      	b.n	8003c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	0800a030 	.word	0x0800a030

08003c74 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	0800a044 	.word	0x0800a044

08003c94 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ffe5 	bl	8003c74 <_ZN3ros11Subscriber_C1Ev>
 8003caa:	4a0b      	ldr	r2, [pc, #44]	; (8003cd8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3310      	adds	r3, #16
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe fe61 	bl	800297c <_ZN13geometry_msgs5TwistC1Ev>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	659a      	str	r2, [r3, #88]	; 0x58
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
  };
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	0800a018 	.word	0x0800a018

08003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
  }
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fd5d 	bl	80037c0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b18      	cmp	r3, #24
 8003d40:	dc1e      	bgt.n	8003d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d111      	bne.n	8003d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	60da      	str	r2, [r3, #12]
        return true;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e004      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e7dd      	b.n	8003d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8003d80:	2300      	movs	r3, #0
  }
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b18      	cmp	r3, #24
 8003da0:	dc19      	bgt.n	8003dd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10d      	bne.n	8003dce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003db2:	6839      	ldr	r1, [r7, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
        return true;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e004      	b.n	8003dd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e7e2      	b.n	8003d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003dd6:	2300      	movs	r3, #0
  }
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fdd3 	bl	800399c <_ZN13STM32Hardware4timeEv>
 8003df6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d903      	bls.n	8003e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d009      	beq.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d903      	bls.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d014      	beq.n	8003e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fdac 	bl	800399c <_ZN13STM32Hardware4timeEv>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad2      	subs	r2, r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003e50:	429a      	cmp	r2, r3
 8003e52:	bf8c      	ite	hi
 8003e54:	2301      	movhi	r3, #1
 8003e56:	2300      	movls	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003e5e:	f06f 0301 	mvn.w	r3, #1
 8003e62:	e194      	b.n	800418e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fcc5 	bl	80037f8 <_ZN13STM32Hardware4readEv>
 8003e6e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f2c0 8174 	blt.w	8004160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	441a      	add	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e8e:	2b07      	cmp	r3, #7
 8003e90:	d11e      	bne.n	8003ed0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003e98:	1c59      	adds	r1, r3, #1
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	b2d1      	uxtb	r1, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	460a      	mov	r2, r1
 8003eaa:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003eb4:	1e5a      	subs	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1b4      	bne.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2208      	movs	r2, #8
 8003eca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003ece:	e7af      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d128      	bne.n	8003f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2bff      	cmp	r3, #255	; 0xff
 8003ede:	d10d      	bne.n	8003efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f103 0214 	add.w	r2, r3, #20
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003efa:	e799      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fd4b 	bl	800399c <_ZN13STM32Hardware4timeEv>
 8003f06:	4602      	mov	r2, r0
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f10:	4293      	cmp	r3, r2
 8003f12:	bf8c      	ite	hi
 8003f14:	2301      	movhi	r3, #1
 8003f16:	2300      	movls	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d088      	beq.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003f26:	f06f 0301 	mvn.w	r3, #1
 8003f2a:	e130      	b.n	800418e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d118      	bne.n	8003f68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2bfe      	cmp	r3, #254	; 0xfe
 8003f3a:	d107      	bne.n	8003f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003f4a:	e771      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f47f af68 	bne.w	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f918 	bl	8004196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003f66:	e763      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d113      	bne.n	8003f9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003f98:	e74a      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d110      	bne.n	8003fc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	441a      	add	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003fc4:	e734      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d116      	bne.n	8003ffe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003fd6:	425a      	negs	r2, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	bf58      	it	pl
 8003fde:	4253      	negpl	r3, r2
 8003fe0:	2bff      	cmp	r3, #255	; 0xff
 8003fe2:	d107      	bne.n	8003ff4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003ff2:	e71d      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003ffc:	e718      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004004:	2b05      	cmp	r3, #5
 8004006:	d10f      	bne.n	8004028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004026:	e703      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800402e:	2b06      	cmp	r3, #6
 8004030:	d117      	bne.n	8004062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	441a      	add	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2207      	movs	r2, #7
 8004048:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004052:	2b00      	cmp	r3, #0
 8004054:	f47f aeec 	bne.w	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2208      	movs	r2, #8
 800405c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004060:	e6e6      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004068:	2b08      	cmp	r3, #8
 800406a:	f47f aee1 	bne.w	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800407c:	425a      	negs	r2, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	bf58      	it	pl
 8004084:	4253      	negpl	r3, r2
 8004086:	2bff      	cmp	r3, #255	; 0xff
 8004088:	f47f aed2 	bne.w	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d110      	bne.n	80040b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f87d 	bl	8004196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f898 	bl	80041d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	e06a      	b.n	800418e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80040be:	2b0a      	cmp	r3, #10
 80040c0:	d107      	bne.n	80040d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80040c8:	4619      	mov	r1, r3
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f960 	bl	8004390 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80040d0:	e6ae      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80040d8:	2b06      	cmp	r3, #6
 80040da:	d10e      	bne.n	80040fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f7fe feaf 	bl	8002e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80040f8:	e69a      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004100:	2b0b      	cmp	r3, #11
 8004102:	d104      	bne.n	800410e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800410c:	e690      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004114:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800411e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f43f ae84 	beq.w	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800412e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004138:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004142:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f202 2222 	addw	r2, r2, #546	; 0x222
 800414c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800415a:	4611      	mov	r1, r2
 800415c:	4798      	blx	r3
    while (true)
 800415e:	e667      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004160:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00f      	beq.n	800418c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800417a:	4293      	cmp	r3, r2
 800417c:	d906      	bls.n	800418c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f809 	bl	8004196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800418c:	2300      	movs	r3, #0
  }
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800419e:	f107 030c 	add.w	r3, r7, #12
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff f9b6 	bl	8003514 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f107 020c 	add.w	r2, r7, #12
 80041b2:	210a      	movs	r1, #10
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4798      	blx	r3
    rt_time = hardware_.time();
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fbed 	bl	800399c <_ZN13STM32Hardware4timeEv>
 80041c2:	4602      	mov	r2, r0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80041ca:	bf00      	nop
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80041d2:	b590      	push	{r4, r7, lr}
 80041d4:	b08b      	sub	sp, #44	; 0x2c
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80041da:	f107 030c 	add.w	r3, r7, #12
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe ffc2 	bl	8003168 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80041e4:	2300      	movs	r3, #0
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	2b18      	cmp	r3, #24
 80041ec:	dc63      	bgt.n	80042b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d056      	beq.n	80042ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	b29b      	uxth	r3, r3
 8004212:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	6859      	ldr	r1, [r3, #4]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3308      	adds	r3, #8
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4608      	mov	r0, r1
 800424e:	4798      	blx	r3
 8004250:	4603      	mov	r3, r0
 8004252:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4608      	mov	r0, r1
 800427c:	4798      	blx	r3
 800427e:	4603      	mov	r3, r0
 8004280:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004286:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681c      	ldr	r4, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fa54 	bl	800374a <_ZN3ros9Publisher15getEndpointTypeEv>
 80042a2:	4601      	mov	r1, r0
 80042a4:	f107 030c 	add.w	r3, r7, #12
 80042a8:	461a      	mov	r2, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	3301      	adds	r3, #1
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
 80042b4:	e798      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	2b18      	cmp	r3, #24
 80042be:	dc5f      	bgt.n	8004380 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80042c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d053      	beq.n	8004378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80042d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80042ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80042fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004302:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3308      	adds	r3, #8
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4608      	mov	r0, r1
 8004312:	4798      	blx	r3
 8004314:	4603      	mov	r3, r0
 8004316:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004328:	f202 2222 	addw	r2, r2, #546	; 0x222
 800432c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4608      	mov	r0, r1
 8004338:	4798      	blx	r3
 800433a:	4603      	mov	r3, r0
 800433c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800433e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004342:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681c      	ldr	r4, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004352:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800435e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3304      	adds	r3, #4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4608      	mov	r0, r1
 800436a:	4798      	blx	r3
 800436c:	4601      	mov	r1, r0
 800436e:	f107 030c 	add.w	r3, r7, #12
 8004372:	461a      	mov	r2, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	3301      	adds	r3, #1
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
 800437e:	e79c      	b.n	80042ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004388:	bf00      	nop
 800438a:	372c      	adds	r7, #44	; 0x2c
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}

08004390 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800439a:	f107 0308 	add.w	r3, r7, #8
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff f8b8 	bl	8003514 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff faf7 	bl	800399c <_ZN13STM32Hardware4timeEv>
 80043ae:	4602      	mov	r2, r0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80043ba:	f107 0308 	add.w	r3, r7, #8
 80043be:	6839      	ldr	r1, [r7, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff f917 	bl	80035f4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	4915      	ldr	r1, [pc, #84]	; (8004420 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80043cc:	fba1 1303 	umull	r1, r3, r1, r3
 80043d0:	099b      	lsrs	r3, r3, #6
 80043d2:	4413      	add	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80043d6:	6939      	ldr	r1, [r7, #16]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4b11      	ldr	r3, [pc, #68]	; (8004420 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80043dc:	fba3 0302 	umull	r0, r3, r3, r2
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043e6:	fb00 f303 	mul.w	r3, r0, r3
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	440b      	add	r3, r1
 80043f4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80043f6:	f107 0308 	add.w	r3, r7, #8
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f8a6 	bl	8004550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fac7 	bl	800399c <_ZN13STM32Hardware4timeEv>
 800440e:	4602      	mov	r2, r0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004416:	bf00      	nop
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	10624dd3 	.word	0x10624dd3
 8004424:	000f4240 	.word	0x000f4240

08004428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b63      	cmp	r3, #99	; 0x63
 8004438:	dd09      	ble.n	800444e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004440:	f083 0301 	eor.w	r3, r3, #1
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800444a:	2300      	movs	r3, #0
 800444c:	e079      	b.n	8004542 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800445a:	3207      	adds	r2, #7
 800445c:	4611      	mov	r1, r2
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4798      	blx	r3
 8004462:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	22ff      	movs	r2, #255	; 0xff
 8004468:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	22fe      	movs	r2, #254	; 0xfe
 8004470:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	b2da      	uxtb	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	b29b      	uxth	r3, r3
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	b29b      	uxth	r3, r3
 8004486:	b2da      	uxtb	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800449a:	4413      	add	r3, r2
 800449c:	b2db      	uxtb	r3, r3
 800449e:	43db      	mvns	r3, r3
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	b21b      	sxth	r3, r3
 80044b6:	121b      	asrs	r3, r3, #8
 80044b8:	b21b      	sxth	r3, r3
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80044c6:	2305      	movs	r3, #5
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	3306      	adds	r3, #6
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	dc0d      	bgt.n	80044f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	4413      	add	r3, r2
 80044da:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	3301      	adds	r3, #1
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	e7ec      	b.n	80044ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	3307      	adds	r3, #7
 80044f4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	425a      	negs	r2, r3
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	bf58      	it	pl
 8004500:	4253      	negpl	r3, r2
 8004502:	b2da      	uxtb	r2, r3
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	1c59      	adds	r1, r3, #1
 8004508:	6179      	str	r1, [r7, #20]
 800450a:	43d2      	mvns	r2, r2
 800450c:	b2d1      	uxtb	r1, r2
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	460a      	mov	r2, r1
 8004514:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800451e:	dc0a      	bgt.n	8004536 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1d18      	adds	r0, r3, #4
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4619      	mov	r1, r3
 800452e:	f7ff f9ef 	bl	8003910 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	e005      	b.n	8004542 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004536:	4905      	ldr	r1, [pc, #20]	; (800454c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f849 	bl	80045d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800453e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	08009fa0 	.word	0x08009fa0

08004550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fa1c 	bl	800399c <_ZN13STM32Hardware4timeEv>
 8004564:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4915      	ldr	r1, [pc, #84]	; (80045c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800456e:	fba1 1303 	umull	r1, r3, r1, r3
 8004572:	099b      	lsrs	r3, r3, #6
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	1e5a      	subs	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	6859      	ldr	r1, [r3, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004586:	fba3 0302 	umull	r0, r3, r3, r2
 800458a:	099b      	lsrs	r3, r3, #6
 800458c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004590:	fb00 f303 	mul.w	r3, r0, r3
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	4a0c      	ldr	r2, [pc, #48]	; (80045c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8004598:	fb02 f303 	mul.w	r3, r2, r3
 800459c:	1aca      	subs	r2, r1, r3
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80045a0:	4413      	add	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7fc fc22 	bl	8000e00 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80045bc:	bf00      	nop
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	10624dd3 	.word	0x10624dd3
 80045c8:	000f4240 	.word	0x000f4240
 80045cc:	3b9aca00 	.word	0x3b9aca00

080045d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	2103      	movs	r1, #3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f804 	bl	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	460b      	mov	r3, r1
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80045fa:	f107 0314 	add.w	r3, r7, #20
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fa40 	bl	8002a84 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004604:	7afb      	ldrb	r3, [r7, #11]
 8004606:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f107 0214 	add.w	r2, r7, #20
 8004616:	2107      	movs	r1, #7
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	4798      	blx	r3
  }
 800461c:	bf00      	nop
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <_Z41__static_initialization_and_destruction_0ii>:
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d116      	bne.n	8004662 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800463a:	4293      	cmp	r3, r2
 800463c:	d111      	bne.n	8004662 <_Z41__static_initialization_and_destruction_0ii+0x3e>
geometry_msgs::Twist real_speed;
 800463e:	480b      	ldr	r0, [pc, #44]	; (800466c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004640:	f7fe f99c 	bl	800297c <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004644:	480a      	ldr	r0, [pc, #40]	; (8004670 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004646:	f7ff fa95 	bl	8003b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Publisher pub("base_speed", &real_speed);
 800464a:	2300      	movs	r3, #0
 800464c:	4a07      	ldr	r2, [pc, #28]	; (800466c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800464e:	4909      	ldr	r1, [pc, #36]	; (8004674 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004650:	4809      	ldr	r0, [pc, #36]	; (8004678 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004652:	f7ff f84f 	bl	80036f4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);
 8004656:	2301      	movs	r3, #1
 8004658:	4a08      	ldr	r2, [pc, #32]	; (800467c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800465a:	4909      	ldr	r1, [pc, #36]	; (8004680 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800465c:	4809      	ldr	r0, [pc, #36]	; (8004684 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800465e:	f7ff fb19 	bl	8003c94 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20001118 	.word	0x20001118
 8004670:	20001160 	.word	0x20001160
 8004674:	08009fdc 	.word	0x08009fdc
 8004678:	20001a9c 	.word	0x20001a9c
 800467c:	080039b5 	.word	0x080039b5
 8004680:	08009fe8 	.word	0x08009fe8
 8004684:	20001ab0 	.word	0x20001ab0

08004688 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3310      	adds	r3, #16
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fe f9b1 	bl	8002a00 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	3210      	adds	r2, #16
 80046a6:	4610      	mov	r0, r2
 80046a8:	4798      	blx	r3
  }
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3310      	adds	r3, #16
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe f9b8 	bl	8002a4c <_ZN13geometry_msgs5Twist7getTypeEv>
 80046dc:	4603      	mov	r3, r0
  }
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3310      	adds	r3, #16
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe f9b8 	bl	8002a68 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80046f8:	4603      	mov	r3, r0
  }
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
    return configured_;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <_GLOBAL__sub_I__Z12vel_callbackRKN13geometry_msgs5TwistE>:
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
 8004720:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004724:	2001      	movs	r0, #1
 8004726:	f7ff ff7d 	bl	8004624 <_Z41__static_initialization_and_destruction_0ii>
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <HAL_MspInit+0x4c>)
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <HAL_MspInit+0x4c>)
 800473c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004740:	6453      	str	r3, [r2, #68]	; 0x44
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <HAL_MspInit+0x4c>)
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800474a:	607b      	str	r3, [r7, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4b09      	ldr	r3, [pc, #36]	; (8004778 <HAL_MspInit+0x4c>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	4a08      	ldr	r2, [pc, #32]	; (8004778 <HAL_MspInit+0x4c>)
 8004758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475c:	6413      	str	r3, [r2, #64]	; 0x40
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_MspInit+0x4c>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800

0800477c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004780:	f002 fc10 	bl	8006fa4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004784:	e7fe      	b.n	8004784 <NMI_Handler+0x8>

08004786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800478a:	e7fe      	b.n	800478a <HardFault_Handler+0x4>

0800478c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004790:	e7fe      	b.n	8004790 <MemManage_Handler+0x4>

08004792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004792:	b480      	push	{r7}
 8004794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004796:	e7fe      	b.n	8004796 <BusFault_Handler+0x4>

08004798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800479c:	e7fe      	b.n	800479c <UsageFault_Handler+0x4>

0800479e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800479e:	b480      	push	{r7}
 80047a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047a2:	bf00      	nop
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047b0:	bf00      	nop
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047ba:	b480      	push	{r7}
 80047bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047be:	bf00      	nop
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047cc:	f000 fffc 	bl	80057c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047d0:	bf00      	nop
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80047d8:	4802      	ldr	r0, [pc, #8]	; (80047e4 <DMA1_Stream1_IRQHandler+0x10>)
 80047da:	f001 fabf 	bl	8005d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80047de:	bf00      	nop
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20001d98 	.word	0x20001d98

080047e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80047ec:	4802      	ldr	r0, [pc, #8]	; (80047f8 <DMA1_Stream3_IRQHandler+0x10>)
 80047ee:	f001 fab5 	bl	8005d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80047f2:	bf00      	nop
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20001df8 	.word	0x20001df8

080047fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004800:	4802      	ldr	r0, [pc, #8]	; (800480c <USART3_IRQHandler+0x10>)
 8004802:	f003 fe55 	bl	80084b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20001d54 	.word	0x20001d54

08004810 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004814:	4802      	ldr	r0, [pc, #8]	; (8004820 <TIM6_DAC_IRQHandler+0x10>)
 8004816:	f002 fef5 	bl	8007604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20001c34 	.word	0x20001c34

08004824 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004828:	4802      	ldr	r0, [pc, #8]	; (8004834 <TIM7_IRQHandler+0x10>)
 800482a:	f002 feeb 	bl	8007604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20001c7c 	.word	0x20001c7c

08004838 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
	return 1;
 800483c:	2301      	movs	r3, #1
}
 800483e:	4618      	mov	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <_kill>:

int _kill(int pid, int sig)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004852:	f005 f931 	bl	8009ab8 <__errno>
 8004856:	4603      	mov	r3, r0
 8004858:	2216      	movs	r2, #22
 800485a:	601a      	str	r2, [r3, #0]
	return -1;
 800485c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <_exit>:

void _exit (int status)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004870:	f04f 31ff 	mov.w	r1, #4294967295
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ffe7 	bl	8004848 <_kill>
	while (1) {}		/* Make sure we hang here */
 800487a:	e7fe      	b.n	800487a <_exit+0x12>

0800487c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004884:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <_sbrk+0x5c>)
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <_sbrk+0x60>)
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004890:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <_sbrk+0x64>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004898:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <_sbrk+0x64>)
 800489a:	4a12      	ldr	r2, [pc, #72]	; (80048e4 <_sbrk+0x68>)
 800489c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800489e:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <_sbrk+0x64>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4413      	add	r3, r2
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d207      	bcs.n	80048bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048ac:	f005 f904 	bl	8009ab8 <__errno>
 80048b0:	4603      	mov	r3, r0
 80048b2:	220c      	movs	r2, #12
 80048b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048b6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ba:	e009      	b.n	80048d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <_sbrk+0x64>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048c2:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <_sbrk+0x64>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4413      	add	r3, r2
 80048ca:	4a05      	ldr	r2, [pc, #20]	; (80048e0 <_sbrk+0x64>)
 80048cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048ce:	68fb      	ldr	r3, [r7, #12]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	20030000 	.word	0x20030000
 80048dc:	00000400 	.word	0x00000400
 80048e0:	20001b10 	.word	0x20001b10
 80048e4:	20001e70 	.word	0x20001e70

080048e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <SystemInit+0x20>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	4a05      	ldr	r2, [pc, #20]	; (8004908 <SystemInit+0x20>)
 80048f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048fc:	bf00      	nop
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	e000ed00 	.word	0xe000ed00

0800490c <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08c      	sub	sp, #48	; 0x30
 8004910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004912:	f107 030c 	add.w	r3, r7, #12
 8004916:	2224      	movs	r2, #36	; 0x24
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f005 f904 	bl	8009b28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004920:	1d3b      	adds	r3, r7, #4
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004928:	4b21      	ldr	r3, [pc, #132]	; (80049b0 <MX_TIM2_Init+0xa4>)
 800492a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800492e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004930:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <MX_TIM2_Init+0xa4>)
 8004932:	2200      	movs	r2, #0
 8004934:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004936:	4b1e      	ldr	r3, [pc, #120]	; (80049b0 <MX_TIM2_Init+0xa4>)
 8004938:	2200      	movs	r2, #0
 800493a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800493c:	4b1c      	ldr	r3, [pc, #112]	; (80049b0 <MX_TIM2_Init+0xa4>)
 800493e:	f04f 32ff 	mov.w	r2, #4294967295
 8004942:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004944:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <MX_TIM2_Init+0xa4>)
 8004946:	2200      	movs	r2, #0
 8004948:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800494a:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <MX_TIM2_Init+0xa4>)
 800494c:	2200      	movs	r2, #0
 800494e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004950:	2303      	movs	r3, #3
 8004952:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004954:	2300      	movs	r3, #0
 8004956:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004958:	2301      	movs	r3, #1
 800495a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800495c:	2300      	movs	r3, #0
 800495e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004964:	2300      	movs	r3, #0
 8004966:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004968:	2301      	movs	r3, #1
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800496c:	2300      	movs	r3, #0
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004974:	f107 030c 	add.w	r3, r7, #12
 8004978:	4619      	mov	r1, r3
 800497a:	480d      	ldr	r0, [pc, #52]	; (80049b0 <MX_TIM2_Init+0xa4>)
 800497c:	f002 fd0e 	bl	800739c <HAL_TIM_Encoder_Init>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004986:	f7fc ff67 	bl	8001858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800498a:	2300      	movs	r3, #0
 800498c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004992:	1d3b      	adds	r3, r7, #4
 8004994:	4619      	mov	r1, r3
 8004996:	4806      	ldr	r0, [pc, #24]	; (80049b0 <MX_TIM2_Init+0xa4>)
 8004998:	f003 fbfe 	bl	8008198 <HAL_TIMEx_MasterConfigSynchronization>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80049a2:	f7fc ff59 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80049a6:	bf00      	nop
 80049a8:	3730      	adds	r7, #48	; 0x30
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20001b14 	.word	0x20001b14

080049b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08c      	sub	sp, #48	; 0x30
 80049b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80049ba:	f107 030c 	add.w	r3, r7, #12
 80049be:	2224      	movs	r2, #36	; 0x24
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f005 f8b0 	bl	8009b28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049c8:	1d3b      	adds	r3, r7, #4
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80049d0:	4b20      	ldr	r3, [pc, #128]	; (8004a54 <MX_TIM3_Init+0xa0>)
 80049d2:	4a21      	ldr	r2, [pc, #132]	; (8004a58 <MX_TIM3_Init+0xa4>)
 80049d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80049d6:	4b1f      	ldr	r3, [pc, #124]	; (8004a54 <MX_TIM3_Init+0xa0>)
 80049d8:	2200      	movs	r2, #0
 80049da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <MX_TIM3_Init+0xa0>)
 80049de:	2200      	movs	r2, #0
 80049e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80049e2:	4b1c      	ldr	r3, [pc, #112]	; (8004a54 <MX_TIM3_Init+0xa0>)
 80049e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <MX_TIM3_Init+0xa0>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049f0:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <MX_TIM3_Init+0xa0>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80049f6:	2303      	movs	r3, #3
 80049f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80049fe:	2301      	movs	r3, #1
 8004a00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004a12:	2300      	movs	r3, #0
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004a1a:	f107 030c 	add.w	r3, r7, #12
 8004a1e:	4619      	mov	r1, r3
 8004a20:	480c      	ldr	r0, [pc, #48]	; (8004a54 <MX_TIM3_Init+0xa0>)
 8004a22:	f002 fcbb 	bl	800739c <HAL_TIM_Encoder_Init>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004a2c:	f7fc ff14 	bl	8001858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a30:	2300      	movs	r3, #0
 8004a32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a38:	1d3b      	adds	r3, r7, #4
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4805      	ldr	r0, [pc, #20]	; (8004a54 <MX_TIM3_Init+0xa0>)
 8004a3e:	f003 fbab 	bl	8008198 <HAL_TIMEx_MasterConfigSynchronization>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004a48:	f7fc ff06 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004a4c:	bf00      	nop
 8004a4e:	3730      	adds	r7, #48	; 0x30
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20001b5c 	.word	0x20001b5c
 8004a58:	40000400 	.word	0x40000400

08004a5c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08c      	sub	sp, #48	; 0x30
 8004a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004a62:	f107 030c 	add.w	r3, r7, #12
 8004a66:	2224      	movs	r2, #36	; 0x24
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f005 f85c 	bl	8009b28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a70:	1d3b      	adds	r3, r7, #4
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004a78:	4b20      	ldr	r3, [pc, #128]	; (8004afc <MX_TIM4_Init+0xa0>)
 8004a7a:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <MX_TIM4_Init+0xa4>)
 8004a7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004a7e:	4b1f      	ldr	r3, [pc, #124]	; (8004afc <MX_TIM4_Init+0xa0>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a84:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <MX_TIM4_Init+0xa0>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004a8a:	4b1c      	ldr	r3, [pc, #112]	; (8004afc <MX_TIM4_Init+0xa0>)
 8004a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a92:	4b1a      	ldr	r3, [pc, #104]	; (8004afc <MX_TIM4_Init+0xa0>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a98:	4b18      	ldr	r3, [pc, #96]	; (8004afc <MX_TIM4_Init+0xa0>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004aba:	2300      	movs	r3, #0
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004ac2:	f107 030c 	add.w	r3, r7, #12
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	480c      	ldr	r0, [pc, #48]	; (8004afc <MX_TIM4_Init+0xa0>)
 8004aca:	f002 fc67 	bl	800739c <HAL_TIM_Encoder_Init>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004ad4:	f7fc fec0 	bl	8001858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004ae0:	1d3b      	adds	r3, r7, #4
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4805      	ldr	r0, [pc, #20]	; (8004afc <MX_TIM4_Init+0xa0>)
 8004ae6:	f003 fb57 	bl	8008198 <HAL_TIMEx_MasterConfigSynchronization>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004af0:	f7fc feb2 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004af4:	bf00      	nop
 8004af6:	3730      	adds	r7, #48	; 0x30
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20001ba4 	.word	0x20001ba4
 8004b00:	40000800 	.word	0x40000800

08004b04 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08c      	sub	sp, #48	; 0x30
 8004b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004b0a:	f107 030c 	add.w	r3, r7, #12
 8004b0e:	2224      	movs	r2, #36	; 0x24
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f005 f808 	bl	8009b28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b18:	1d3b      	adds	r3, r7, #4
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004b20:	4b20      	ldr	r3, [pc, #128]	; (8004ba4 <MX_TIM5_Init+0xa0>)
 8004b22:	4a21      	ldr	r2, [pc, #132]	; (8004ba8 <MX_TIM5_Init+0xa4>)
 8004b24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004b26:	4b1f      	ldr	r3, [pc, #124]	; (8004ba4 <MX_TIM5_Init+0xa0>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <MX_TIM5_Init+0xa0>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004b32:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <MX_TIM5_Init+0xa0>)
 8004b34:	f04f 32ff 	mov.w	r2, #4294967295
 8004b38:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <MX_TIM5_Init+0xa0>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b40:	4b18      	ldr	r3, [pc, #96]	; (8004ba4 <MX_TIM5_Init+0xa0>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004b46:	2303      	movs	r3, #3
 8004b48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b62:	2300      	movs	r3, #0
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004b6a:	f107 030c 	add.w	r3, r7, #12
 8004b6e:	4619      	mov	r1, r3
 8004b70:	480c      	ldr	r0, [pc, #48]	; (8004ba4 <MX_TIM5_Init+0xa0>)
 8004b72:	f002 fc13 	bl	800739c <HAL_TIM_Encoder_Init>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8004b7c:	f7fc fe6c 	bl	8001858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b80:	2300      	movs	r3, #0
 8004b82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004b88:	1d3b      	adds	r3, r7, #4
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4805      	ldr	r0, [pc, #20]	; (8004ba4 <MX_TIM5_Init+0xa0>)
 8004b8e:	f003 fb03 	bl	8008198 <HAL_TIMEx_MasterConfigSynchronization>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8004b98:	f7fc fe5e 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004b9c:	bf00      	nop
 8004b9e:	3730      	adds	r7, #48	; 0x30
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20001bec 	.word	0x20001bec
 8004ba8:	40000c00 	.word	0x40000c00

08004bac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004bba:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <MX_TIM6_Init+0x64>)
 8004bbc:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <MX_TIM6_Init+0x68>)
 8004bbe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8004bc0:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <MX_TIM6_Init+0x64>)
 8004bc2:	2259      	movs	r2, #89	; 0x59
 8004bc4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc6:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <MX_TIM6_Init+0x64>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <MX_TIM6_Init+0x64>)
 8004bce:	f242 720f 	movw	r2, #9999	; 0x270f
 8004bd2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <MX_TIM6_Init+0x64>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004bda:	480d      	ldr	r0, [pc, #52]	; (8004c10 <MX_TIM6_Init+0x64>)
 8004bdc:	f002 f9fd 	bl	8006fda <HAL_TIM_Base_Init>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004be6:	f7fc fe37 	bl	8001858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bea:	2300      	movs	r3, #0
 8004bec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4806      	ldr	r0, [pc, #24]	; (8004c10 <MX_TIM6_Init+0x64>)
 8004bf8:	f003 face 	bl	8008198 <HAL_TIMEx_MasterConfigSynchronization>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004c02:	f7fc fe29 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20001c34 	.word	0x20001c34
 8004c14:	40001000 	.word	0x40001000

08004c18 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c1e:	463b      	mov	r3, r7
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <MX_TIM7_Init+0x64>)
 8004c28:	4a15      	ldr	r2, [pc, #84]	; (8004c80 <MX_TIM7_Init+0x68>)
 8004c2a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 90-1;
 8004c2c:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <MX_TIM7_Init+0x64>)
 8004c2e:	2259      	movs	r2, #89	; 0x59
 8004c30:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c32:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <MX_TIM7_Init+0x64>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8004c38:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <MX_TIM7_Init+0x64>)
 8004c3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c3e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c40:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <MX_TIM7_Init+0x64>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004c46:	480d      	ldr	r0, [pc, #52]	; (8004c7c <MX_TIM7_Init+0x64>)
 8004c48:	f002 f9c7 	bl	8006fda <HAL_TIM_Base_Init>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004c52:	f7fc fe01 	bl	8001858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c56:	2300      	movs	r3, #0
 8004c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c5e:	463b      	mov	r3, r7
 8004c60:	4619      	mov	r1, r3
 8004c62:	4806      	ldr	r0, [pc, #24]	; (8004c7c <MX_TIM7_Init+0x64>)
 8004c64:	f003 fa98 	bl	8008198 <HAL_TIMEx_MasterConfigSynchronization>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004c6e:	f7fc fdf3 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20001c7c 	.word	0x20001c7c
 8004c80:	40001400 	.word	0x40001400

08004c84 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08c      	sub	sp, #48	; 0x30
 8004c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c8a:	f107 0320 	add.w	r3, r7, #32
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	605a      	str	r2, [r3, #4]
 8004c94:	609a      	str	r2, [r3, #8]
 8004c96:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c98:	1d3b      	adds	r3, r7, #4
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	605a      	str	r2, [r3, #4]
 8004ca0:	609a      	str	r2, [r3, #8]
 8004ca2:	60da      	str	r2, [r3, #12]
 8004ca4:	611a      	str	r2, [r3, #16]
 8004ca6:	615a      	str	r2, [r3, #20]
 8004ca8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004caa:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <MX_TIM9_Init+0xd4>)
 8004cac:	4a2b      	ldr	r2, [pc, #172]	; (8004d5c <MX_TIM9_Init+0xd8>)
 8004cae:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1-1;
 8004cb0:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <MX_TIM9_Init+0xd4>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cb6:	4b28      	ldr	r3, [pc, #160]	; (8004d58 <MX_TIM9_Init+0xd4>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4500-1;
 8004cbc:	4b26      	ldr	r3, [pc, #152]	; (8004d58 <MX_TIM9_Init+0xd4>)
 8004cbe:	f241 1293 	movw	r2, #4499	; 0x1193
 8004cc2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cc4:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <MX_TIM9_Init+0xd4>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cca:	4b23      	ldr	r3, [pc, #140]	; (8004d58 <MX_TIM9_Init+0xd4>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004cd0:	4821      	ldr	r0, [pc, #132]	; (8004d58 <MX_TIM9_Init+0xd4>)
 8004cd2:	f002 f982 	bl	8006fda <HAL_TIM_Base_Init>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8004cdc:	f7fc fdbc 	bl	8001858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ce4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004ce6:	f107 0320 	add.w	r3, r7, #32
 8004cea:	4619      	mov	r1, r3
 8004cec:	481a      	ldr	r0, [pc, #104]	; (8004d58 <MX_TIM9_Init+0xd4>)
 8004cee:	f002 fe53 	bl	8007998 <HAL_TIM_ConfigClockSource>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8004cf8:	f7fc fdae 	bl	8001858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8004cfc:	4816      	ldr	r0, [pc, #88]	; (8004d58 <MX_TIM9_Init+0xd4>)
 8004cfe:	f002 fa2b 	bl	8007158 <HAL_TIM_PWM_Init>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8004d08:	f7fc fda6 	bl	8001858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d0c:	2360      	movs	r3, #96	; 0x60
 8004d0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d1c:	1d3b      	adds	r3, r7, #4
 8004d1e:	2200      	movs	r2, #0
 8004d20:	4619      	mov	r1, r3
 8004d22:	480d      	ldr	r0, [pc, #52]	; (8004d58 <MX_TIM9_Init+0xd4>)
 8004d24:	f002 fd76 	bl	8007814 <HAL_TIM_PWM_ConfigChannel>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8004d2e:	f7fc fd93 	bl	8001858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d32:	1d3b      	adds	r3, r7, #4
 8004d34:	2204      	movs	r2, #4
 8004d36:	4619      	mov	r1, r3
 8004d38:	4807      	ldr	r0, [pc, #28]	; (8004d58 <MX_TIM9_Init+0xd4>)
 8004d3a:	f002 fd6b 	bl	8007814 <HAL_TIM_PWM_ConfigChannel>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8004d44:	f7fc fd88 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8004d48:	4803      	ldr	r0, [pc, #12]	; (8004d58 <MX_TIM9_Init+0xd4>)
 8004d4a:	f000 f9ef 	bl	800512c <HAL_TIM_MspPostInit>

}
 8004d4e:	bf00      	nop
 8004d50:	3730      	adds	r7, #48	; 0x30
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20001cc4 	.word	0x20001cc4
 8004d5c:	40014000 	.word	0x40014000

08004d60 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08c      	sub	sp, #48	; 0x30
 8004d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d66:	f107 0320 	add.w	r3, r7, #32
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	605a      	str	r2, [r3, #4]
 8004d70:	609a      	str	r2, [r3, #8]
 8004d72:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d74:	1d3b      	adds	r3, r7, #4
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	605a      	str	r2, [r3, #4]
 8004d7c:	609a      	str	r2, [r3, #8]
 8004d7e:	60da      	str	r2, [r3, #12]
 8004d80:	611a      	str	r2, [r3, #16]
 8004d82:	615a      	str	r2, [r3, #20]
 8004d84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004d86:	4b2b      	ldr	r3, [pc, #172]	; (8004e34 <MX_TIM12_Init+0xd4>)
 8004d88:	4a2b      	ldr	r2, [pc, #172]	; (8004e38 <MX_TIM12_Init+0xd8>)
 8004d8a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1-1;
 8004d8c:	4b29      	ldr	r3, [pc, #164]	; (8004e34 <MX_TIM12_Init+0xd4>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d92:	4b28      	ldr	r3, [pc, #160]	; (8004e34 <MX_TIM12_Init+0xd4>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4500-1;
 8004d98:	4b26      	ldr	r3, [pc, #152]	; (8004e34 <MX_TIM12_Init+0xd4>)
 8004d9a:	f241 1293 	movw	r2, #4499	; 0x1193
 8004d9e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004da0:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <MX_TIM12_Init+0xd4>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004da6:	4b23      	ldr	r3, [pc, #140]	; (8004e34 <MX_TIM12_Init+0xd4>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004dac:	4821      	ldr	r0, [pc, #132]	; (8004e34 <MX_TIM12_Init+0xd4>)
 8004dae:	f002 f914 	bl	8006fda <HAL_TIM_Base_Init>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8004db8:	f7fc fd4e 	bl	8001858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dc0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004dc2:	f107 0320 	add.w	r3, r7, #32
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	481a      	ldr	r0, [pc, #104]	; (8004e34 <MX_TIM12_Init+0xd4>)
 8004dca:	f002 fde5 	bl	8007998 <HAL_TIM_ConfigClockSource>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8004dd4:	f7fc fd40 	bl	8001858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004dd8:	4816      	ldr	r0, [pc, #88]	; (8004e34 <MX_TIM12_Init+0xd4>)
 8004dda:	f002 f9bd 	bl	8007158 <HAL_TIM_PWM_Init>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8004de4:	f7fc fd38 	bl	8001858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004de8:	2360      	movs	r3, #96	; 0x60
 8004dea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004df8:	1d3b      	adds	r3, r7, #4
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	480d      	ldr	r0, [pc, #52]	; (8004e34 <MX_TIM12_Init+0xd4>)
 8004e00:	f002 fd08 	bl	8007814 <HAL_TIM_PWM_ConfigChannel>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8004e0a:	f7fc fd25 	bl	8001858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e0e:	1d3b      	adds	r3, r7, #4
 8004e10:	2204      	movs	r2, #4
 8004e12:	4619      	mov	r1, r3
 8004e14:	4807      	ldr	r0, [pc, #28]	; (8004e34 <MX_TIM12_Init+0xd4>)
 8004e16:	f002 fcfd 	bl	8007814 <HAL_TIM_PWM_ConfigChannel>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8004e20:	f7fc fd1a 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004e24:	4803      	ldr	r0, [pc, #12]	; (8004e34 <MX_TIM12_Init+0xd4>)
 8004e26:	f000 f981 	bl	800512c <HAL_TIM_MspPostInit>

}
 8004e2a:	bf00      	nop
 8004e2c:	3730      	adds	r7, #48	; 0x30
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20001d0c 	.word	0x20001d0c
 8004e38:	40001800 	.word	0x40001800

08004e3c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b090      	sub	sp, #64	; 0x40
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	609a      	str	r2, [r3, #8]
 8004e50:	60da      	str	r2, [r3, #12]
 8004e52:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5c:	d14b      	bne.n	8004ef6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e62:	4b72      	ldr	r3, [pc, #456]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a71      	ldr	r2, [pc, #452]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6e:	4b6f      	ldr	r3, [pc, #444]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7e:	4b6b      	ldr	r3, [pc, #428]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	4a6a      	ldr	r2, [pc, #424]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8a:	4b68      	ldr	r3, [pc, #416]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	4b64      	ldr	r3, [pc, #400]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	4a63      	ldr	r2, [pc, #396]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004ea0:	f043 0302 	orr.w	r3, r3, #2
 8004ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea6:	4b61      	ldr	r3, [pc, #388]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	623b      	str	r3, [r7, #32]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4858      	ldr	r0, [pc, #352]	; (8005030 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8004ed0:	f001 f9ae 	bl	8006230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004ed4:	2308      	movs	r3, #8
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed8:	2302      	movs	r3, #2
 8004eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004eec:	4619      	mov	r1, r3
 8004eee:	4851      	ldr	r0, [pc, #324]	; (8005034 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8004ef0:	f001 f99e 	bl	8006230 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004ef4:	e095      	b.n	8005022 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM3)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a4f      	ldr	r2, [pc, #316]	; (8005038 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d12c      	bne.n	8004f5a <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f00:	2300      	movs	r3, #0
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	4b49      	ldr	r3, [pc, #292]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	4a48      	ldr	r2, [pc, #288]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004f0a:	f043 0302 	orr.w	r3, r3, #2
 8004f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8004f10:	4b46      	ldr	r3, [pc, #280]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	4b42      	ldr	r3, [pc, #264]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	4a41      	ldr	r2, [pc, #260]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004f26:	f043 0302 	orr.w	r3, r3, #2
 8004f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2c:	4b3f      	ldr	r3, [pc, #252]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004f38:	2330      	movs	r3, #48	; 0x30
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f44:	2300      	movs	r3, #0
 8004f46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f50:	4619      	mov	r1, r3
 8004f52:	4838      	ldr	r0, [pc, #224]	; (8005034 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8004f54:	f001 f96c 	bl	8006230 <HAL_GPIO_Init>
}
 8004f58:	e063      	b.n	8005022 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM4)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a37      	ldr	r2, [pc, #220]	; (800503c <HAL_TIM_Encoder_MspInit+0x200>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d12d      	bne.n	8004fc0 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	4b30      	ldr	r3, [pc, #192]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	4a2f      	ldr	r2, [pc, #188]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004f6e:	f043 0304 	orr.w	r3, r3, #4
 8004f72:	6413      	str	r3, [r2, #64]	; 0x40
 8004f74:	4b2d      	ldr	r3, [pc, #180]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
 8004f84:	4b29      	ldr	r3, [pc, #164]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	4a28      	ldr	r2, [pc, #160]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004f8a:	f043 0308 	orr.w	r3, r3, #8
 8004f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f90:	4b26      	ldr	r3, [pc, #152]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004f9c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004faa:	2300      	movs	r3, #0
 8004fac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4821      	ldr	r0, [pc, #132]	; (8005040 <HAL_TIM_Encoder_MspInit+0x204>)
 8004fba:	f001 f939 	bl	8006230 <HAL_GPIO_Init>
}
 8004fbe:	e030      	b.n	8005022 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM5)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1f      	ldr	r2, [pc, #124]	; (8005044 <HAL_TIM_Encoder_MspInit+0x208>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d12b      	bne.n	8005022 <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	4b17      	ldr	r3, [pc, #92]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	4a16      	ldr	r2, [pc, #88]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004fd4:	f043 0308 	orr.w	r3, r3, #8
 8004fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	4b10      	ldr	r3, [pc, #64]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	4a0f      	ldr	r2, [pc, #60]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004ff0:	f043 0301 	orr.w	r3, r3, #1
 8004ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	; (800502c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	60bb      	str	r3, [r7, #8]
 8005000:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005002:	2303      	movs	r3, #3
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005006:	2302      	movs	r3, #2
 8005008:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500a:	2300      	movs	r3, #0
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800500e:	2300      	movs	r3, #0
 8005010:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005012:	2302      	movs	r3, #2
 8005014:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800501a:	4619      	mov	r1, r3
 800501c:	4804      	ldr	r0, [pc, #16]	; (8005030 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800501e:	f001 f907 	bl	8006230 <HAL_GPIO_Init>
}
 8005022:	bf00      	nop
 8005024:	3740      	adds	r7, #64	; 0x40
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800
 8005030:	40020000 	.word	0x40020000
 8005034:	40020400 	.word	0x40020400
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40020c00 	.word	0x40020c00
 8005044:	40000c00 	.word	0x40000c00

08005048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a30      	ldr	r2, [pc, #192]	; (8005118 <HAL_TIM_Base_MspInit+0xd0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d116      	bne.n	8005088 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	4b2f      	ldr	r3, [pc, #188]	; (800511c <HAL_TIM_Base_MspInit+0xd4>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	4a2e      	ldr	r2, [pc, #184]	; (800511c <HAL_TIM_Base_MspInit+0xd4>)
 8005064:	f043 0310 	orr.w	r3, r3, #16
 8005068:	6413      	str	r3, [r2, #64]	; 0x40
 800506a:	4b2c      	ldr	r3, [pc, #176]	; (800511c <HAL_TIM_Base_MspInit+0xd4>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005076:	2200      	movs	r2, #0
 8005078:	2100      	movs	r1, #0
 800507a:	2036      	movs	r0, #54	; 0x36
 800507c:	f000 fc9f 	bl	80059be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005080:	2036      	movs	r0, #54	; 0x36
 8005082:	f000 fcb8 	bl	80059f6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8005086:	e042      	b.n	800510e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a24      	ldr	r2, [pc, #144]	; (8005120 <HAL_TIM_Base_MspInit+0xd8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d116      	bne.n	80050c0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	4b21      	ldr	r3, [pc, #132]	; (800511c <HAL_TIM_Base_MspInit+0xd4>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	4a20      	ldr	r2, [pc, #128]	; (800511c <HAL_TIM_Base_MspInit+0xd4>)
 800509c:	f043 0320 	orr.w	r3, r3, #32
 80050a0:	6413      	str	r3, [r2, #64]	; 0x40
 80050a2:	4b1e      	ldr	r3, [pc, #120]	; (800511c <HAL_TIM_Base_MspInit+0xd4>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80050ae:	2200      	movs	r2, #0
 80050b0:	2100      	movs	r1, #0
 80050b2:	2037      	movs	r0, #55	; 0x37
 80050b4:	f000 fc83 	bl	80059be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80050b8:	2037      	movs	r0, #55	; 0x37
 80050ba:	f000 fc9c 	bl	80059f6 <HAL_NVIC_EnableIRQ>
}
 80050be:	e026      	b.n	800510e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM9)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a17      	ldr	r2, [pc, #92]	; (8005124 <HAL_TIM_Base_MspInit+0xdc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d10e      	bne.n	80050e8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	4b13      	ldr	r3, [pc, #76]	; (800511c <HAL_TIM_Base_MspInit+0xd4>)
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	4a12      	ldr	r2, [pc, #72]	; (800511c <HAL_TIM_Base_MspInit+0xd4>)
 80050d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d8:	6453      	str	r3, [r2, #68]	; 0x44
 80050da:	4b10      	ldr	r3, [pc, #64]	; (800511c <HAL_TIM_Base_MspInit+0xd4>)
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
}
 80050e6:	e012      	b.n	800510e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM12)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a0e      	ldr	r2, [pc, #56]	; (8005128 <HAL_TIM_Base_MspInit+0xe0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10d      	bne.n	800510e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80050f2:	2300      	movs	r3, #0
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <HAL_TIM_Base_MspInit+0xd4>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	4a08      	ldr	r2, [pc, #32]	; (800511c <HAL_TIM_Base_MspInit+0xd4>)
 80050fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005100:	6413      	str	r3, [r2, #64]	; 0x40
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <HAL_TIM_Base_MspInit+0xd4>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	68bb      	ldr	r3, [r7, #8]
}
 800510e:	bf00      	nop
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40001000 	.word	0x40001000
 800511c:	40023800 	.word	0x40023800
 8005120:	40001400 	.word	0x40001400
 8005124:	40014000 	.word	0x40014000
 8005128:	40001800 	.word	0x40001800

0800512c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	; 0x28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005134:	f107 0314 	add.w	r3, r7, #20
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	605a      	str	r2, [r3, #4]
 800513e:	609a      	str	r2, [r3, #8]
 8005140:	60da      	str	r2, [r3, #12]
 8005142:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a24      	ldr	r2, [pc, #144]	; (80051dc <HAL_TIM_MspPostInit+0xb0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d11e      	bne.n	800518c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	4b23      	ldr	r3, [pc, #140]	; (80051e0 <HAL_TIM_MspPostInit+0xb4>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <HAL_TIM_MspPostInit+0xb4>)
 8005158:	f043 0310 	orr.w	r3, r3, #16
 800515c:	6313      	str	r3, [r2, #48]	; 0x30
 800515e:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <HAL_TIM_MspPostInit+0xb4>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800516a:	2360      	movs	r3, #96	; 0x60
 800516c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516e:	2302      	movs	r3, #2
 8005170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005176:	2300      	movs	r3, #0
 8005178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800517a:	2303      	movs	r3, #3
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800517e:	f107 0314 	add.w	r3, r7, #20
 8005182:	4619      	mov	r1, r3
 8005184:	4817      	ldr	r0, [pc, #92]	; (80051e4 <HAL_TIM_MspPostInit+0xb8>)
 8005186:	f001 f853 	bl	8006230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800518a:	e023      	b.n	80051d4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <HAL_TIM_MspPostInit+0xbc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d11e      	bne.n	80051d4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <HAL_TIM_MspPostInit+0xb4>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	4a10      	ldr	r2, [pc, #64]	; (80051e0 <HAL_TIM_MspPostInit+0xb4>)
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	6313      	str	r3, [r2, #48]	; 0x30
 80051a6:	4b0e      	ldr	r3, [pc, #56]	; (80051e0 <HAL_TIM_MspPostInit+0xb4>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80051b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80051b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b8:	2302      	movs	r3, #2
 80051ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c0:	2300      	movs	r3, #0
 80051c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80051c4:	2309      	movs	r3, #9
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	4619      	mov	r1, r3
 80051ce:	4807      	ldr	r0, [pc, #28]	; (80051ec <HAL_TIM_MspPostInit+0xc0>)
 80051d0:	f001 f82e 	bl	8006230 <HAL_GPIO_Init>
}
 80051d4:	bf00      	nop
 80051d6:	3728      	adds	r7, #40	; 0x28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40001800 	.word	0x40001800
 80051ec:	40020400 	.word	0x40020400

080051f0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80051f4:	4b11      	ldr	r3, [pc, #68]	; (800523c <MX_USART3_UART_Init+0x4c>)
 80051f6:	4a12      	ldr	r2, [pc, #72]	; (8005240 <MX_USART3_UART_Init+0x50>)
 80051f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <MX_USART3_UART_Init+0x4c>)
 80051fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005200:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005202:	4b0e      	ldr	r3, [pc, #56]	; (800523c <MX_USART3_UART_Init+0x4c>)
 8005204:	2200      	movs	r2, #0
 8005206:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005208:	4b0c      	ldr	r3, [pc, #48]	; (800523c <MX_USART3_UART_Init+0x4c>)
 800520a:	2200      	movs	r2, #0
 800520c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <MX_USART3_UART_Init+0x4c>)
 8005210:	2200      	movs	r2, #0
 8005212:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005214:	4b09      	ldr	r3, [pc, #36]	; (800523c <MX_USART3_UART_Init+0x4c>)
 8005216:	220c      	movs	r2, #12
 8005218:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <MX_USART3_UART_Init+0x4c>)
 800521c:	2200      	movs	r2, #0
 800521e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <MX_USART3_UART_Init+0x4c>)
 8005222:	2200      	movs	r2, #0
 8005224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005226:	4805      	ldr	r0, [pc, #20]	; (800523c <MX_USART3_UART_Init+0x4c>)
 8005228:	f003 f846 	bl	80082b8 <HAL_UART_Init>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005232:	f7fc fb11 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005236:	bf00      	nop
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20001d54 	.word	0x20001d54
 8005240:	40004800 	.word	0x40004800

08005244 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524c:	f107 0314 	add.w	r3, r7, #20
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	609a      	str	r2, [r3, #8]
 8005258:	60da      	str	r2, [r3, #12]
 800525a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a5c      	ldr	r2, [pc, #368]	; (80053d4 <HAL_UART_MspInit+0x190>)
 8005262:	4293      	cmp	r3, r2
 8005264:	f040 80b2 	bne.w	80053cc <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005268:	2300      	movs	r3, #0
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	4b5a      	ldr	r3, [pc, #360]	; (80053d8 <HAL_UART_MspInit+0x194>)
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	4a59      	ldr	r2, [pc, #356]	; (80053d8 <HAL_UART_MspInit+0x194>)
 8005272:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005276:	6413      	str	r3, [r2, #64]	; 0x40
 8005278:	4b57      	ldr	r3, [pc, #348]	; (80053d8 <HAL_UART_MspInit+0x194>)
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	4b53      	ldr	r3, [pc, #332]	; (80053d8 <HAL_UART_MspInit+0x194>)
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	4a52      	ldr	r2, [pc, #328]	; (80053d8 <HAL_UART_MspInit+0x194>)
 800528e:	f043 0302 	orr.w	r3, r3, #2
 8005292:	6313      	str	r3, [r2, #48]	; 0x30
 8005294:	4b50      	ldr	r3, [pc, #320]	; (80053d8 <HAL_UART_MspInit+0x194>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052a0:	2300      	movs	r3, #0
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	4b4c      	ldr	r3, [pc, #304]	; (80053d8 <HAL_UART_MspInit+0x194>)
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	4a4b      	ldr	r2, [pc, #300]	; (80053d8 <HAL_UART_MspInit+0x194>)
 80052aa:	f043 0308 	orr.w	r3, r3, #8
 80052ae:	6313      	str	r3, [r2, #48]	; 0x30
 80052b0:	4b49      	ldr	r3, [pc, #292]	; (80053d8 <HAL_UART_MspInit+0x194>)
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80052bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c2:	2302      	movs	r3, #2
 80052c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ca:	2303      	movs	r3, #3
 80052cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052ce:	2307      	movs	r3, #7
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d2:	f107 0314 	add.w	r3, r7, #20
 80052d6:	4619      	mov	r1, r3
 80052d8:	4840      	ldr	r0, [pc, #256]	; (80053dc <HAL_UART_MspInit+0x198>)
 80052da:	f000 ffa9 	bl	8006230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e4:	2302      	movs	r3, #2
 80052e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ec:	2303      	movs	r3, #3
 80052ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052f0:	2307      	movs	r3, #7
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052f4:	f107 0314 	add.w	r3, r7, #20
 80052f8:	4619      	mov	r1, r3
 80052fa:	4839      	ldr	r0, [pc, #228]	; (80053e0 <HAL_UART_MspInit+0x19c>)
 80052fc:	f000 ff98 	bl	8006230 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005300:	4b38      	ldr	r3, [pc, #224]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 8005302:	4a39      	ldr	r2, [pc, #228]	; (80053e8 <HAL_UART_MspInit+0x1a4>)
 8005304:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005306:	4b37      	ldr	r3, [pc, #220]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 8005308:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800530c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800530e:	4b35      	ldr	r3, [pc, #212]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 8005310:	2200      	movs	r2, #0
 8005312:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005314:	4b33      	ldr	r3, [pc, #204]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 8005316:	2200      	movs	r2, #0
 8005318:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800531a:	4b32      	ldr	r3, [pc, #200]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 800531c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005320:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005322:	4b30      	ldr	r3, [pc, #192]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 8005324:	2200      	movs	r2, #0
 8005326:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005328:	4b2e      	ldr	r3, [pc, #184]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 800532a:	2200      	movs	r2, #0
 800532c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800532e:	4b2d      	ldr	r3, [pc, #180]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 8005330:	2200      	movs	r2, #0
 8005332:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005334:	4b2b      	ldr	r3, [pc, #172]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 8005336:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800533a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800533c:	4b29      	ldr	r3, [pc, #164]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 800533e:	2200      	movs	r2, #0
 8005340:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005342:	4828      	ldr	r0, [pc, #160]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 8005344:	f000 fb72 	bl	8005a2c <HAL_DMA_Init>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800534e:	f7fc fa83 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a23      	ldr	r2, [pc, #140]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 8005356:	639a      	str	r2, [r3, #56]	; 0x38
 8005358:	4a22      	ldr	r2, [pc, #136]	; (80053e4 <HAL_UART_MspInit+0x1a0>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800535e:	4b23      	ldr	r3, [pc, #140]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 8005360:	4a23      	ldr	r2, [pc, #140]	; (80053f0 <HAL_UART_MspInit+0x1ac>)
 8005362:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8005364:	4b21      	ldr	r3, [pc, #132]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 8005366:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800536a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800536c:	4b1f      	ldr	r3, [pc, #124]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 800536e:	2240      	movs	r2, #64	; 0x40
 8005370:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005372:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 8005374:	2200      	movs	r2, #0
 8005376:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005378:	4b1c      	ldr	r3, [pc, #112]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 800537a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800537e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005380:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 8005382:	2200      	movs	r2, #0
 8005384:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005386:	4b19      	ldr	r3, [pc, #100]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 8005388:	2200      	movs	r2, #0
 800538a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800538c:	4b17      	ldr	r3, [pc, #92]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 800538e:	2200      	movs	r2, #0
 8005390:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005392:	4b16      	ldr	r3, [pc, #88]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 8005394:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005398:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800539a:	4b14      	ldr	r3, [pc, #80]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 800539c:	2200      	movs	r2, #0
 800539e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80053a0:	4812      	ldr	r0, [pc, #72]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 80053a2:	f000 fb43 	bl	8005a2c <HAL_DMA_Init>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 80053ac:	f7fc fa54 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a0e      	ldr	r2, [pc, #56]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 80053b4:	635a      	str	r2, [r3, #52]	; 0x34
 80053b6:	4a0d      	ldr	r2, [pc, #52]	; (80053ec <HAL_UART_MspInit+0x1a8>)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80053bc:	2200      	movs	r2, #0
 80053be:	2100      	movs	r1, #0
 80053c0:	2027      	movs	r0, #39	; 0x27
 80053c2:	f000 fafc 	bl	80059be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80053c6:	2027      	movs	r0, #39	; 0x27
 80053c8:	f000 fb15 	bl	80059f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80053cc:	bf00      	nop
 80053ce:	3728      	adds	r7, #40	; 0x28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40004800 	.word	0x40004800
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40020400 	.word	0x40020400
 80053e0:	40020c00 	.word	0x40020c00
 80053e4:	20001d98 	.word	0x20001d98
 80053e8:	40026028 	.word	0x40026028
 80053ec:	20001df8 	.word	0x20001df8
 80053f0:	40026058 	.word	0x40026058

080053f4 <_ZN7VNH5019C1Ev>:
 *
 */

#include <vnh5019.h>

VNH5019::VNH5019()
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
{
}
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <_ZN7VNH50194initEv>:
  , pin{ pin_a, pin_b }
{
}

void VNH5019::init()
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(htim_, timer_channel_, 0);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	7d1b      	ldrb	r3, [r3, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d105      	bne.n	8005426 <_ZN7VNH50194initEv+0x1c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2200      	movs	r2, #0
 8005422:	635a      	str	r2, [r3, #52]	; 0x34
 8005424:	e018      	b.n	8005458 <_ZN7VNH50194initEv+0x4e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	7d1b      	ldrb	r3, [r3, #20]
 800542a:	2b04      	cmp	r3, #4
 800542c:	d105      	bne.n	800543a <_ZN7VNH50194initEv+0x30>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2200      	movs	r2, #0
 8005436:	639a      	str	r2, [r3, #56]	; 0x38
 8005438:	e00e      	b.n	8005458 <_ZN7VNH50194initEv+0x4e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	7d1b      	ldrb	r3, [r3, #20]
 800543e:	2b08      	cmp	r3, #8
 8005440:	d105      	bne.n	800544e <_ZN7VNH50194initEv+0x44>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2200      	movs	r2, #0
 800544a:	63da      	str	r2, [r3, #60]	; 0x3c
 800544c:	e004      	b.n	8005458 <_ZN7VNH50194initEv+0x4e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2200      	movs	r2, #0
 8005456:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(htim_, timer_channel_);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	7d1b      	ldrb	r3, [r3, #20]
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f001 fed2 	bl	800720c <HAL_TIM_PWM_Start>
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <_ZN7VNH50194initEP17TIM_HandleTypeDefmmP12GPIO_TypeDefS3_tt>:

void VNH5019::init(TIM_HandleTypeDef* htim, uint32_t channel, uint32_t resolution, GPIO_TypeDef* port_a,
                   GPIO_TypeDef* port_b, uint16_t pin_a, uint16_t pin_b)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
	inverted_ = false;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
	duty_ = 0.0;
 8005484:	68f9      	ldr	r1, [r7, #12]
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	htim_ = htim;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	611a      	str	r2, [r3, #16]
	timer_channel_ = channel;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	b2da      	uxtb	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	751a      	strb	r2, [r3, #20]
	timer_resolution_ = resolution;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	619a      	str	r2, [r3, #24]
	port.a_ = port_a;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	61da      	str	r2, [r3, #28]
	port.b_ = port_b;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	621a      	str	r2, [r3, #32]
	pin.a_ = pin_a;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8c3a      	ldrh	r2, [r7, #32]
 80054b6:	849a      	strh	r2, [r3, #36]	; 0x24
	pin.b_ = pin_b;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054bc:	84da      	strh	r2, [r3, #38]	; 0x26
	init();
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7ff ffa3 	bl	800540a <_ZN7VNH50194initEv>
}
 80054c4:	bf00      	nop
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <_ZN7VNH501911setInvertedEb>:

void VNH5019::setInverted(bool inverted)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
	inverted_ = inverted;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	701a      	strb	r2, [r3, #0]
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <_ZN7VNH50199writeDutyEd>:

void VNH5019::writeDuty(double duty)
{
 80054ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80054f0:	b086      	sub	sp, #24
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	ed87 0b00 	vstr	d0, [r7]
  if (inverted_)
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	7809      	ldrb	r1, [r1, #0]
 80054fe:	2900      	cmp	r1, #0
 8005500:	d005      	beq.n	800550e <_ZN7VNH50199writeDutyEd+0x22>
  {
    duty = -duty;
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 800550a:	e9c7 2300 	strd	r2, r3, [r7]
  }
  duty_ = SATURATION(duty, -1, 1);
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	4b6d      	ldr	r3, [pc, #436]	; (80056c8 <_ZN7VNH50199writeDutyEd+0x1dc>)
 8005514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005518:	f7fb faa0 	bl	8000a5c <__aeabi_dcmplt>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <_ZN7VNH50199writeDutyEd+0x3e>
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	4b68      	ldr	r3, [pc, #416]	; (80056c8 <_ZN7VNH50199writeDutyEd+0x1dc>)
 8005528:	e00f      	b.n	800554a <_ZN7VNH50199writeDutyEd+0x5e>
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	4b67      	ldr	r3, [pc, #412]	; (80056cc <_ZN7VNH50199writeDutyEd+0x1e0>)
 8005530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005534:	f7fb fab0 	bl	8000a98 <__aeabi_dcmpgt>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <_ZN7VNH50199writeDutyEd+0x5a>
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	4b62      	ldr	r3, [pc, #392]	; (80056cc <_ZN7VNH50199writeDutyEd+0x1e0>)
 8005544:	e001      	b.n	800554a <_ZN7VNH50199writeDutyEd+0x5e>
 8005546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800554a:	68f9      	ldr	r1, [r7, #12]
 800554c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  int32_t counterPeriod = ABS(duty_ * timer_resolution_);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	4618      	mov	r0, r3
 800555c:	f7fa ff92 	bl	8000484 <__aeabi_ui2d>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4640      	mov	r0, r8
 8005566:	4649      	mov	r1, r9
 8005568:	f7fb f806 	bl	8000578 <__aeabi_dmul>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4610      	mov	r0, r2
 8005572:	4619      	mov	r1, r3
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	f7fb fa8c 	bl	8000a98 <__aeabi_dcmpgt>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d015      	beq.n	80055b2 <_ZN7VNH50199writeDutyEd+0xc6>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	4618      	mov	r0, r3
 8005592:	f7fa ff77 	bl	8000484 <__aeabi_ui2d>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4620      	mov	r0, r4
 800559c:	4629      	mov	r1, r5
 800559e:	f7fa ffeb 	bl	8000578 <__aeabi_dmul>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	f7fb fa7f 	bl	8000aac <__aeabi_d2iz>
 80055ae:	4603      	mov	r3, r0
 80055b0:	e017      	b.n	80055e2 <_ZN7VNH50199writeDutyEd+0xf6>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fa ff61 	bl	8000484 <__aeabi_ui2d>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4640      	mov	r0, r8
 80055c8:	4649      	mov	r1, r9
 80055ca:	f7fa ffd5 	bl	8000578 <__aeabi_dmul>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4614      	mov	r4, r2
 80055d4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80055d8:	4620      	mov	r0, r4
 80055da:	4629      	mov	r1, r5
 80055dc:	f7fb fa66 	bl	8000aac <__aeabi_d2iz>
 80055e0:	4603      	mov	r3, r0
 80055e2:	617b      	str	r3, [r7, #20]

  if (duty_ > 0)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	f7fb fa51 	bl	8000a98 <__aeabi_dcmpgt>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d010      	beq.n	800561e <_ZN7VNH50199writeDutyEd+0x132>
  {
    HAL_GPIO_WritePin(port.a_, pin.a_, GPIO_PIN_SET);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	69d8      	ldr	r0, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005604:	2201      	movs	r2, #1
 8005606:	4619      	mov	r1, r3
 8005608:	f000 ffbe 	bl	8006588 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(port.b_, pin.b_, GPIO_PIN_RESET);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a18      	ldr	r0, [r3, #32]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005614:	2200      	movs	r2, #0
 8005616:	4619      	mov	r1, r3
 8005618:	f000 ffb6 	bl	8006588 <HAL_GPIO_WritePin>
 800561c:	e02c      	b.n	8005678 <_ZN7VNH50199writeDutyEd+0x18c>
  }
  else if (duty_ < 0)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	f7fb fa16 	bl	8000a5c <__aeabi_dcmplt>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d010      	beq.n	8005658 <_ZN7VNH50199writeDutyEd+0x16c>
  {
    HAL_GPIO_WritePin(port.a_, pin.a_, GPIO_PIN_RESET);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	69d8      	ldr	r0, [r3, #28]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800563e:	2200      	movs	r2, #0
 8005640:	4619      	mov	r1, r3
 8005642:	f000 ffa1 	bl	8006588 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(port.b_, pin.b_, GPIO_PIN_SET);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a18      	ldr	r0, [r3, #32]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800564e:	2201      	movs	r2, #1
 8005650:	4619      	mov	r1, r3
 8005652:	f000 ff99 	bl	8006588 <HAL_GPIO_WritePin>
 8005656:	e00f      	b.n	8005678 <_ZN7VNH50199writeDutyEd+0x18c>
  }
  else
  {
    HAL_GPIO_WritePin(port.a_, pin.a_, GPIO_PIN_RESET);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	69d8      	ldr	r0, [r3, #28]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005660:	2200      	movs	r2, #0
 8005662:	4619      	mov	r1, r3
 8005664:	f000 ff90 	bl	8006588 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(port.b_, pin.b_, GPIO_PIN_RESET);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a18      	ldr	r0, [r3, #32]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005670:	2200      	movs	r2, #0
 8005672:	4619      	mov	r1, r3
 8005674:	f000 ff88 	bl	8006588 <HAL_GPIO_WritePin>
  }
  __HAL_TIM_SetCompare(htim_, timer_channel_, counterPeriod);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	7d1b      	ldrb	r3, [r3, #20]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d105      	bne.n	800568c <_ZN7VNH50199writeDutyEd+0x1a0>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	635a      	str	r2, [r3, #52]	; 0x34
}
 800568a:	e018      	b.n	80056be <_ZN7VNH50199writeDutyEd+0x1d2>
  __HAL_TIM_SetCompare(htim_, timer_channel_, counterPeriod);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	7d1b      	ldrb	r3, [r3, #20]
 8005690:	2b04      	cmp	r3, #4
 8005692:	d105      	bne.n	80056a0 <_ZN7VNH50199writeDutyEd+0x1b4>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800569e:	e00e      	b.n	80056be <_ZN7VNH50199writeDutyEd+0x1d2>
  __HAL_TIM_SetCompare(htim_, timer_channel_, counterPeriod);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	7d1b      	ldrb	r3, [r3, #20]
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d105      	bne.n	80056b4 <_ZN7VNH50199writeDutyEd+0x1c8>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80056b2:	e004      	b.n	80056be <_ZN7VNH50199writeDutyEd+0x1d2>
  __HAL_TIM_SetCompare(htim_, timer_channel_, counterPeriod);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80056be:	bf00      	nop
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056c8:	bff00000 	.word	0xbff00000
 80056cc:	3ff00000 	.word	0x3ff00000

080056d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80056d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005708 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80056d4:	480d      	ldr	r0, [pc, #52]	; (800570c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80056d6:	490e      	ldr	r1, [pc, #56]	; (8005710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80056d8:	4a0e      	ldr	r2, [pc, #56]	; (8005714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80056da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056dc:	e002      	b.n	80056e4 <LoopCopyDataInit>

080056de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056e2:	3304      	adds	r3, #4

080056e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056e8:	d3f9      	bcc.n	80056de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056ea:	4a0b      	ldr	r2, [pc, #44]	; (8005718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80056ec:	4c0b      	ldr	r4, [pc, #44]	; (800571c <LoopFillZerobss+0x26>)
  movs r3, #0
 80056ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056f0:	e001      	b.n	80056f6 <LoopFillZerobss>

080056f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056f4:	3204      	adds	r2, #4

080056f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056f8:	d3fb      	bcc.n	80056f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056fa:	f7ff f8f5 	bl	80048e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056fe:	f004 f9e1 	bl	8009ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005702:	f7fc f801 	bl	8001708 <main>
  bx  lr    
 8005706:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005708:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800570c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005710:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8005714:	0800a178 	.word	0x0800a178
  ldr r2, =_sbss
 8005718:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800571c:	20001e6c 	.word	0x20001e6c

08005720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005720:	e7fe      	b.n	8005720 <ADC_IRQHandler>
	...

08005724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005728:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <HAL_Init+0x40>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a0d      	ldr	r2, [pc, #52]	; (8005764 <HAL_Init+0x40>)
 800572e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005734:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <HAL_Init+0x40>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <HAL_Init+0x40>)
 800573a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800573e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005740:	4b08      	ldr	r3, [pc, #32]	; (8005764 <HAL_Init+0x40>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a07      	ldr	r2, [pc, #28]	; (8005764 <HAL_Init+0x40>)
 8005746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800574c:	2003      	movs	r0, #3
 800574e:	f000 f92b 	bl	80059a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005752:	200f      	movs	r0, #15
 8005754:	f000 f808 	bl	8005768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005758:	f7fe ffe8 	bl	800472c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40023c00 	.word	0x40023c00

08005768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005770:	4b12      	ldr	r3, [pc, #72]	; (80057bc <HAL_InitTick+0x54>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <HAL_InitTick+0x58>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	4619      	mov	r1, r3
 800577a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800577e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005782:	fbb2 f3f3 	udiv	r3, r2, r3
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f943 	bl	8005a12 <HAL_SYSTICK_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e00e      	b.n	80057b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b0f      	cmp	r3, #15
 800579a:	d80a      	bhi.n	80057b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800579c:	2200      	movs	r2, #0
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295
 80057a4:	f000 f90b 	bl	80059be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057a8:	4a06      	ldr	r2, [pc, #24]	; (80057c4 <HAL_InitTick+0x5c>)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e000      	b.n	80057b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20000000 	.word	0x20000000
 80057c0:	20000008 	.word	0x20000008
 80057c4:	20000004 	.word	0x20000004

080057c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057cc:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <HAL_IncTick+0x20>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	4b06      	ldr	r3, [pc, #24]	; (80057ec <HAL_IncTick+0x24>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4413      	add	r3, r2
 80057d8:	4a04      	ldr	r2, [pc, #16]	; (80057ec <HAL_IncTick+0x24>)
 80057da:	6013      	str	r3, [r2, #0]
}
 80057dc:	bf00      	nop
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	20000008 	.word	0x20000008
 80057ec:	20001e58 	.word	0x20001e58

080057f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  return uwTick;
 80057f4:	4b03      	ldr	r3, [pc, #12]	; (8005804 <HAL_GetTick+0x14>)
 80057f6:	681b      	ldr	r3, [r3, #0]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20001e58 	.word	0x20001e58

08005808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <__NVIC_SetPriorityGrouping+0x44>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005824:	4013      	ands	r3, r2
 8005826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800583a:	4a04      	ldr	r2, [pc, #16]	; (800584c <__NVIC_SetPriorityGrouping+0x44>)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	60d3      	str	r3, [r2, #12]
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	e000ed00 	.word	0xe000ed00

08005850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005854:	4b04      	ldr	r3, [pc, #16]	; (8005868 <__NVIC_GetPriorityGrouping+0x18>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	0a1b      	lsrs	r3, r3, #8
 800585a:	f003 0307 	and.w	r3, r3, #7
}
 800585e:	4618      	mov	r0, r3
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	e000ed00 	.word	0xe000ed00

0800586c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800587a:	2b00      	cmp	r3, #0
 800587c:	db0b      	blt.n	8005896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	f003 021f 	and.w	r2, r3, #31
 8005884:	4907      	ldr	r1, [pc, #28]	; (80058a4 <__NVIC_EnableIRQ+0x38>)
 8005886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	2001      	movs	r0, #1
 800588e:	fa00 f202 	lsl.w	r2, r0, r2
 8005892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	e000e100 	.word	0xe000e100

080058a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	6039      	str	r1, [r7, #0]
 80058b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	db0a      	blt.n	80058d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	490c      	ldr	r1, [pc, #48]	; (80058f4 <__NVIC_SetPriority+0x4c>)
 80058c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c6:	0112      	lsls	r2, r2, #4
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	440b      	add	r3, r1
 80058cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058d0:	e00a      	b.n	80058e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	4908      	ldr	r1, [pc, #32]	; (80058f8 <__NVIC_SetPriority+0x50>)
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	3b04      	subs	r3, #4
 80058e0:	0112      	lsls	r2, r2, #4
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	440b      	add	r3, r1
 80058e6:	761a      	strb	r2, [r3, #24]
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	e000e100 	.word	0xe000e100
 80058f8:	e000ed00 	.word	0xe000ed00

080058fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b089      	sub	sp, #36	; 0x24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f1c3 0307 	rsb	r3, r3, #7
 8005916:	2b04      	cmp	r3, #4
 8005918:	bf28      	it	cs
 800591a:	2304      	movcs	r3, #4
 800591c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	3304      	adds	r3, #4
 8005922:	2b06      	cmp	r3, #6
 8005924:	d902      	bls.n	800592c <NVIC_EncodePriority+0x30>
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	3b03      	subs	r3, #3
 800592a:	e000      	b.n	800592e <NVIC_EncodePriority+0x32>
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005930:	f04f 32ff 	mov.w	r2, #4294967295
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	43da      	mvns	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	401a      	ands	r2, r3
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005944:	f04f 31ff 	mov.w	r1, #4294967295
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	43d9      	mvns	r1, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005954:	4313      	orrs	r3, r2
         );
}
 8005956:	4618      	mov	r0, r3
 8005958:	3724      	adds	r7, #36	; 0x24
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3b01      	subs	r3, #1
 8005970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005974:	d301      	bcc.n	800597a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005976:	2301      	movs	r3, #1
 8005978:	e00f      	b.n	800599a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800597a:	4a0a      	ldr	r2, [pc, #40]	; (80059a4 <SysTick_Config+0x40>)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3b01      	subs	r3, #1
 8005980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005982:	210f      	movs	r1, #15
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	f7ff ff8e 	bl	80058a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <SysTick_Config+0x40>)
 800598e:	2200      	movs	r2, #0
 8005990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005992:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <SysTick_Config+0x40>)
 8005994:	2207      	movs	r2, #7
 8005996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	e000e010 	.word	0xe000e010

080059a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff ff29 	bl	8005808 <__NVIC_SetPriorityGrouping>
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059be:	b580      	push	{r7, lr}
 80059c0:	b086      	sub	sp, #24
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	4603      	mov	r3, r0
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059d0:	f7ff ff3e 	bl	8005850 <__NVIC_GetPriorityGrouping>
 80059d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	6978      	ldr	r0, [r7, #20]
 80059dc:	f7ff ff8e 	bl	80058fc <NVIC_EncodePriority>
 80059e0:	4602      	mov	r2, r0
 80059e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059e6:	4611      	mov	r1, r2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff ff5d 	bl	80058a8 <__NVIC_SetPriority>
}
 80059ee:	bf00      	nop
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	4603      	mov	r3, r0
 80059fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff ff31 	bl	800586c <__NVIC_EnableIRQ>
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff ffa2 	bl	8005964 <SysTick_Config>
 8005a20:	4603      	mov	r3, r0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a38:	f7ff feda 	bl	80057f0 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e099      	b.n	8005b7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0201 	bic.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a68:	e00f      	b.n	8005a8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a6a:	f7ff fec1 	bl	80057f0 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b05      	cmp	r3, #5
 8005a76:	d908      	bls.n	8005a8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2203      	movs	r2, #3
 8005a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e078      	b.n	8005b7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e8      	bne.n	8005a6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4b38      	ldr	r3, [pc, #224]	; (8005b84 <HAL_DMA_Init+0x158>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ace:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d107      	bne.n	8005af4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	4313      	orrs	r3, r2
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0307 	bic.w	r3, r3, #7
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d117      	bne.n	8005b4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00e      	beq.n	8005b4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fb01 	bl	8006138 <DMA_CheckFifoParam>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d008      	beq.n	8005b4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2240      	movs	r2, #64	; 0x40
 8005b40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e016      	b.n	8005b7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fab8 	bl	80060cc <DMA_CalcBaseAndBitshift>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b64:	223f      	movs	r2, #63	; 0x3f
 8005b66:	409a      	lsls	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	f010803f 	.word	0xf010803f

08005b88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_DMA_Start_IT+0x26>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e040      	b.n	8005c30 <HAL_DMA_Start_IT+0xa8>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d12f      	bne.n	8005c22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 fa4a 	bl	8006070 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be0:	223f      	movs	r2, #63	; 0x3f
 8005be2:	409a      	lsls	r2, r3
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0216 	orr.w	r2, r2, #22
 8005bf6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0208 	orr.w	r2, r2, #8
 8005c0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0201 	orr.w	r2, r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e005      	b.n	8005c2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c46:	f7ff fdd3 	bl	80057f0 <HAL_GetTick>
 8005c4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d008      	beq.n	8005c6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2280      	movs	r2, #128	; 0x80
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e052      	b.n	8005d10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0216 	bic.w	r2, r2, #22
 8005c78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <HAL_DMA_Abort+0x62>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0208 	bic.w	r2, r2, #8
 8005ca8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0201 	bic.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cba:	e013      	b.n	8005ce4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cbc:	f7ff fd98 	bl	80057f0 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b05      	cmp	r3, #5
 8005cc8:	d90c      	bls.n	8005ce4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e015      	b.n	8005d10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e4      	bne.n	8005cbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf6:	223f      	movs	r2, #63	; 0x3f
 8005cf8:	409a      	lsls	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d004      	beq.n	8005d36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2280      	movs	r2, #128	; 0x80
 8005d30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e00c      	b.n	8005d50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2205      	movs	r2, #5
 8005d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0201 	bic.w	r2, r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d68:	4b8e      	ldr	r3, [pc, #568]	; (8005fa4 <HAL_DMA_IRQHandler+0x248>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a8e      	ldr	r2, [pc, #568]	; (8005fa8 <HAL_DMA_IRQHandler+0x24c>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	0a9b      	lsrs	r3, r3, #10
 8005d74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d86:	2208      	movs	r2, #8
 8005d88:	409a      	lsls	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01a      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d013      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0204 	bic.w	r2, r2, #4
 8005dae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db4:	2208      	movs	r2, #8
 8005db6:	409a      	lsls	r2, r3
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc0:	f043 0201 	orr.w	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dcc:	2201      	movs	r2, #1
 8005dce:	409a      	lsls	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d012      	beq.n	8005dfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00b      	beq.n	8005dfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dea:	2201      	movs	r2, #1
 8005dec:	409a      	lsls	r2, r3
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df6:	f043 0202 	orr.w	r2, r3, #2
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e02:	2204      	movs	r2, #4
 8005e04:	409a      	lsls	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d012      	beq.n	8005e34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e20:	2204      	movs	r2, #4
 8005e22:	409a      	lsls	r2, r3
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2c:	f043 0204 	orr.w	r2, r3, #4
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	2210      	movs	r2, #16
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d043      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d03c      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e56:	2210      	movs	r2, #16
 8005e58:	409a      	lsls	r2, r3
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d018      	beq.n	8005e9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d108      	bne.n	8005e8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d024      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	4798      	blx	r3
 8005e8a:	e01f      	b.n	8005ecc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01b      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	4798      	blx	r3
 8005e9c:	e016      	b.n	8005ecc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d107      	bne.n	8005ebc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0208 	bic.w	r2, r2, #8
 8005eba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	409a      	lsls	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 808f 	beq.w	8005ffc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 8087 	beq.w	8005ffc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	409a      	lsls	r2, r3
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	d136      	bne.n	8005f74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0216 	bic.w	r2, r2, #22
 8005f14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695a      	ldr	r2, [r3, #20]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <HAL_DMA_IRQHandler+0x1da>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0208 	bic.w	r2, r2, #8
 8005f44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f4a:	223f      	movs	r2, #63	; 0x3f
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d07e      	beq.n	8006068 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	4798      	blx	r3
        }
        return;
 8005f72:	e079      	b.n	8006068 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d01d      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10d      	bne.n	8005fac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d031      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4798      	blx	r3
 8005fa0:	e02c      	b.n	8005ffc <HAL_DMA_IRQHandler+0x2a0>
 8005fa2:	bf00      	nop
 8005fa4:	20000000 	.word	0x20000000
 8005fa8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d023      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	4798      	blx	r3
 8005fbc:	e01e      	b.n	8005ffc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10f      	bne.n	8005fec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0210 	bic.w	r2, r2, #16
 8005fda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	2b00      	cmp	r3, #0
 8006002:	d032      	beq.n	800606a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d022      	beq.n	8006056 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2205      	movs	r2, #5
 8006014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	3301      	adds	r3, #1
 800602c:	60bb      	str	r3, [r7, #8]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	429a      	cmp	r2, r3
 8006032:	d307      	bcc.n	8006044 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f2      	bne.n	8006028 <HAL_DMA_IRQHandler+0x2cc>
 8006042:	e000      	b.n	8006046 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006044:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	4798      	blx	r3
 8006066:	e000      	b.n	800606a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006068:	bf00      	nop
    }
  }
}
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800608c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	2b40      	cmp	r3, #64	; 0x40
 800609c:	d108      	bne.n	80060b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060ae:	e007      	b.n	80060c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	60da      	str	r2, [r3, #12]
}
 80060c0:	bf00      	nop
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	3b10      	subs	r3, #16
 80060dc:	4a14      	ldr	r2, [pc, #80]	; (8006130 <DMA_CalcBaseAndBitshift+0x64>)
 80060de:	fba2 2303 	umull	r2, r3, r2, r3
 80060e2:	091b      	lsrs	r3, r3, #4
 80060e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80060e6:	4a13      	ldr	r2, [pc, #76]	; (8006134 <DMA_CalcBaseAndBitshift+0x68>)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d909      	bls.n	800610e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	1d1a      	adds	r2, r3, #4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	659a      	str	r2, [r3, #88]	; 0x58
 800610c:	e007      	b.n	800611e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	aaaaaaab 	.word	0xaaaaaaab
 8006134:	0800a128 	.word	0x0800a128

08006138 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d11f      	bne.n	8006192 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b03      	cmp	r3, #3
 8006156:	d856      	bhi.n	8006206 <DMA_CheckFifoParam+0xce>
 8006158:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <DMA_CheckFifoParam+0x28>)
 800615a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615e:	bf00      	nop
 8006160:	08006171 	.word	0x08006171
 8006164:	08006183 	.word	0x08006183
 8006168:	08006171 	.word	0x08006171
 800616c:	08006207 	.word	0x08006207
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d046      	beq.n	800620a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006180:	e043      	b.n	800620a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800618a:	d140      	bne.n	800620e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006190:	e03d      	b.n	800620e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800619a:	d121      	bne.n	80061e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d837      	bhi.n	8006212 <DMA_CheckFifoParam+0xda>
 80061a2:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <DMA_CheckFifoParam+0x70>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061b9 	.word	0x080061b9
 80061ac:	080061bf 	.word	0x080061bf
 80061b0:	080061b9 	.word	0x080061b9
 80061b4:	080061d1 	.word	0x080061d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
      break;
 80061bc:	e030      	b.n	8006220 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d025      	beq.n	8006216 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ce:	e022      	b.n	8006216 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061d8:	d11f      	bne.n	800621a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061de:	e01c      	b.n	800621a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d903      	bls.n	80061ee <DMA_CheckFifoParam+0xb6>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d003      	beq.n	80061f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80061ec:	e018      	b.n	8006220 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]
      break;
 80061f2:	e015      	b.n	8006220 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00e      	beq.n	800621e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	73fb      	strb	r3, [r7, #15]
      break;
 8006204:	e00b      	b.n	800621e <DMA_CheckFifoParam+0xe6>
      break;
 8006206:	bf00      	nop
 8006208:	e00a      	b.n	8006220 <DMA_CheckFifoParam+0xe8>
      break;
 800620a:	bf00      	nop
 800620c:	e008      	b.n	8006220 <DMA_CheckFifoParam+0xe8>
      break;
 800620e:	bf00      	nop
 8006210:	e006      	b.n	8006220 <DMA_CheckFifoParam+0xe8>
      break;
 8006212:	bf00      	nop
 8006214:	e004      	b.n	8006220 <DMA_CheckFifoParam+0xe8>
      break;
 8006216:	bf00      	nop
 8006218:	e002      	b.n	8006220 <DMA_CheckFifoParam+0xe8>
      break;   
 800621a:	bf00      	nop
 800621c:	e000      	b.n	8006220 <DMA_CheckFifoParam+0xe8>
      break;
 800621e:	bf00      	nop
    }
  } 
  
  return status; 
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop

08006230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006230:	b480      	push	{r7}
 8006232:	b089      	sub	sp, #36	; 0x24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800623e:	2300      	movs	r3, #0
 8006240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006242:	2300      	movs	r3, #0
 8006244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006246:	2300      	movs	r3, #0
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	e177      	b.n	800653c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800624c:	2201      	movs	r2, #1
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4013      	ands	r3, r2
 800625e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	429a      	cmp	r2, r3
 8006266:	f040 8166 	bne.w	8006536 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b01      	cmp	r3, #1
 8006274:	d005      	beq.n	8006282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800627e:	2b02      	cmp	r3, #2
 8006280:	d130      	bne.n	80062e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	2203      	movs	r2, #3
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43db      	mvns	r3, r3
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	4013      	ands	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	fa02 f303 	lsl.w	r3, r2, r3
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062b8:	2201      	movs	r2, #1
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	43db      	mvns	r3, r3
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	4013      	ands	r3, r2
 80062c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	f003 0201 	and.w	r2, r3, #1
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	4313      	orrs	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f003 0303 	and.w	r3, r3, #3
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d017      	beq.n	8006320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	2203      	movs	r2, #3
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	43db      	mvns	r3, r3
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	4013      	ands	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4313      	orrs	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d123      	bne.n	8006374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	08da      	lsrs	r2, r3, #3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3208      	adds	r2, #8
 8006334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	220f      	movs	r2, #15
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	43db      	mvns	r3, r3
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	4013      	ands	r3, r2
 800634e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	4313      	orrs	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	08da      	lsrs	r2, r3, #3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3208      	adds	r2, #8
 800636e:	69b9      	ldr	r1, [r7, #24]
 8006370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	2203      	movs	r2, #3
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	43db      	mvns	r3, r3
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	4013      	ands	r3, r2
 800638a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f003 0203 	and.w	r2, r3, #3
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	4313      	orrs	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 80c0 	beq.w	8006536 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	4b66      	ldr	r3, [pc, #408]	; (8006554 <HAL_GPIO_Init+0x324>)
 80063bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063be:	4a65      	ldr	r2, [pc, #404]	; (8006554 <HAL_GPIO_Init+0x324>)
 80063c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063c4:	6453      	str	r3, [r2, #68]	; 0x44
 80063c6:	4b63      	ldr	r3, [pc, #396]	; (8006554 <HAL_GPIO_Init+0x324>)
 80063c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063d2:	4a61      	ldr	r2, [pc, #388]	; (8006558 <HAL_GPIO_Init+0x328>)
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	089b      	lsrs	r3, r3, #2
 80063d8:	3302      	adds	r3, #2
 80063da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	220f      	movs	r2, #15
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	43db      	mvns	r3, r3
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	4013      	ands	r3, r2
 80063f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a58      	ldr	r2, [pc, #352]	; (800655c <HAL_GPIO_Init+0x32c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d037      	beq.n	800646e <HAL_GPIO_Init+0x23e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a57      	ldr	r2, [pc, #348]	; (8006560 <HAL_GPIO_Init+0x330>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d031      	beq.n	800646a <HAL_GPIO_Init+0x23a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a56      	ldr	r2, [pc, #344]	; (8006564 <HAL_GPIO_Init+0x334>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d02b      	beq.n	8006466 <HAL_GPIO_Init+0x236>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a55      	ldr	r2, [pc, #340]	; (8006568 <HAL_GPIO_Init+0x338>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d025      	beq.n	8006462 <HAL_GPIO_Init+0x232>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a54      	ldr	r2, [pc, #336]	; (800656c <HAL_GPIO_Init+0x33c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01f      	beq.n	800645e <HAL_GPIO_Init+0x22e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a53      	ldr	r2, [pc, #332]	; (8006570 <HAL_GPIO_Init+0x340>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d019      	beq.n	800645a <HAL_GPIO_Init+0x22a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a52      	ldr	r2, [pc, #328]	; (8006574 <HAL_GPIO_Init+0x344>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d013      	beq.n	8006456 <HAL_GPIO_Init+0x226>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a51      	ldr	r2, [pc, #324]	; (8006578 <HAL_GPIO_Init+0x348>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00d      	beq.n	8006452 <HAL_GPIO_Init+0x222>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a50      	ldr	r2, [pc, #320]	; (800657c <HAL_GPIO_Init+0x34c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d007      	beq.n	800644e <HAL_GPIO_Init+0x21e>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a4f      	ldr	r2, [pc, #316]	; (8006580 <HAL_GPIO_Init+0x350>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d101      	bne.n	800644a <HAL_GPIO_Init+0x21a>
 8006446:	2309      	movs	r3, #9
 8006448:	e012      	b.n	8006470 <HAL_GPIO_Init+0x240>
 800644a:	230a      	movs	r3, #10
 800644c:	e010      	b.n	8006470 <HAL_GPIO_Init+0x240>
 800644e:	2308      	movs	r3, #8
 8006450:	e00e      	b.n	8006470 <HAL_GPIO_Init+0x240>
 8006452:	2307      	movs	r3, #7
 8006454:	e00c      	b.n	8006470 <HAL_GPIO_Init+0x240>
 8006456:	2306      	movs	r3, #6
 8006458:	e00a      	b.n	8006470 <HAL_GPIO_Init+0x240>
 800645a:	2305      	movs	r3, #5
 800645c:	e008      	b.n	8006470 <HAL_GPIO_Init+0x240>
 800645e:	2304      	movs	r3, #4
 8006460:	e006      	b.n	8006470 <HAL_GPIO_Init+0x240>
 8006462:	2303      	movs	r3, #3
 8006464:	e004      	b.n	8006470 <HAL_GPIO_Init+0x240>
 8006466:	2302      	movs	r3, #2
 8006468:	e002      	b.n	8006470 <HAL_GPIO_Init+0x240>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <HAL_GPIO_Init+0x240>
 800646e:	2300      	movs	r3, #0
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	f002 0203 	and.w	r2, r2, #3
 8006476:	0092      	lsls	r2, r2, #2
 8006478:	4093      	lsls	r3, r2
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	4313      	orrs	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006480:	4935      	ldr	r1, [pc, #212]	; (8006558 <HAL_GPIO_Init+0x328>)
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	089b      	lsrs	r3, r3, #2
 8006486:	3302      	adds	r3, #2
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800648e:	4b3d      	ldr	r3, [pc, #244]	; (8006584 <HAL_GPIO_Init+0x354>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	43db      	mvns	r3, r3
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	4013      	ands	r3, r2
 800649c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064b2:	4a34      	ldr	r2, [pc, #208]	; (8006584 <HAL_GPIO_Init+0x354>)
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064b8:	4b32      	ldr	r3, [pc, #200]	; (8006584 <HAL_GPIO_Init+0x354>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	43db      	mvns	r3, r3
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	4013      	ands	r3, r2
 80064c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064dc:	4a29      	ldr	r2, [pc, #164]	; (8006584 <HAL_GPIO_Init+0x354>)
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064e2:	4b28      	ldr	r3, [pc, #160]	; (8006584 <HAL_GPIO_Init+0x354>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	43db      	mvns	r3, r3
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	4013      	ands	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006506:	4a1f      	ldr	r2, [pc, #124]	; (8006584 <HAL_GPIO_Init+0x354>)
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800650c:	4b1d      	ldr	r3, [pc, #116]	; (8006584 <HAL_GPIO_Init+0x354>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	43db      	mvns	r3, r3
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	4013      	ands	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006530:	4a14      	ldr	r2, [pc, #80]	; (8006584 <HAL_GPIO_Init+0x354>)
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	3301      	adds	r3, #1
 800653a:	61fb      	str	r3, [r7, #28]
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2b0f      	cmp	r3, #15
 8006540:	f67f ae84 	bls.w	800624c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	3724      	adds	r7, #36	; 0x24
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40023800 	.word	0x40023800
 8006558:	40013800 	.word	0x40013800
 800655c:	40020000 	.word	0x40020000
 8006560:	40020400 	.word	0x40020400
 8006564:	40020800 	.word	0x40020800
 8006568:	40020c00 	.word	0x40020c00
 800656c:	40021000 	.word	0x40021000
 8006570:	40021400 	.word	0x40021400
 8006574:	40021800 	.word	0x40021800
 8006578:	40021c00 	.word	0x40021c00
 800657c:	40022000 	.word	0x40022000
 8006580:	40022400 	.word	0x40022400
 8006584:	40013c00 	.word	0x40013c00

08006588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	807b      	strh	r3, [r7, #2]
 8006594:	4613      	mov	r3, r2
 8006596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006598:	787b      	ldrb	r3, [r7, #1]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800659e:	887a      	ldrh	r2, [r7, #2]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065a4:	e003      	b.n	80065ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065a6:	887b      	ldrh	r3, [r7, #2]
 80065a8:	041a      	lsls	r2, r3, #16
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	619a      	str	r2, [r3, #24]
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80065c6:	2300      	movs	r3, #0
 80065c8:	603b      	str	r3, [r7, #0]
 80065ca:	4b20      	ldr	r3, [pc, #128]	; (800664c <HAL_PWREx_EnableOverDrive+0x90>)
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	4a1f      	ldr	r2, [pc, #124]	; (800664c <HAL_PWREx_EnableOverDrive+0x90>)
 80065d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d4:	6413      	str	r3, [r2, #64]	; 0x40
 80065d6:	4b1d      	ldr	r3, [pc, #116]	; (800664c <HAL_PWREx_EnableOverDrive+0x90>)
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065e2:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <HAL_PWREx_EnableOverDrive+0x94>)
 80065e4:	2201      	movs	r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065e8:	f7ff f902 	bl	80057f0 <HAL_GetTick>
 80065ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065ee:	e009      	b.n	8006604 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065f0:	f7ff f8fe 	bl	80057f0 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065fe:	d901      	bls.n	8006604 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e01f      	b.n	8006644 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006604:	4b13      	ldr	r3, [pc, #76]	; (8006654 <HAL_PWREx_EnableOverDrive+0x98>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800660c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006610:	d1ee      	bne.n	80065f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006612:	4b11      	ldr	r3, [pc, #68]	; (8006658 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006614:	2201      	movs	r2, #1
 8006616:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006618:	f7ff f8ea 	bl	80057f0 <HAL_GetTick>
 800661c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800661e:	e009      	b.n	8006634 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006620:	f7ff f8e6 	bl	80057f0 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800662e:	d901      	bls.n	8006634 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e007      	b.n	8006644 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006634:	4b07      	ldr	r3, [pc, #28]	; (8006654 <HAL_PWREx_EnableOverDrive+0x98>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006640:	d1ee      	bne.n	8006620 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	40023800 	.word	0x40023800
 8006650:	420e0040 	.word	0x420e0040
 8006654:	40007000 	.word	0x40007000
 8006658:	420e0044 	.word	0x420e0044

0800665c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e267      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d075      	beq.n	8006766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800667a:	4b88      	ldr	r3, [pc, #544]	; (800689c <HAL_RCC_OscConfig+0x240>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
 8006682:	2b04      	cmp	r3, #4
 8006684:	d00c      	beq.n	80066a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006686:	4b85      	ldr	r3, [pc, #532]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800668e:	2b08      	cmp	r3, #8
 8006690:	d112      	bne.n	80066b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006692:	4b82      	ldr	r3, [pc, #520]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800669e:	d10b      	bne.n	80066b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a0:	4b7e      	ldr	r3, [pc, #504]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d05b      	beq.n	8006764 <HAL_RCC_OscConfig+0x108>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d157      	bne.n	8006764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e242      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c0:	d106      	bne.n	80066d0 <HAL_RCC_OscConfig+0x74>
 80066c2:	4b76      	ldr	r3, [pc, #472]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a75      	ldr	r2, [pc, #468]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	e01d      	b.n	800670c <HAL_RCC_OscConfig+0xb0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066d8:	d10c      	bne.n	80066f4 <HAL_RCC_OscConfig+0x98>
 80066da:	4b70      	ldr	r3, [pc, #448]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a6f      	ldr	r2, [pc, #444]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	4b6d      	ldr	r3, [pc, #436]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a6c      	ldr	r2, [pc, #432]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e00b      	b.n	800670c <HAL_RCC_OscConfig+0xb0>
 80066f4:	4b69      	ldr	r3, [pc, #420]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a68      	ldr	r2, [pc, #416]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	4b66      	ldr	r3, [pc, #408]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a65      	ldr	r2, [pc, #404]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800670a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d013      	beq.n	800673c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006714:	f7ff f86c 	bl	80057f0 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800671c:	f7ff f868 	bl	80057f0 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	; 0x64
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e207      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672e:	4b5b      	ldr	r3, [pc, #364]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f0      	beq.n	800671c <HAL_RCC_OscConfig+0xc0>
 800673a:	e014      	b.n	8006766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673c:	f7ff f858 	bl	80057f0 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006744:	f7ff f854 	bl	80057f0 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b64      	cmp	r3, #100	; 0x64
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e1f3      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006756:	4b51      	ldr	r3, [pc, #324]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0xe8>
 8006762:	e000      	b.n	8006766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d063      	beq.n	800683a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006772:	4b4a      	ldr	r3, [pc, #296]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 030c 	and.w	r3, r3, #12
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800677e:	4b47      	ldr	r3, [pc, #284]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006786:	2b08      	cmp	r3, #8
 8006788:	d11c      	bne.n	80067c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678a:	4b44      	ldr	r3, [pc, #272]	; (800689c <HAL_RCC_OscConfig+0x240>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d116      	bne.n	80067c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006796:	4b41      	ldr	r3, [pc, #260]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_RCC_OscConfig+0x152>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d001      	beq.n	80067ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e1c7      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ae:	4b3b      	ldr	r3, [pc, #236]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4937      	ldr	r1, [pc, #220]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067c2:	e03a      	b.n	800683a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d020      	beq.n	800680e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067cc:	4b34      	ldr	r3, [pc, #208]	; (80068a0 <HAL_RCC_OscConfig+0x244>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d2:	f7ff f80d 	bl	80057f0 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d8:	e008      	b.n	80067ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067da:	f7ff f809 	bl	80057f0 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e1a8      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ec:	4b2b      	ldr	r3, [pc, #172]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0f0      	beq.n	80067da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f8:	4b28      	ldr	r3, [pc, #160]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4925      	ldr	r1, [pc, #148]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006808:	4313      	orrs	r3, r2
 800680a:	600b      	str	r3, [r1, #0]
 800680c:	e015      	b.n	800683a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800680e:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <HAL_RCC_OscConfig+0x244>)
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006814:	f7fe ffec 	bl	80057f0 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800681c:	f7fe ffe8 	bl	80057f0 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e187      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800682e:	4b1b      	ldr	r3, [pc, #108]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f0      	bne.n	800681c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d036      	beq.n	80068b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d016      	beq.n	800687c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800684e:	4b15      	ldr	r3, [pc, #84]	; (80068a4 <HAL_RCC_OscConfig+0x248>)
 8006850:	2201      	movs	r2, #1
 8006852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006854:	f7fe ffcc 	bl	80057f0 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800685c:	f7fe ffc8 	bl	80057f0 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e167      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800686e:	4b0b      	ldr	r3, [pc, #44]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0f0      	beq.n	800685c <HAL_RCC_OscConfig+0x200>
 800687a:	e01b      	b.n	80068b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800687c:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <HAL_RCC_OscConfig+0x248>)
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006882:	f7fe ffb5 	bl	80057f0 <HAL_GetTick>
 8006886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006888:	e00e      	b.n	80068a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800688a:	f7fe ffb1 	bl	80057f0 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d907      	bls.n	80068a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e150      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
 800689c:	40023800 	.word	0x40023800
 80068a0:	42470000 	.word	0x42470000
 80068a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068a8:	4b88      	ldr	r3, [pc, #544]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80068aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1ea      	bne.n	800688a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8097 	beq.w	80069f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068c6:	4b81      	ldr	r3, [pc, #516]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10f      	bne.n	80068f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	60bb      	str	r3, [r7, #8]
 80068d6:	4b7d      	ldr	r3, [pc, #500]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	4a7c      	ldr	r2, [pc, #496]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80068dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e0:	6413      	str	r3, [r2, #64]	; 0x40
 80068e2:	4b7a      	ldr	r3, [pc, #488]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ea:	60bb      	str	r3, [r7, #8]
 80068ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ee:	2301      	movs	r3, #1
 80068f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f2:	4b77      	ldr	r3, [pc, #476]	; (8006ad0 <HAL_RCC_OscConfig+0x474>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d118      	bne.n	8006930 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068fe:	4b74      	ldr	r3, [pc, #464]	; (8006ad0 <HAL_RCC_OscConfig+0x474>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a73      	ldr	r2, [pc, #460]	; (8006ad0 <HAL_RCC_OscConfig+0x474>)
 8006904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800690a:	f7fe ff71 	bl	80057f0 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006910:	e008      	b.n	8006924 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006912:	f7fe ff6d 	bl	80057f0 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e10c      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006924:	4b6a      	ldr	r3, [pc, #424]	; (8006ad0 <HAL_RCC_OscConfig+0x474>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0f0      	beq.n	8006912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d106      	bne.n	8006946 <HAL_RCC_OscConfig+0x2ea>
 8006938:	4b64      	ldr	r3, [pc, #400]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693c:	4a63      	ldr	r2, [pc, #396]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	6713      	str	r3, [r2, #112]	; 0x70
 8006944:	e01c      	b.n	8006980 <HAL_RCC_OscConfig+0x324>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b05      	cmp	r3, #5
 800694c:	d10c      	bne.n	8006968 <HAL_RCC_OscConfig+0x30c>
 800694e:	4b5f      	ldr	r3, [pc, #380]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	4a5e      	ldr	r2, [pc, #376]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006954:	f043 0304 	orr.w	r3, r3, #4
 8006958:	6713      	str	r3, [r2, #112]	; 0x70
 800695a:	4b5c      	ldr	r3, [pc, #368]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	4a5b      	ldr	r2, [pc, #364]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	6713      	str	r3, [r2, #112]	; 0x70
 8006966:	e00b      	b.n	8006980 <HAL_RCC_OscConfig+0x324>
 8006968:	4b58      	ldr	r3, [pc, #352]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 800696a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696c:	4a57      	ldr	r2, [pc, #348]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	6713      	str	r3, [r2, #112]	; 0x70
 8006974:	4b55      	ldr	r3, [pc, #340]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	4a54      	ldr	r2, [pc, #336]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 800697a:	f023 0304 	bic.w	r3, r3, #4
 800697e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d015      	beq.n	80069b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006988:	f7fe ff32 	bl	80057f0 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800698e:	e00a      	b.n	80069a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006990:	f7fe ff2e 	bl	80057f0 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	f241 3288 	movw	r2, #5000	; 0x1388
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e0cb      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a6:	4b49      	ldr	r3, [pc, #292]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0ee      	beq.n	8006990 <HAL_RCC_OscConfig+0x334>
 80069b2:	e014      	b.n	80069de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069b4:	f7fe ff1c 	bl	80057f0 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ba:	e00a      	b.n	80069d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069bc:	f7fe ff18 	bl	80057f0 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e0b5      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069d2:	4b3e      	ldr	r3, [pc, #248]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1ee      	bne.n	80069bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069de:	7dfb      	ldrb	r3, [r7, #23]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d105      	bne.n	80069f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e4:	4b39      	ldr	r3, [pc, #228]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	4a38      	ldr	r2, [pc, #224]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80069ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80a1 	beq.w	8006b3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069fa:	4b34      	ldr	r3, [pc, #208]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d05c      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d141      	bne.n	8006a92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a0e:	4b31      	ldr	r3, [pc, #196]	; (8006ad4 <HAL_RCC_OscConfig+0x478>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a14:	f7fe feec 	bl	80057f0 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a1c:	f7fe fee8 	bl	80057f0 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e087      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2e:	4b27      	ldr	r3, [pc, #156]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f0      	bne.n	8006a1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69da      	ldr	r2, [r3, #28]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	019b      	lsls	r3, r3, #6
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	085b      	lsrs	r3, r3, #1
 8006a52:	3b01      	subs	r3, #1
 8006a54:	041b      	lsls	r3, r3, #16
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	061b      	lsls	r3, r3, #24
 8006a5e:	491b      	ldr	r1, [pc, #108]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a64:	4b1b      	ldr	r3, [pc, #108]	; (8006ad4 <HAL_RCC_OscConfig+0x478>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6a:	f7fe fec1 	bl	80057f0 <HAL_GetTick>
 8006a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a70:	e008      	b.n	8006a84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a72:	f7fe febd 	bl	80057f0 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e05c      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a84:	4b11      	ldr	r3, [pc, #68]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0f0      	beq.n	8006a72 <HAL_RCC_OscConfig+0x416>
 8006a90:	e054      	b.n	8006b3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a92:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <HAL_RCC_OscConfig+0x478>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a98:	f7fe feaa 	bl	80057f0 <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aa0:	f7fe fea6 	bl	80057f0 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e045      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab2:	4b06      	ldr	r3, [pc, #24]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f0      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x444>
 8006abe:	e03d      	b.n	8006b3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d107      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e038      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	40007000 	.word	0x40007000
 8006ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ad8:	4b1b      	ldr	r3, [pc, #108]	; (8006b48 <HAL_RCC_OscConfig+0x4ec>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d028      	beq.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d121      	bne.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d11a      	bne.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b08:	4013      	ands	r3, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d111      	bne.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1e:	085b      	lsrs	r3, r3, #1
 8006b20:	3b01      	subs	r3, #1
 8006b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d107      	bne.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e000      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40023800 	.word	0x40023800

08006b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e0cc      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b60:	4b68      	ldr	r3, [pc, #416]	; (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d90c      	bls.n	8006b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6e:	4b65      	ldr	r3, [pc, #404]	; (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b76:	4b63      	ldr	r3, [pc, #396]	; (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d001      	beq.n	8006b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e0b8      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d020      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ba0:	4b59      	ldr	r3, [pc, #356]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	4a58      	ldr	r2, [pc, #352]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bb8:	4b53      	ldr	r3, [pc, #332]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4a52      	ldr	r2, [pc, #328]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bc4:	4b50      	ldr	r3, [pc, #320]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	494d      	ldr	r1, [pc, #308]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d044      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d107      	bne.n	8006bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bea:	4b47      	ldr	r3, [pc, #284]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d119      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e07f      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d003      	beq.n	8006c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d107      	bne.n	8006c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0a:	4b3f      	ldr	r3, [pc, #252]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d109      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e06f      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c1a:	4b3b      	ldr	r3, [pc, #236]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e067      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c2a:	4b37      	ldr	r3, [pc, #220]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f023 0203 	bic.w	r2, r3, #3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	4934      	ldr	r1, [pc, #208]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c3c:	f7fe fdd8 	bl	80057f0 <HAL_GetTick>
 8006c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c42:	e00a      	b.n	8006c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c44:	f7fe fdd4 	bl	80057f0 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e04f      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5a:	4b2b      	ldr	r3, [pc, #172]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 020c 	and.w	r2, r3, #12
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d1eb      	bne.n	8006c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c6c:	4b25      	ldr	r3, [pc, #148]	; (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d20c      	bcs.n	8006c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7a:	4b22      	ldr	r3, [pc, #136]	; (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c82:	4b20      	ldr	r3, [pc, #128]	; (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d001      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e032      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ca0:	4b19      	ldr	r3, [pc, #100]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4916      	ldr	r1, [pc, #88]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d009      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cbe:	4b12      	ldr	r3, [pc, #72]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	490e      	ldr	r1, [pc, #56]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cd2:	f000 f82d 	bl	8006d30 <HAL_RCC_GetSysClockFreq>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	091b      	lsrs	r3, r3, #4
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	490a      	ldr	r1, [pc, #40]	; (8006d0c <HAL_RCC_ClockConfig+0x1c0>)
 8006ce4:	5ccb      	ldrb	r3, [r1, r3]
 8006ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cea:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <HAL_RCC_ClockConfig+0x1c4>)
 8006cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <HAL_RCC_ClockConfig+0x1c8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fd38 	bl	8005768 <HAL_InitTick>

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40023c00 	.word	0x40023c00
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	0800a110 	.word	0x0800a110
 8006d10:	20000000 	.word	0x20000000
 8006d14:	20000004 	.word	0x20000004

08006d18 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006d1c:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <HAL_RCC_EnableCSS+0x14>)
 8006d1e:	2201      	movs	r2, #1
 8006d20:	601a      	str	r2, [r3, #0]
}
 8006d22:	bf00      	nop
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	4247004c 	.word	0x4247004c

08006d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d34:	b094      	sub	sp, #80	; 0x50
 8006d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d40:	2300      	movs	r3, #0
 8006d42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d48:	4b79      	ldr	r3, [pc, #484]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f003 030c 	and.w	r3, r3, #12
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d00d      	beq.n	8006d70 <HAL_RCC_GetSysClockFreq+0x40>
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	f200 80e1 	bhi.w	8006f1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <HAL_RCC_GetSysClockFreq+0x34>
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d003      	beq.n	8006d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d62:	e0db      	b.n	8006f1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d64:	4b73      	ldr	r3, [pc, #460]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006d68:	e0db      	b.n	8006f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d6a:	4b73      	ldr	r3, [pc, #460]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d6e:	e0d8      	b.n	8006f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d70:	4b6f      	ldr	r3, [pc, #444]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d7a:	4b6d      	ldr	r3, [pc, #436]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d063      	beq.n	8006e4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d86:	4b6a      	ldr	r3, [pc, #424]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	099b      	lsrs	r3, r3, #6
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d98:	633b      	str	r3, [r7, #48]	; 0x30
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006da2:	4622      	mov	r2, r4
 8006da4:	462b      	mov	r3, r5
 8006da6:	f04f 0000 	mov.w	r0, #0
 8006daa:	f04f 0100 	mov.w	r1, #0
 8006dae:	0159      	lsls	r1, r3, #5
 8006db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006db4:	0150      	lsls	r0, r2, #5
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4621      	mov	r1, r4
 8006dbc:	1a51      	subs	r1, r2, r1
 8006dbe:	6139      	str	r1, [r7, #16]
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006dd4:	4659      	mov	r1, fp
 8006dd6:	018b      	lsls	r3, r1, #6
 8006dd8:	4651      	mov	r1, sl
 8006dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dde:	4651      	mov	r1, sl
 8006de0:	018a      	lsls	r2, r1, #6
 8006de2:	4651      	mov	r1, sl
 8006de4:	ebb2 0801 	subs.w	r8, r2, r1
 8006de8:	4659      	mov	r1, fp
 8006dea:	eb63 0901 	sbc.w	r9, r3, r1
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e02:	4690      	mov	r8, r2
 8006e04:	4699      	mov	r9, r3
 8006e06:	4623      	mov	r3, r4
 8006e08:	eb18 0303 	adds.w	r3, r8, r3
 8006e0c:	60bb      	str	r3, [r7, #8]
 8006e0e:	462b      	mov	r3, r5
 8006e10:	eb49 0303 	adc.w	r3, r9, r3
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	f04f 0200 	mov.w	r2, #0
 8006e1a:	f04f 0300 	mov.w	r3, #0
 8006e1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e22:	4629      	mov	r1, r5
 8006e24:	024b      	lsls	r3, r1, #9
 8006e26:	4621      	mov	r1, r4
 8006e28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	024a      	lsls	r2, r1, #9
 8006e30:	4610      	mov	r0, r2
 8006e32:	4619      	mov	r1, r3
 8006e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e36:	2200      	movs	r2, #0
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e40:	f7f9 fe5c 	bl	8000afc <__aeabi_uldivmod>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4613      	mov	r3, r2
 8006e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e4c:	e058      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e4e:	4b38      	ldr	r3, [pc, #224]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	099b      	lsrs	r3, r3, #6
 8006e54:	2200      	movs	r2, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	4611      	mov	r1, r2
 8006e5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e5e:	623b      	str	r3, [r7, #32]
 8006e60:	2300      	movs	r3, #0
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
 8006e64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e68:	4642      	mov	r2, r8
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	f04f 0000 	mov.w	r0, #0
 8006e70:	f04f 0100 	mov.w	r1, #0
 8006e74:	0159      	lsls	r1, r3, #5
 8006e76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e7a:	0150      	lsls	r0, r2, #5
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4641      	mov	r1, r8
 8006e82:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e86:	4649      	mov	r1, r9
 8006e88:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ea0:	ebb2 040a 	subs.w	r4, r2, sl
 8006ea4:	eb63 050b 	sbc.w	r5, r3, fp
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	f04f 0300 	mov.w	r3, #0
 8006eb0:	00eb      	lsls	r3, r5, #3
 8006eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eb6:	00e2      	lsls	r2, r4, #3
 8006eb8:	4614      	mov	r4, r2
 8006eba:	461d      	mov	r5, r3
 8006ebc:	4643      	mov	r3, r8
 8006ebe:	18e3      	adds	r3, r4, r3
 8006ec0:	603b      	str	r3, [r7, #0]
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	eb45 0303 	adc.w	r3, r5, r3
 8006ec8:	607b      	str	r3, [r7, #4]
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	f04f 0300 	mov.w	r3, #0
 8006ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	028b      	lsls	r3, r1, #10
 8006eda:	4621      	mov	r1, r4
 8006edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	028a      	lsls	r2, r1, #10
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eea:	2200      	movs	r2, #0
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	61fa      	str	r2, [r7, #28]
 8006ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ef4:	f7f9 fe02 	bl	8000afc <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4613      	mov	r3, r2
 8006efe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f00:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	0c1b      	lsrs	r3, r3, #16
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f1a:	e002      	b.n	8006f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3750      	adds	r7, #80	; 0x50
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f2e:	bf00      	nop
 8006f30:	40023800 	.word	0x40023800
 8006f34:	00f42400 	.word	0x00f42400
 8006f38:	007a1200 	.word	0x007a1200

08006f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f40:	4b03      	ldr	r3, [pc, #12]	; (8006f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f42:	681b      	ldr	r3, [r3, #0]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	20000000 	.word	0x20000000

08006f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f58:	f7ff fff0 	bl	8006f3c <HAL_RCC_GetHCLKFreq>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	0a9b      	lsrs	r3, r3, #10
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	4903      	ldr	r1, [pc, #12]	; (8006f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f6a:	5ccb      	ldrb	r3, [r1, r3]
 8006f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40023800 	.word	0x40023800
 8006f78:	0800a120 	.word	0x0800a120

08006f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f80:	f7ff ffdc 	bl	8006f3c <HAL_RCC_GetHCLKFreq>
 8006f84:	4602      	mov	r2, r0
 8006f86:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	0b5b      	lsrs	r3, r3, #13
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	4903      	ldr	r1, [pc, #12]	; (8006fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f92:	5ccb      	ldrb	r3, [r1, r3]
 8006f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	40023800 	.word	0x40023800
 8006fa0:	0800a120 	.word	0x0800a120

08006fa4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb0:	2b80      	cmp	r3, #128	; 0x80
 8006fb2:	d104      	bne.n	8006fbe <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006fb4:	f000 f80a 	bl	8006fcc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006fb8:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006fba:	2280      	movs	r2, #128	; 0x80
 8006fbc:	701a      	strb	r2, [r3, #0]
  }
}
 8006fbe:	bf00      	nop
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40023800 	.word	0x40023800
 8006fc8:	4002380e 	.word	0x4002380e

08006fcc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e041      	b.n	8007070 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d106      	bne.n	8007006 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7fe f821 	bl	8005048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3304      	adds	r3, #4
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f000 fdad 	bl	8007b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b01      	cmp	r3, #1
 800708a:	d001      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e04e      	b.n	800712e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a23      	ldr	r2, [pc, #140]	; (800713c <HAL_TIM_Base_Start_IT+0xc4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d022      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ba:	d01d      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <HAL_TIM_Base_Start_IT+0xc8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d018      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a1e      	ldr	r2, [pc, #120]	; (8007144 <HAL_TIM_Base_Start_IT+0xcc>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d013      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1c      	ldr	r2, [pc, #112]	; (8007148 <HAL_TIM_Base_Start_IT+0xd0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00e      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1b      	ldr	r2, [pc, #108]	; (800714c <HAL_TIM_Base_Start_IT+0xd4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d009      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a19      	ldr	r2, [pc, #100]	; (8007150 <HAL_TIM_Base_Start_IT+0xd8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d004      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a18      	ldr	r2, [pc, #96]	; (8007154 <HAL_TIM_Base_Start_IT+0xdc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d111      	bne.n	800711c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b06      	cmp	r3, #6
 8007108:	d010      	beq.n	800712c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0201 	orr.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711a:	e007      	b.n	800712c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40010000 	.word	0x40010000
 8007140:	40000400 	.word	0x40000400
 8007144:	40000800 	.word	0x40000800
 8007148:	40000c00 	.word	0x40000c00
 800714c:	40010400 	.word	0x40010400
 8007150:	40014000 	.word	0x40014000
 8007154:	40001800 	.word	0x40001800

08007158 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e041      	b.n	80071ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f839 	bl	80071f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3304      	adds	r3, #4
 8007194:	4619      	mov	r1, r3
 8007196:	4610      	mov	r0, r2
 8007198:	f000 fcee 	bl	8007b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d109      	bne.n	8007230 <HAL_TIM_PWM_Start+0x24>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b01      	cmp	r3, #1
 8007226:	bf14      	ite	ne
 8007228:	2301      	movne	r3, #1
 800722a:	2300      	moveq	r3, #0
 800722c:	b2db      	uxtb	r3, r3
 800722e:	e022      	b.n	8007276 <HAL_TIM_PWM_Start+0x6a>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2b04      	cmp	r3, #4
 8007234:	d109      	bne.n	800724a <HAL_TIM_PWM_Start+0x3e>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b01      	cmp	r3, #1
 8007240:	bf14      	ite	ne
 8007242:	2301      	movne	r3, #1
 8007244:	2300      	moveq	r3, #0
 8007246:	b2db      	uxtb	r3, r3
 8007248:	e015      	b.n	8007276 <HAL_TIM_PWM_Start+0x6a>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b08      	cmp	r3, #8
 800724e:	d109      	bne.n	8007264 <HAL_TIM_PWM_Start+0x58>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b01      	cmp	r3, #1
 800725a:	bf14      	ite	ne
 800725c:	2301      	movne	r3, #1
 800725e:	2300      	moveq	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	e008      	b.n	8007276 <HAL_TIM_PWM_Start+0x6a>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b01      	cmp	r3, #1
 800726e:	bf14      	ite	ne
 8007270:	2301      	movne	r3, #1
 8007272:	2300      	moveq	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e07c      	b.n	8007378 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d104      	bne.n	800728e <HAL_TIM_PWM_Start+0x82>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800728c:	e013      	b.n	80072b6 <HAL_TIM_PWM_Start+0xaa>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b04      	cmp	r3, #4
 8007292:	d104      	bne.n	800729e <HAL_TIM_PWM_Start+0x92>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800729c:	e00b      	b.n	80072b6 <HAL_TIM_PWM_Start+0xaa>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d104      	bne.n	80072ae <HAL_TIM_PWM_Start+0xa2>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072ac:	e003      	b.n	80072b6 <HAL_TIM_PWM_Start+0xaa>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2202      	movs	r2, #2
 80072b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2201      	movs	r2, #1
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 ff44 	bl	800814c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a2d      	ldr	r2, [pc, #180]	; (8007380 <HAL_TIM_PWM_Start+0x174>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d004      	beq.n	80072d8 <HAL_TIM_PWM_Start+0xcc>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a2c      	ldr	r2, [pc, #176]	; (8007384 <HAL_TIM_PWM_Start+0x178>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d101      	bne.n	80072dc <HAL_TIM_PWM_Start+0xd0>
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <HAL_TIM_PWM_Start+0xd2>
 80072dc:	2300      	movs	r3, #0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d007      	beq.n	80072f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a22      	ldr	r2, [pc, #136]	; (8007380 <HAL_TIM_PWM_Start+0x174>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d022      	beq.n	8007342 <HAL_TIM_PWM_Start+0x136>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007304:	d01d      	beq.n	8007342 <HAL_TIM_PWM_Start+0x136>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1f      	ldr	r2, [pc, #124]	; (8007388 <HAL_TIM_PWM_Start+0x17c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d018      	beq.n	8007342 <HAL_TIM_PWM_Start+0x136>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1d      	ldr	r2, [pc, #116]	; (800738c <HAL_TIM_PWM_Start+0x180>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d013      	beq.n	8007342 <HAL_TIM_PWM_Start+0x136>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a1c      	ldr	r2, [pc, #112]	; (8007390 <HAL_TIM_PWM_Start+0x184>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00e      	beq.n	8007342 <HAL_TIM_PWM_Start+0x136>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a16      	ldr	r2, [pc, #88]	; (8007384 <HAL_TIM_PWM_Start+0x178>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d009      	beq.n	8007342 <HAL_TIM_PWM_Start+0x136>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a18      	ldr	r2, [pc, #96]	; (8007394 <HAL_TIM_PWM_Start+0x188>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <HAL_TIM_PWM_Start+0x136>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a16      	ldr	r2, [pc, #88]	; (8007398 <HAL_TIM_PWM_Start+0x18c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d111      	bne.n	8007366 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b06      	cmp	r3, #6
 8007352:	d010      	beq.n	8007376 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007364:	e007      	b.n	8007376 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0201 	orr.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40010000 	.word	0x40010000
 8007384:	40010400 	.word	0x40010400
 8007388:	40000400 	.word	0x40000400
 800738c:	40000800 	.word	0x40000800
 8007390:	40000c00 	.word	0x40000c00
 8007394:	40014000 	.word	0x40014000
 8007398:	40001800 	.word	0x40001800

0800739c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e097      	b.n	80074e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7fd fd39 	bl	8004e3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6812      	ldr	r2, [r2, #0]
 80073dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073e0:	f023 0307 	bic.w	r3, r3, #7
 80073e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f000 fbc1 	bl	8007b78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	4313      	orrs	r3, r2
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800743c:	f023 030c 	bic.w	r3, r3, #12
 8007440:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800744c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	4313      	orrs	r3, r2
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	011a      	lsls	r2, r3, #4
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	031b      	lsls	r3, r3, #12
 800746c:	4313      	orrs	r3, r2
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800747a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007482:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	011b      	lsls	r3, r3, #4
 800748e:	4313      	orrs	r3, r2
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007500:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007508:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007510:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d110      	bne.n	800753a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d102      	bne.n	8007524 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800751e:	7b7b      	ldrb	r3, [r7, #13]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d001      	beq.n	8007528 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e069      	b.n	80075fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007538:	e031      	b.n	800759e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b04      	cmp	r3, #4
 800753e:	d110      	bne.n	8007562 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d102      	bne.n	800754c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007546:	7b3b      	ldrb	r3, [r7, #12]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d001      	beq.n	8007550 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e055      	b.n	80075fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007560:	e01d      	b.n	800759e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d108      	bne.n	800757a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007568:	7bbb      	ldrb	r3, [r7, #14]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d105      	bne.n	800757a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800756e:	7b7b      	ldrb	r3, [r7, #13]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d102      	bne.n	800757a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007574:	7b3b      	ldrb	r3, [r7, #12]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d001      	beq.n	800757e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e03e      	b.n	80075fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2202      	movs	r2, #2
 8007582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2202      	movs	r2, #2
 8007592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2202      	movs	r2, #2
 800759a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_TIM_Encoder_Start+0xc4>
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b04      	cmp	r3, #4
 80075a8:	d008      	beq.n	80075bc <HAL_TIM_Encoder_Start+0xd4>
 80075aa:	e00f      	b.n	80075cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2201      	movs	r2, #1
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fdc9 	bl	800814c <TIM_CCxChannelCmd>
      break;
 80075ba:	e016      	b.n	80075ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2201      	movs	r2, #1
 80075c2:	2104      	movs	r1, #4
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 fdc1 	bl	800814c <TIM_CCxChannelCmd>
      break;
 80075ca:	e00e      	b.n	80075ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2201      	movs	r2, #1
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fdb9 	bl	800814c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2201      	movs	r2, #1
 80075e0:	2104      	movs	r1, #4
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 fdb2 	bl	800814c <TIM_CCxChannelCmd>
      break;
 80075e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f042 0201 	orr.w	r2, r2, #1
 80075f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b02      	cmp	r3, #2
 8007618:	d122      	bne.n	8007660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b02      	cmp	r3, #2
 8007626:	d11b      	bne.n	8007660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f06f 0202 	mvn.w	r2, #2
 8007630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa77 	bl	8007b3a <HAL_TIM_IC_CaptureCallback>
 800764c:	e005      	b.n	800765a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fa69 	bl	8007b26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fa7a 	bl	8007b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b04      	cmp	r3, #4
 800766c:	d122      	bne.n	80076b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b04      	cmp	r3, #4
 800767a:	d11b      	bne.n	80076b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0204 	mvn.w	r2, #4
 8007684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2202      	movs	r2, #2
 800768a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa4d 	bl	8007b3a <HAL_TIM_IC_CaptureCallback>
 80076a0:	e005      	b.n	80076ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa3f 	bl	8007b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fa50 	bl	8007b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b08      	cmp	r3, #8
 80076c0:	d122      	bne.n	8007708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d11b      	bne.n	8007708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f06f 0208 	mvn.w	r2, #8
 80076d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2204      	movs	r2, #4
 80076de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fa23 	bl	8007b3a <HAL_TIM_IC_CaptureCallback>
 80076f4:	e005      	b.n	8007702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fa15 	bl	8007b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fa26 	bl	8007b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f003 0310 	and.w	r3, r3, #16
 8007712:	2b10      	cmp	r3, #16
 8007714:	d122      	bne.n	800775c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f003 0310 	and.w	r3, r3, #16
 8007720:	2b10      	cmp	r3, #16
 8007722:	d11b      	bne.n	800775c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f06f 0210 	mvn.w	r2, #16
 800772c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2208      	movs	r2, #8
 8007732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f9f9 	bl	8007b3a <HAL_TIM_IC_CaptureCallback>
 8007748:	e005      	b.n	8007756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f9eb 	bl	8007b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f9fc 	bl	8007b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b01      	cmp	r3, #1
 8007768:	d10e      	bne.n	8007788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b01      	cmp	r3, #1
 8007776:	d107      	bne.n	8007788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f06f 0201 	mvn.w	r2, #1
 8007780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7f9 fef4 	bl	8001570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007792:	2b80      	cmp	r3, #128	; 0x80
 8007794:	d10e      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a0:	2b80      	cmp	r3, #128	; 0x80
 80077a2:	d107      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fd78 	bl	80082a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	d10e      	bne.n	80077e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077cc:	2b40      	cmp	r3, #64	; 0x40
 80077ce:	d107      	bne.n	80077e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f9c1 	bl	8007b62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b20      	cmp	r3, #32
 80077ec:	d10e      	bne.n	800780c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d107      	bne.n	800780c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f06f 0220 	mvn.w	r2, #32
 8007804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fd42 	bl	8008290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800782a:	2b01      	cmp	r3, #1
 800782c:	d101      	bne.n	8007832 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800782e:	2302      	movs	r3, #2
 8007830:	e0ae      	b.n	8007990 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b0c      	cmp	r3, #12
 800783e:	f200 809f 	bhi.w	8007980 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007842:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	0800787d 	.word	0x0800787d
 800784c:	08007981 	.word	0x08007981
 8007850:	08007981 	.word	0x08007981
 8007854:	08007981 	.word	0x08007981
 8007858:	080078bd 	.word	0x080078bd
 800785c:	08007981 	.word	0x08007981
 8007860:	08007981 	.word	0x08007981
 8007864:	08007981 	.word	0x08007981
 8007868:	080078ff 	.word	0x080078ff
 800786c:	08007981 	.word	0x08007981
 8007870:	08007981 	.word	0x08007981
 8007874:	08007981 	.word	0x08007981
 8007878:	0800793f 	.word	0x0800793f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68b9      	ldr	r1, [r7, #8]
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fa18 	bl	8007cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699a      	ldr	r2, [r3, #24]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0208 	orr.w	r2, r2, #8
 8007896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0204 	bic.w	r2, r2, #4
 80078a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6999      	ldr	r1, [r3, #24]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	691a      	ldr	r2, [r3, #16]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	619a      	str	r2, [r3, #24]
      break;
 80078ba:	e064      	b.n	8007986 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68b9      	ldr	r1, [r7, #8]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 fa68 	bl	8007d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	699a      	ldr	r2, [r3, #24]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699a      	ldr	r2, [r3, #24]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6999      	ldr	r1, [r3, #24]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	021a      	lsls	r2, r3, #8
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	619a      	str	r2, [r3, #24]
      break;
 80078fc:	e043      	b.n	8007986 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68b9      	ldr	r1, [r7, #8]
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fabd 	bl	8007e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69da      	ldr	r2, [r3, #28]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 0208 	orr.w	r2, r2, #8
 8007918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69da      	ldr	r2, [r3, #28]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0204 	bic.w	r2, r2, #4
 8007928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69d9      	ldr	r1, [r3, #28]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	691a      	ldr	r2, [r3, #16]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	61da      	str	r2, [r3, #28]
      break;
 800793c:	e023      	b.n	8007986 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fb11 	bl	8007f6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69da      	ldr	r2, [r3, #28]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69da      	ldr	r2, [r3, #28]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	69d9      	ldr	r1, [r3, #28]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	021a      	lsls	r2, r3, #8
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	61da      	str	r2, [r3, #28]
      break;
 800797e:	e002      	b.n	8007986 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	75fb      	strb	r3, [r7, #23]
      break;
 8007984:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800798e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d101      	bne.n	80079b4 <HAL_TIM_ConfigClockSource+0x1c>
 80079b0:	2302      	movs	r3, #2
 80079b2:	e0b4      	b.n	8007b1e <HAL_TIM_ConfigClockSource+0x186>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ec:	d03e      	beq.n	8007a6c <HAL_TIM_ConfigClockSource+0xd4>
 80079ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f2:	f200 8087 	bhi.w	8007b04 <HAL_TIM_ConfigClockSource+0x16c>
 80079f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079fa:	f000 8086 	beq.w	8007b0a <HAL_TIM_ConfigClockSource+0x172>
 80079fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a02:	d87f      	bhi.n	8007b04 <HAL_TIM_ConfigClockSource+0x16c>
 8007a04:	2b70      	cmp	r3, #112	; 0x70
 8007a06:	d01a      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0xa6>
 8007a08:	2b70      	cmp	r3, #112	; 0x70
 8007a0a:	d87b      	bhi.n	8007b04 <HAL_TIM_ConfigClockSource+0x16c>
 8007a0c:	2b60      	cmp	r3, #96	; 0x60
 8007a0e:	d050      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x11a>
 8007a10:	2b60      	cmp	r3, #96	; 0x60
 8007a12:	d877      	bhi.n	8007b04 <HAL_TIM_ConfigClockSource+0x16c>
 8007a14:	2b50      	cmp	r3, #80	; 0x50
 8007a16:	d03c      	beq.n	8007a92 <HAL_TIM_ConfigClockSource+0xfa>
 8007a18:	2b50      	cmp	r3, #80	; 0x50
 8007a1a:	d873      	bhi.n	8007b04 <HAL_TIM_ConfigClockSource+0x16c>
 8007a1c:	2b40      	cmp	r3, #64	; 0x40
 8007a1e:	d058      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x13a>
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	d86f      	bhi.n	8007b04 <HAL_TIM_ConfigClockSource+0x16c>
 8007a24:	2b30      	cmp	r3, #48	; 0x30
 8007a26:	d064      	beq.n	8007af2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a28:	2b30      	cmp	r3, #48	; 0x30
 8007a2a:	d86b      	bhi.n	8007b04 <HAL_TIM_ConfigClockSource+0x16c>
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	d060      	beq.n	8007af2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d867      	bhi.n	8007b04 <HAL_TIM_ConfigClockSource+0x16c>
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d05c      	beq.n	8007af2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a38:	2b10      	cmp	r3, #16
 8007a3a:	d05a      	beq.n	8007af2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a3c:	e062      	b.n	8007b04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	6899      	ldr	r1, [r3, #8]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	f000 fb5d 	bl	800810c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	609a      	str	r2, [r3, #8]
      break;
 8007a6a:	e04f      	b.n	8007b0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	6899      	ldr	r1, [r3, #8]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f000 fb46 	bl	800810c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689a      	ldr	r2, [r3, #8]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a8e:	609a      	str	r2, [r3, #8]
      break;
 8007a90:	e03c      	b.n	8007b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	6859      	ldr	r1, [r3, #4]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f000 faba 	bl	8008018 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2150      	movs	r1, #80	; 0x50
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fb13 	bl	80080d6 <TIM_ITRx_SetConfig>
      break;
 8007ab0:	e02c      	b.n	8007b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	6859      	ldr	r1, [r3, #4]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f000 fad9 	bl	8008076 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2160      	movs	r1, #96	; 0x60
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fb03 	bl	80080d6 <TIM_ITRx_SetConfig>
      break;
 8007ad0:	e01c      	b.n	8007b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	6859      	ldr	r1, [r3, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f000 fa9a 	bl	8008018 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2140      	movs	r1, #64	; 0x40
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 faf3 	bl	80080d6 <TIM_ITRx_SetConfig>
      break;
 8007af0:	e00c      	b.n	8007b0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4619      	mov	r1, r3
 8007afc:	4610      	mov	r0, r2
 8007afe:	f000 faea 	bl	80080d6 <TIM_ITRx_SetConfig>
      break;
 8007b02:	e003      	b.n	8007b0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	73fb      	strb	r3, [r7, #15]
      break;
 8007b08:	e000      	b.n	8007b0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
	...

08007b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a40      	ldr	r2, [pc, #256]	; (8007c8c <TIM_Base_SetConfig+0x114>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d013      	beq.n	8007bb8 <TIM_Base_SetConfig+0x40>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b96:	d00f      	beq.n	8007bb8 <TIM_Base_SetConfig+0x40>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a3d      	ldr	r2, [pc, #244]	; (8007c90 <TIM_Base_SetConfig+0x118>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00b      	beq.n	8007bb8 <TIM_Base_SetConfig+0x40>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a3c      	ldr	r2, [pc, #240]	; (8007c94 <TIM_Base_SetConfig+0x11c>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d007      	beq.n	8007bb8 <TIM_Base_SetConfig+0x40>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a3b      	ldr	r2, [pc, #236]	; (8007c98 <TIM_Base_SetConfig+0x120>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d003      	beq.n	8007bb8 <TIM_Base_SetConfig+0x40>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a3a      	ldr	r2, [pc, #232]	; (8007c9c <TIM_Base_SetConfig+0x124>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d108      	bne.n	8007bca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a2f      	ldr	r2, [pc, #188]	; (8007c8c <TIM_Base_SetConfig+0x114>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d02b      	beq.n	8007c2a <TIM_Base_SetConfig+0xb2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd8:	d027      	beq.n	8007c2a <TIM_Base_SetConfig+0xb2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a2c      	ldr	r2, [pc, #176]	; (8007c90 <TIM_Base_SetConfig+0x118>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d023      	beq.n	8007c2a <TIM_Base_SetConfig+0xb2>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a2b      	ldr	r2, [pc, #172]	; (8007c94 <TIM_Base_SetConfig+0x11c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d01f      	beq.n	8007c2a <TIM_Base_SetConfig+0xb2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a2a      	ldr	r2, [pc, #168]	; (8007c98 <TIM_Base_SetConfig+0x120>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d01b      	beq.n	8007c2a <TIM_Base_SetConfig+0xb2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a29      	ldr	r2, [pc, #164]	; (8007c9c <TIM_Base_SetConfig+0x124>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d017      	beq.n	8007c2a <TIM_Base_SetConfig+0xb2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a28      	ldr	r2, [pc, #160]	; (8007ca0 <TIM_Base_SetConfig+0x128>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d013      	beq.n	8007c2a <TIM_Base_SetConfig+0xb2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a27      	ldr	r2, [pc, #156]	; (8007ca4 <TIM_Base_SetConfig+0x12c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00f      	beq.n	8007c2a <TIM_Base_SetConfig+0xb2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a26      	ldr	r2, [pc, #152]	; (8007ca8 <TIM_Base_SetConfig+0x130>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d00b      	beq.n	8007c2a <TIM_Base_SetConfig+0xb2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a25      	ldr	r2, [pc, #148]	; (8007cac <TIM_Base_SetConfig+0x134>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d007      	beq.n	8007c2a <TIM_Base_SetConfig+0xb2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a24      	ldr	r2, [pc, #144]	; (8007cb0 <TIM_Base_SetConfig+0x138>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d003      	beq.n	8007c2a <TIM_Base_SetConfig+0xb2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a23      	ldr	r2, [pc, #140]	; (8007cb4 <TIM_Base_SetConfig+0x13c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d108      	bne.n	8007c3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a0a      	ldr	r2, [pc, #40]	; (8007c8c <TIM_Base_SetConfig+0x114>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d003      	beq.n	8007c70 <TIM_Base_SetConfig+0xf8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a0c      	ldr	r2, [pc, #48]	; (8007c9c <TIM_Base_SetConfig+0x124>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d103      	bne.n	8007c78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	615a      	str	r2, [r3, #20]
}
 8007c7e:	bf00      	nop
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	40010000 	.word	0x40010000
 8007c90:	40000400 	.word	0x40000400
 8007c94:	40000800 	.word	0x40000800
 8007c98:	40000c00 	.word	0x40000c00
 8007c9c:	40010400 	.word	0x40010400
 8007ca0:	40014000 	.word	0x40014000
 8007ca4:	40014400 	.word	0x40014400
 8007ca8:	40014800 	.word	0x40014800
 8007cac:	40001800 	.word	0x40001800
 8007cb0:	40001c00 	.word	0x40001c00
 8007cb4:	40002000 	.word	0x40002000

08007cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	f023 0201 	bic.w	r2, r3, #1
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0303 	bic.w	r3, r3, #3
 8007cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f023 0302 	bic.w	r3, r3, #2
 8007d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a20      	ldr	r2, [pc, #128]	; (8007d90 <TIM_OC1_SetConfig+0xd8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d003      	beq.n	8007d1c <TIM_OC1_SetConfig+0x64>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a1f      	ldr	r2, [pc, #124]	; (8007d94 <TIM_OC1_SetConfig+0xdc>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d10c      	bne.n	8007d36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f023 0308 	bic.w	r3, r3, #8
 8007d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f023 0304 	bic.w	r3, r3, #4
 8007d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a15      	ldr	r2, [pc, #84]	; (8007d90 <TIM_OC1_SetConfig+0xd8>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d003      	beq.n	8007d46 <TIM_OC1_SetConfig+0x8e>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a14      	ldr	r2, [pc, #80]	; (8007d94 <TIM_OC1_SetConfig+0xdc>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d111      	bne.n	8007d6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	621a      	str	r2, [r3, #32]
}
 8007d84:	bf00      	nop
 8007d86:	371c      	adds	r7, #28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	40010000 	.word	0x40010000
 8007d94:	40010400 	.word	0x40010400

08007d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	f023 0210 	bic.w	r2, r3, #16
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	f023 0320 	bic.w	r3, r3, #32
 8007de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	011b      	lsls	r3, r3, #4
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a22      	ldr	r2, [pc, #136]	; (8007e7c <TIM_OC2_SetConfig+0xe4>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d003      	beq.n	8007e00 <TIM_OC2_SetConfig+0x68>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a21      	ldr	r2, [pc, #132]	; (8007e80 <TIM_OC2_SetConfig+0xe8>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d10d      	bne.n	8007e1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	011b      	lsls	r3, r3, #4
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a17      	ldr	r2, [pc, #92]	; (8007e7c <TIM_OC2_SetConfig+0xe4>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d003      	beq.n	8007e2c <TIM_OC2_SetConfig+0x94>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a16      	ldr	r2, [pc, #88]	; (8007e80 <TIM_OC2_SetConfig+0xe8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d113      	bne.n	8007e54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	621a      	str	r2, [r3, #32]
}
 8007e6e:	bf00      	nop
 8007e70:	371c      	adds	r7, #28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	40010000 	.word	0x40010000
 8007e80:	40010400 	.word	0x40010400

08007e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0303 	bic.w	r3, r3, #3
 8007eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a21      	ldr	r2, [pc, #132]	; (8007f64 <TIM_OC3_SetConfig+0xe0>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d003      	beq.n	8007eea <TIM_OC3_SetConfig+0x66>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a20      	ldr	r2, [pc, #128]	; (8007f68 <TIM_OC3_SetConfig+0xe4>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d10d      	bne.n	8007f06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a16      	ldr	r2, [pc, #88]	; (8007f64 <TIM_OC3_SetConfig+0xe0>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d003      	beq.n	8007f16 <TIM_OC3_SetConfig+0x92>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <TIM_OC3_SetConfig+0xe4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d113      	bne.n	8007f3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	621a      	str	r2, [r3, #32]
}
 8007f58:	bf00      	nop
 8007f5a:	371c      	adds	r7, #28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	40010000 	.word	0x40010000
 8007f68:	40010400 	.word	0x40010400

08007f6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	021b      	lsls	r3, r3, #8
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	031b      	lsls	r3, r3, #12
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a12      	ldr	r2, [pc, #72]	; (8008010 <TIM_OC4_SetConfig+0xa4>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d003      	beq.n	8007fd4 <TIM_OC4_SetConfig+0x68>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a11      	ldr	r2, [pc, #68]	; (8008014 <TIM_OC4_SetConfig+0xa8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d109      	bne.n	8007fe8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	019b      	lsls	r3, r3, #6
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	621a      	str	r2, [r3, #32]
}
 8008002:	bf00      	nop
 8008004:	371c      	adds	r7, #28
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40010000 	.word	0x40010000
 8008014:	40010400 	.word	0x40010400

08008018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	f023 0201 	bic.w	r2, r3, #1
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	011b      	lsls	r3, r3, #4
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	4313      	orrs	r3, r2
 800804c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f023 030a 	bic.w	r3, r3, #10
 8008054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	4313      	orrs	r3, r2
 800805c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	621a      	str	r2, [r3, #32]
}
 800806a:	bf00      	nop
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008076:	b480      	push	{r7}
 8008078:	b087      	sub	sp, #28
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	f023 0210 	bic.w	r2, r3, #16
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	031b      	lsls	r3, r3, #12
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	621a      	str	r2, [r3, #32]
}
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	f043 0307 	orr.w	r3, r3, #7
 80080f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	609a      	str	r2, [r3, #8]
}
 8008100:	bf00      	nop
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	021a      	lsls	r2, r3, #8
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	431a      	orrs	r2, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	4313      	orrs	r3, r2
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	4313      	orrs	r3, r2
 8008138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	609a      	str	r2, [r3, #8]
}
 8008140:	bf00      	nop
 8008142:	371c      	adds	r7, #28
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f003 031f 	and.w	r3, r3, #31
 800815e:	2201      	movs	r2, #1
 8008160:	fa02 f303 	lsl.w	r3, r2, r3
 8008164:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a1a      	ldr	r2, [r3, #32]
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	43db      	mvns	r3, r3
 800816e:	401a      	ands	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6a1a      	ldr	r2, [r3, #32]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f003 031f 	and.w	r3, r3, #31
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	fa01 f303 	lsl.w	r3, r1, r3
 8008184:	431a      	orrs	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	621a      	str	r2, [r3, #32]
}
 800818a:	bf00      	nop
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
	...

08008198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d101      	bne.n	80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081ac:	2302      	movs	r3, #2
 80081ae:	e05a      	b.n	8008266 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a21      	ldr	r2, [pc, #132]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d022      	beq.n	800823a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081fc:	d01d      	beq.n	800823a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a1d      	ldr	r2, [pc, #116]	; (8008278 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d018      	beq.n	800823a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a1b      	ldr	r2, [pc, #108]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d013      	beq.n	800823a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a1a      	ldr	r2, [pc, #104]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d00e      	beq.n	800823a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a18      	ldr	r2, [pc, #96]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d009      	beq.n	800823a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a17      	ldr	r2, [pc, #92]	; (8008288 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d004      	beq.n	800823a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a15      	ldr	r2, [pc, #84]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d10c      	bne.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	4313      	orrs	r3, r2
 800824a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	40010000 	.word	0x40010000
 8008278:	40000400 	.word	0x40000400
 800827c:	40000800 	.word	0x40000800
 8008280:	40000c00 	.word	0x40000c00
 8008284:	40010400 	.word	0x40010400
 8008288:	40014000 	.word	0x40014000
 800828c:	40001800 	.word	0x40001800

08008290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e03f      	b.n	800834a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7fc ffb0 	bl	8005244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2224      	movs	r2, #36	; 0x24
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68da      	ldr	r2, [r3, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 ff43 	bl	8009188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	691a      	ldr	r2, [r3, #16]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	695a      	ldr	r2, [r3, #20]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68da      	ldr	r2, [r3, #12]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2220      	movs	r2, #32
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
	...

08008354 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08c      	sub	sp, #48	; 0x30
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	4613      	mov	r3, r2
 8008360:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b20      	cmp	r3, #32
 800836c:	d165      	bne.n	800843a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <HAL_UART_Transmit_DMA+0x26>
 8008374:	88fb      	ldrh	r3, [r7, #6]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e05e      	b.n	800843c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008384:	2b01      	cmp	r3, #1
 8008386:	d101      	bne.n	800838c <HAL_UART_Transmit_DMA+0x38>
 8008388:	2302      	movs	r3, #2
 800838a:	e057      	b.n	800843c <HAL_UART_Transmit_DMA+0xe8>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	88fa      	ldrh	r2, [r7, #6]
 800839e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	88fa      	ldrh	r2, [r7, #6]
 80083a4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2221      	movs	r2, #33	; 0x21
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b8:	4a22      	ldr	r2, [pc, #136]	; (8008444 <HAL_UART_Transmit_DMA+0xf0>)
 80083ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c0:	4a21      	ldr	r2, [pc, #132]	; (8008448 <HAL_UART_Transmit_DMA+0xf4>)
 80083c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c8:	4a20      	ldr	r2, [pc, #128]	; (800844c <HAL_UART_Transmit_DMA+0xf8>)
 80083ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d0:	2200      	movs	r2, #0
 80083d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80083d4:	f107 0308 	add.w	r3, r7, #8
 80083d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	6819      	ldr	r1, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3304      	adds	r3, #4
 80083e8:	461a      	mov	r2, r3
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	f7fd fbcc 	bl	8005b88 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083f8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3314      	adds	r3, #20
 8008408:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	e853 3f00 	ldrex	r3, [r3]
 8008410:	617b      	str	r3, [r7, #20]
   return(result);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008418:	62bb      	str	r3, [r7, #40]	; 0x28
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3314      	adds	r3, #20
 8008420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008422:	627a      	str	r2, [r7, #36]	; 0x24
 8008424:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	6a39      	ldr	r1, [r7, #32]
 8008428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800842a:	e841 2300 	strex	r3, r2, [r1]
 800842e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1e5      	bne.n	8008402 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	e000      	b.n	800843c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800843a:	2302      	movs	r3, #2
  }
}
 800843c:	4618      	mov	r0, r3
 800843e:	3730      	adds	r7, #48	; 0x30
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	08008a21 	.word	0x08008a21
 8008448:	08008abb 	.word	0x08008abb
 800844c:	08008c33 	.word	0x08008c33

08008450 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b20      	cmp	r3, #32
 8008468:	d11d      	bne.n	80084a6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d002      	beq.n	8008476 <HAL_UART_Receive_DMA+0x26>
 8008470:	88fb      	ldrh	r3, [r7, #6]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e016      	b.n	80084a8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008480:	2b01      	cmp	r3, #1
 8008482:	d101      	bne.n	8008488 <HAL_UART_Receive_DMA+0x38>
 8008484:	2302      	movs	r3, #2
 8008486:	e00f      	b.n	80084a8 <HAL_UART_Receive_DMA+0x58>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	461a      	mov	r2, r3
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 fc13 	bl	8008cc8 <UART_Start_Receive_DMA>
 80084a2:	4603      	mov	r3, r0
 80084a4:	e000      	b.n	80084a8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80084a6:	2302      	movs	r3, #2
  }
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b0ba      	sub	sp, #232	; 0xe8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80084dc:	2300      	movs	r3, #0
 80084de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e6:	f003 030f 	and.w	r3, r3, #15
 80084ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80084ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10f      	bne.n	8008516 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <HAL_UART_IRQHandler+0x66>
 8008502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fd7f 	bl	8009012 <UART_Receive_IT>
      return;
 8008514:	e256      	b.n	80089c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 80de 	beq.w	80086dc <HAL_UART_IRQHandler+0x22c>
 8008520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800852c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008530:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 80d1 	beq.w	80086dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800853a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00b      	beq.n	800855e <HAL_UART_IRQHandler+0xae>
 8008546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800854a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854e:	2b00      	cmp	r3, #0
 8008550:	d005      	beq.n	800855e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	f043 0201 	orr.w	r2, r3, #1
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800855e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00b      	beq.n	8008582 <HAL_UART_IRQHandler+0xd2>
 800856a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	f043 0202 	orr.w	r2, r3, #2
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00b      	beq.n	80085a6 <HAL_UART_IRQHandler+0xf6>
 800858e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d005      	beq.n	80085a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859e:	f043 0204 	orr.w	r2, r3, #4
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80085a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d011      	beq.n	80085d6 <HAL_UART_IRQHandler+0x126>
 80085b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b6:	f003 0320 	and.w	r3, r3, #32
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d105      	bne.n	80085ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80085be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f043 0208 	orr.w	r2, r3, #8
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 81ed 	beq.w	80089ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d008      	beq.n	80085fe <HAL_UART_IRQHandler+0x14e>
 80085ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fd0a 	bl	8009012 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008608:	2b40      	cmp	r3, #64	; 0x40
 800860a:	bf0c      	ite	eq
 800860c:	2301      	moveq	r3, #1
 800860e:	2300      	movne	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	f003 0308 	and.w	r3, r3, #8
 800861e:	2b00      	cmp	r3, #0
 8008620:	d103      	bne.n	800862a <HAL_UART_IRQHandler+0x17a>
 8008622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008626:	2b00      	cmp	r3, #0
 8008628:	d04f      	beq.n	80086ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fc12 	bl	8008e54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863a:	2b40      	cmp	r3, #64	; 0x40
 800863c:	d141      	bne.n	80086c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3314      	adds	r3, #20
 8008644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800865c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3314      	adds	r3, #20
 8008666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800866a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800866e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1d9      	bne.n	800863e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868e:	2b00      	cmp	r3, #0
 8008690:	d013      	beq.n	80086ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008696:	4a7d      	ldr	r2, [pc, #500]	; (800888c <HAL_UART_IRQHandler+0x3dc>)
 8008698:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fd fb3a 	bl	8005d18 <HAL_DMA_Abort_IT>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d016      	beq.n	80086d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086b4:	4610      	mov	r0, r2
 80086b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b8:	e00e      	b.n	80086d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f99a 	bl	80089f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c0:	e00a      	b.n	80086d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f996 	bl	80089f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c8:	e006      	b.n	80086d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f992 	bl	80089f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80086d6:	e170      	b.n	80089ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d8:	bf00      	nop
    return;
 80086da:	e16e      	b.n	80089ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	f040 814a 	bne.w	800897a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ea:	f003 0310 	and.w	r3, r3, #16
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 8143 	beq.w	800897a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80086f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f8:	f003 0310 	and.w	r3, r3, #16
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 813c 	beq.w	800897a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008702:	2300      	movs	r3, #0
 8008704:	60bb      	str	r3, [r7, #8]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60bb      	str	r3, [r7, #8]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	60bb      	str	r3, [r7, #8]
 8008716:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008722:	2b40      	cmp	r3, #64	; 0x40
 8008724:	f040 80b4 	bne.w	8008890 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008734:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 8140 	beq.w	80089be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008746:	429a      	cmp	r2, r3
 8008748:	f080 8139 	bcs.w	80089be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008752:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800875e:	f000 8088 	beq.w	8008872 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	330c      	adds	r3, #12
 8008768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800877c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	330c      	adds	r3, #12
 800878a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800878e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800879a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1d9      	bne.n	8008762 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3314      	adds	r3, #20
 80087b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087c0:	f023 0301 	bic.w	r3, r3, #1
 80087c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3314      	adds	r3, #20
 80087ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e1      	bne.n	80087ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3314      	adds	r3, #20
 80087f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3314      	adds	r3, #20
 800880a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800880e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008810:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008814:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800881c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e3      	bne.n	80087ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	330c      	adds	r3, #12
 8008836:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008842:	f023 0310 	bic.w	r3, r3, #16
 8008846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	330c      	adds	r3, #12
 8008850:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008854:	65ba      	str	r2, [r7, #88]	; 0x58
 8008856:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800885a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e3      	bne.n	8008830 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886c:	4618      	mov	r0, r3
 800886e:	f7fd f9e3 	bl	8005c38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800887a:	b29b      	uxth	r3, r3
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	b29b      	uxth	r3, r3
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f8c0 	bl	8008a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008888:	e099      	b.n	80089be <HAL_UART_IRQHandler+0x50e>
 800888a:	bf00      	nop
 800888c:	08008f1b 	.word	0x08008f1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008898:	b29b      	uxth	r3, r3
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 808b 	beq.w	80089c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80088ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 8086 	beq.w	80089c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	330c      	adds	r3, #12
 80088bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	330c      	adds	r3, #12
 80088d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80088da:	647a      	str	r2, [r7, #68]	; 0x44
 80088dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e3      	bne.n	80088b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3314      	adds	r3, #20
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	623b      	str	r3, [r7, #32]
   return(result);
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	f023 0301 	bic.w	r3, r3, #1
 8008904:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3314      	adds	r3, #20
 800890e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008912:	633a      	str	r2, [r7, #48]	; 0x30
 8008914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e3      	bne.n	80088ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2220      	movs	r2, #32
 800892a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	330c      	adds	r3, #12
 800893a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	60fb      	str	r3, [r7, #12]
   return(result);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0310 	bic.w	r3, r3, #16
 800894a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	330c      	adds	r3, #12
 8008954:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008958:	61fa      	str	r2, [r7, #28]
 800895a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	69b9      	ldr	r1, [r7, #24]
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	617b      	str	r3, [r7, #20]
   return(result);
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e3      	bne.n	8008934 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800896c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f848 	bl	8008a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008978:	e023      	b.n	80089c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800897a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008982:	2b00      	cmp	r3, #0
 8008984:	d009      	beq.n	800899a <HAL_UART_IRQHandler+0x4ea>
 8008986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800898a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fad5 	bl	8008f42 <UART_Transmit_IT>
    return;
 8008998:	e014      	b.n	80089c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800899a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00e      	beq.n	80089c4 <HAL_UART_IRQHandler+0x514>
 80089a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d008      	beq.n	80089c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fb15 	bl	8008fe2 <UART_EndTransmit_IT>
    return;
 80089b8:	e004      	b.n	80089c4 <HAL_UART_IRQHandler+0x514>
    return;
 80089ba:	bf00      	nop
 80089bc:	e002      	b.n	80089c4 <HAL_UART_IRQHandler+0x514>
      return;
 80089be:	bf00      	nop
 80089c0:	e000      	b.n	80089c4 <HAL_UART_IRQHandler+0x514>
      return;
 80089c2:	bf00      	nop
  }
}
 80089c4:	37e8      	adds	r7, #232	; 0xe8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop

080089cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b090      	sub	sp, #64	; 0x40
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d137      	bne.n	8008aac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3e:	2200      	movs	r2, #0
 8008a40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3314      	adds	r3, #20
 8008a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	623b      	str	r3, [r7, #32]
   return(result);
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a62:	633a      	str	r2, [r7, #48]	; 0x30
 8008a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a6a:	e841 2300 	strex	r3, r2, [r1]
 8008a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1e5      	bne.n	8008a42 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	330c      	adds	r3, #12
 8008a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	330c      	adds	r3, #12
 8008a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a96:	61fa      	str	r2, [r7, #28]
 8008a98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9a:	69b9      	ldr	r1, [r7, #24]
 8008a9c:	69fa      	ldr	r2, [r7, #28]
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1e5      	bne.n	8008a76 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008aaa:	e002      	b.n	8008ab2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008aac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008aae:	f7fa ff9f 	bl	80039f0 <HAL_UART_TxCpltCallback>
}
 8008ab2:	bf00      	nop
 8008ab4:	3740      	adds	r7, #64	; 0x40
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f7ff ff7f 	bl	80089cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ace:	bf00      	nop
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b09c      	sub	sp, #112	; 0x70
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d172      	bne.n	8008bd8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af4:	2200      	movs	r2, #0
 8008af6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	330c      	adds	r3, #12
 8008afe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	330c      	adds	r3, #12
 8008b16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b18:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e5      	bne.n	8008af8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3314      	adds	r3, #20
 8008b32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3e:	f023 0301 	bic.w	r3, r3, #1
 8008b42:	667b      	str	r3, [r7, #100]	; 0x64
 8008b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3314      	adds	r3, #20
 8008b4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b4c:	647a      	str	r2, [r7, #68]	; 0x44
 8008b4e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e5      	bne.n	8008b2c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3314      	adds	r3, #20
 8008b66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	e853 3f00 	ldrex	r3, [r3]
 8008b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b76:	663b      	str	r3, [r7, #96]	; 0x60
 8008b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3314      	adds	r3, #20
 8008b7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b80:	633a      	str	r2, [r7, #48]	; 0x30
 8008b82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b88:	e841 2300 	strex	r3, r2, [r1]
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1e5      	bne.n	8008b60 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b96:	2220      	movs	r2, #32
 8008b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d119      	bne.n	8008bd8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	330c      	adds	r3, #12
 8008baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	e853 3f00 	ldrex	r3, [r3]
 8008bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0310 	bic.w	r3, r3, #16
 8008bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	330c      	adds	r3, #12
 8008bc2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bc4:	61fa      	str	r2, [r7, #28]
 8008bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc8:	69b9      	ldr	r1, [r7, #24]
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	e841 2300 	strex	r3, r2, [r1]
 8008bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1e5      	bne.n	8008ba4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d106      	bne.n	8008bee <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008be4:	4619      	mov	r1, r3
 8008be6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008be8:	f7ff ff0e 	bl	8008a08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bec:	e002      	b.n	8008bf4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008bee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008bf0:	f7fa ff10 	bl	8003a14 <HAL_UART_RxCpltCallback>
}
 8008bf4:	bf00      	nop
 8008bf6:	3770      	adds	r7, #112	; 0x70
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d108      	bne.n	8008c24 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c16:	085b      	lsrs	r3, r3, #1
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f7ff fef3 	bl	8008a08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c22:	e002      	b.n	8008c2a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7ff fedb 	bl	80089e0 <HAL_UART_RxHalfCpltCallback>
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c42:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4e:	2b80      	cmp	r3, #128	; 0x80
 8008c50:	bf0c      	ite	eq
 8008c52:	2301      	moveq	r3, #1
 8008c54:	2300      	movne	r3, #0
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b21      	cmp	r3, #33	; 0x21
 8008c64:	d108      	bne.n	8008c78 <UART_DMAError+0x46>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d005      	beq.n	8008c78 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008c72:	68b8      	ldr	r0, [r7, #8]
 8008c74:	f000 f8c6 	bl	8008e04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c82:	2b40      	cmp	r3, #64	; 0x40
 8008c84:	bf0c      	ite	eq
 8008c86:	2301      	moveq	r3, #1
 8008c88:	2300      	movne	r3, #0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b22      	cmp	r3, #34	; 0x22
 8008c98:	d108      	bne.n	8008cac <UART_DMAError+0x7a>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d005      	beq.n	8008cac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008ca6:	68b8      	ldr	r0, [r7, #8]
 8008ca8:	f000 f8d4 	bl	8008e54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb0:	f043 0210 	orr.w	r2, r3, #16
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cb8:	68b8      	ldr	r0, [r7, #8]
 8008cba:	f7ff fe9b 	bl	80089f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cbe:	bf00      	nop
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
	...

08008cc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b098      	sub	sp, #96	; 0x60
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	88fa      	ldrh	r2, [r7, #6]
 8008ce0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2222      	movs	r2, #34	; 0x22
 8008cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf4:	4a40      	ldr	r2, [pc, #256]	; (8008df8 <UART_Start_Receive_DMA+0x130>)
 8008cf6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	4a3f      	ldr	r2, [pc, #252]	; (8008dfc <UART_Start_Receive_DMA+0x134>)
 8008cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	4a3e      	ldr	r2, [pc, #248]	; (8008e00 <UART_Start_Receive_DMA+0x138>)
 8008d06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008d10:	f107 0308 	add.w	r3, r7, #8
 8008d14:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4619      	mov	r1, r3
 8008d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	88fb      	ldrh	r3, [r7, #6]
 8008d28:	f7fc ff2e 	bl	8005b88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	613b      	str	r3, [r7, #16]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	613b      	str	r3, [r7, #16]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	613b      	str	r3, [r7, #16]
 8008d40:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d019      	beq.n	8008d86 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	330c      	adds	r3, #12
 8008d58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d68:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	330c      	adds	r3, #12
 8008d70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d72:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008d74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e5      	bne.n	8008d52 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3314      	adds	r3, #20
 8008d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d98:	f043 0301 	orr.w	r3, r3, #1
 8008d9c:	657b      	str	r3, [r7, #84]	; 0x54
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3314      	adds	r3, #20
 8008da4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008da6:	63ba      	str	r2, [r7, #56]	; 0x38
 8008da8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e5      	bne.n	8008d86 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3314      	adds	r3, #20
 8008dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3314      	adds	r3, #20
 8008dd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008dda:	627a      	str	r2, [r7, #36]	; 0x24
 8008ddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	6a39      	ldr	r1, [r7, #32]
 8008de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de2:	e841 2300 	strex	r3, r2, [r1]
 8008de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e5      	bne.n	8008dba <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3760      	adds	r7, #96	; 0x60
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	08008ad7 	.word	0x08008ad7
 8008dfc:	08008bfd 	.word	0x08008bfd
 8008e00:	08008c33 	.word	0x08008c33

08008e04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b089      	sub	sp, #36	; 0x24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	330c      	adds	r3, #12
 8008e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	e853 3f00 	ldrex	r3, [r3]
 8008e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e22:	61fb      	str	r3, [r7, #28]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	330c      	adds	r3, #12
 8008e2a:	69fa      	ldr	r2, [r7, #28]
 8008e2c:	61ba      	str	r2, [r7, #24]
 8008e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e30:	6979      	ldr	r1, [r7, #20]
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	e841 2300 	strex	r3, r2, [r1]
 8008e38:	613b      	str	r3, [r7, #16]
   return(result);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e5      	bne.n	8008e0c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2220      	movs	r2, #32
 8008e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008e48:	bf00      	nop
 8008e4a:	3724      	adds	r7, #36	; 0x24
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b095      	sub	sp, #84	; 0x54
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	330c      	adds	r3, #12
 8008e62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	330c      	adds	r3, #12
 8008e7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e7c:	643a      	str	r2, [r7, #64]	; 0x40
 8008e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e84:	e841 2300 	strex	r3, r2, [r1]
 8008e88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e5      	bne.n	8008e5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	3314      	adds	r3, #20
 8008e96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	f023 0301 	bic.w	r3, r3, #1
 8008ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3314      	adds	r3, #20
 8008eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e5      	bne.n	8008e90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d119      	bne.n	8008f00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	330c      	adds	r3, #12
 8008ed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	e853 3f00 	ldrex	r3, [r3]
 8008eda:	60bb      	str	r3, [r7, #8]
   return(result);
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f023 0310 	bic.w	r3, r3, #16
 8008ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	330c      	adds	r3, #12
 8008eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eec:	61ba      	str	r2, [r7, #24]
 8008eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	6979      	ldr	r1, [r7, #20]
 8008ef2:	69ba      	ldr	r2, [r7, #24]
 8008ef4:	e841 2300 	strex	r3, r2, [r1]
 8008ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1e5      	bne.n	8008ecc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f0e:	bf00      	nop
 8008f10:	3754      	adds	r7, #84	; 0x54
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7ff fd5d 	bl	80089f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f3a:	bf00      	nop
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b085      	sub	sp, #20
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b21      	cmp	r3, #33	; 0x21
 8008f54:	d13e      	bne.n	8008fd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f5e:	d114      	bne.n	8008f8a <UART_Transmit_IT+0x48>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d110      	bne.n	8008f8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a1b      	ldr	r3, [r3, #32]
 8008f6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	1c9a      	adds	r2, r3, #2
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	621a      	str	r2, [r3, #32]
 8008f88:	e008      	b.n	8008f9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	1c59      	adds	r1, r3, #1
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	6211      	str	r1, [r2, #32]
 8008f94:	781a      	ldrb	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10f      	bne.n	8008fd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68da      	ldr	r2, [r3, #12]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e000      	b.n	8008fd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008fd4:	2302      	movs	r3, #2
  }
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68da      	ldr	r2, [r3, #12]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ff8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2220      	movs	r2, #32
 8008ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7fa fcf4 	bl	80039f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b08c      	sub	sp, #48	; 0x30
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b22      	cmp	r3, #34	; 0x22
 8009024:	f040 80ab 	bne.w	800917e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009030:	d117      	bne.n	8009062 <UART_Receive_IT+0x50>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d113      	bne.n	8009062 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009042:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	b29b      	uxth	r3, r3
 800904c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009050:	b29a      	uxth	r2, r3
 8009052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009054:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	1c9a      	adds	r2, r3, #2
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	629a      	str	r2, [r3, #40]	; 0x28
 8009060:	e026      	b.n	80090b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009066:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009068:	2300      	movs	r3, #0
 800906a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009074:	d007      	beq.n	8009086 <UART_Receive_IT+0x74>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10a      	bne.n	8009094 <UART_Receive_IT+0x82>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d106      	bne.n	8009094 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	b2da      	uxtb	r2, r3
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	e008      	b.n	80090a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	b2db      	uxtb	r3, r3
 800909c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	3b01      	subs	r3, #1
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	4619      	mov	r1, r3
 80090be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d15a      	bne.n	800917a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68da      	ldr	r2, [r3, #12]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 0220 	bic.w	r2, r2, #32
 80090d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68da      	ldr	r2, [r3, #12]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	695a      	ldr	r2, [r3, #20]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 0201 	bic.w	r2, r2, #1
 80090f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2220      	movs	r2, #32
 80090f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009100:	2b01      	cmp	r3, #1
 8009102:	d135      	bne.n	8009170 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	330c      	adds	r3, #12
 8009110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	613b      	str	r3, [r7, #16]
   return(result);
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f023 0310 	bic.w	r3, r3, #16
 8009120:	627b      	str	r3, [r7, #36]	; 0x24
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	330c      	adds	r3, #12
 8009128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800912a:	623a      	str	r2, [r7, #32]
 800912c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	69f9      	ldr	r1, [r7, #28]
 8009130:	6a3a      	ldr	r2, [r7, #32]
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	61bb      	str	r3, [r7, #24]
   return(result);
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e5      	bne.n	800910a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0310 	and.w	r3, r3, #16
 8009148:	2b10      	cmp	r3, #16
 800914a:	d10a      	bne.n	8009162 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800914c:	2300      	movs	r3, #0
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	60fb      	str	r3, [r7, #12]
 8009160:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7ff fc4d 	bl	8008a08 <HAL_UARTEx_RxEventCallback>
 800916e:	e002      	b.n	8009176 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7fa fc4f 	bl	8003a14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	e002      	b.n	8009180 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	e000      	b.n	8009180 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800917e:	2302      	movs	r3, #2
  }
}
 8009180:	4618      	mov	r0, r3
 8009182:	3730      	adds	r7, #48	; 0x30
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800918c:	b0c0      	sub	sp, #256	; 0x100
 800918e:	af00      	add	r7, sp, #0
 8009190:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80091a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a4:	68d9      	ldr	r1, [r3, #12]
 80091a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	ea40 0301 	orr.w	r3, r0, r1
 80091b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	431a      	orrs	r2, r3
 80091c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	431a      	orrs	r2, r3
 80091c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80091d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091e0:	f021 010c 	bic.w	r1, r1, #12
 80091e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091ee:	430b      	orrs	r3, r1
 80091f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009202:	6999      	ldr	r1, [r3, #24]
 8009204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	ea40 0301 	orr.w	r3, r0, r1
 800920e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	4b8f      	ldr	r3, [pc, #572]	; (8009454 <UART_SetConfig+0x2cc>)
 8009218:	429a      	cmp	r2, r3
 800921a:	d005      	beq.n	8009228 <UART_SetConfig+0xa0>
 800921c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	4b8d      	ldr	r3, [pc, #564]	; (8009458 <UART_SetConfig+0x2d0>)
 8009224:	429a      	cmp	r2, r3
 8009226:	d104      	bne.n	8009232 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009228:	f7fd fea8 	bl	8006f7c <HAL_RCC_GetPCLK2Freq>
 800922c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009230:	e003      	b.n	800923a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009232:	f7fd fe8f 	bl	8006f54 <HAL_RCC_GetPCLK1Freq>
 8009236:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800923a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009244:	f040 810c 	bne.w	8009460 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800924c:	2200      	movs	r2, #0
 800924e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009252:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009256:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800925a:	4622      	mov	r2, r4
 800925c:	462b      	mov	r3, r5
 800925e:	1891      	adds	r1, r2, r2
 8009260:	65b9      	str	r1, [r7, #88]	; 0x58
 8009262:	415b      	adcs	r3, r3
 8009264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009266:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800926a:	4621      	mov	r1, r4
 800926c:	eb12 0801 	adds.w	r8, r2, r1
 8009270:	4629      	mov	r1, r5
 8009272:	eb43 0901 	adc.w	r9, r3, r1
 8009276:	f04f 0200 	mov.w	r2, #0
 800927a:	f04f 0300 	mov.w	r3, #0
 800927e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800928a:	4690      	mov	r8, r2
 800928c:	4699      	mov	r9, r3
 800928e:	4623      	mov	r3, r4
 8009290:	eb18 0303 	adds.w	r3, r8, r3
 8009294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009298:	462b      	mov	r3, r5
 800929a:	eb49 0303 	adc.w	r3, r9, r3
 800929e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80092b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80092b6:	460b      	mov	r3, r1
 80092b8:	18db      	adds	r3, r3, r3
 80092ba:	653b      	str	r3, [r7, #80]	; 0x50
 80092bc:	4613      	mov	r3, r2
 80092be:	eb42 0303 	adc.w	r3, r2, r3
 80092c2:	657b      	str	r3, [r7, #84]	; 0x54
 80092c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80092c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80092cc:	f7f7 fc16 	bl	8000afc <__aeabi_uldivmod>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4b61      	ldr	r3, [pc, #388]	; (800945c <UART_SetConfig+0x2d4>)
 80092d6:	fba3 2302 	umull	r2, r3, r3, r2
 80092da:	095b      	lsrs	r3, r3, #5
 80092dc:	011c      	lsls	r4, r3, #4
 80092de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80092ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80092f0:	4642      	mov	r2, r8
 80092f2:	464b      	mov	r3, r9
 80092f4:	1891      	adds	r1, r2, r2
 80092f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80092f8:	415b      	adcs	r3, r3
 80092fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009300:	4641      	mov	r1, r8
 8009302:	eb12 0a01 	adds.w	sl, r2, r1
 8009306:	4649      	mov	r1, r9
 8009308:	eb43 0b01 	adc.w	fp, r3, r1
 800930c:	f04f 0200 	mov.w	r2, #0
 8009310:	f04f 0300 	mov.w	r3, #0
 8009314:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009318:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800931c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009320:	4692      	mov	sl, r2
 8009322:	469b      	mov	fp, r3
 8009324:	4643      	mov	r3, r8
 8009326:	eb1a 0303 	adds.w	r3, sl, r3
 800932a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800932e:	464b      	mov	r3, r9
 8009330:	eb4b 0303 	adc.w	r3, fp, r3
 8009334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009344:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009348:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800934c:	460b      	mov	r3, r1
 800934e:	18db      	adds	r3, r3, r3
 8009350:	643b      	str	r3, [r7, #64]	; 0x40
 8009352:	4613      	mov	r3, r2
 8009354:	eb42 0303 	adc.w	r3, r2, r3
 8009358:	647b      	str	r3, [r7, #68]	; 0x44
 800935a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800935e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009362:	f7f7 fbcb 	bl	8000afc <__aeabi_uldivmod>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	4611      	mov	r1, r2
 800936c:	4b3b      	ldr	r3, [pc, #236]	; (800945c <UART_SetConfig+0x2d4>)
 800936e:	fba3 2301 	umull	r2, r3, r3, r1
 8009372:	095b      	lsrs	r3, r3, #5
 8009374:	2264      	movs	r2, #100	; 0x64
 8009376:	fb02 f303 	mul.w	r3, r2, r3
 800937a:	1acb      	subs	r3, r1, r3
 800937c:	00db      	lsls	r3, r3, #3
 800937e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009382:	4b36      	ldr	r3, [pc, #216]	; (800945c <UART_SetConfig+0x2d4>)
 8009384:	fba3 2302 	umull	r2, r3, r3, r2
 8009388:	095b      	lsrs	r3, r3, #5
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009390:	441c      	add	r4, r3
 8009392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009396:	2200      	movs	r2, #0
 8009398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800939c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80093a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80093a4:	4642      	mov	r2, r8
 80093a6:	464b      	mov	r3, r9
 80093a8:	1891      	adds	r1, r2, r2
 80093aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80093ac:	415b      	adcs	r3, r3
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093b4:	4641      	mov	r1, r8
 80093b6:	1851      	adds	r1, r2, r1
 80093b8:	6339      	str	r1, [r7, #48]	; 0x30
 80093ba:	4649      	mov	r1, r9
 80093bc:	414b      	adcs	r3, r1
 80093be:	637b      	str	r3, [r7, #52]	; 0x34
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	f04f 0300 	mov.w	r3, #0
 80093c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80093cc:	4659      	mov	r1, fp
 80093ce:	00cb      	lsls	r3, r1, #3
 80093d0:	4651      	mov	r1, sl
 80093d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093d6:	4651      	mov	r1, sl
 80093d8:	00ca      	lsls	r2, r1, #3
 80093da:	4610      	mov	r0, r2
 80093dc:	4619      	mov	r1, r3
 80093de:	4603      	mov	r3, r0
 80093e0:	4642      	mov	r2, r8
 80093e2:	189b      	adds	r3, r3, r2
 80093e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093e8:	464b      	mov	r3, r9
 80093ea:	460a      	mov	r2, r1
 80093ec:	eb42 0303 	adc.w	r3, r2, r3
 80093f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009400:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009408:	460b      	mov	r3, r1
 800940a:	18db      	adds	r3, r3, r3
 800940c:	62bb      	str	r3, [r7, #40]	; 0x28
 800940e:	4613      	mov	r3, r2
 8009410:	eb42 0303 	adc.w	r3, r2, r3
 8009414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800941a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800941e:	f7f7 fb6d 	bl	8000afc <__aeabi_uldivmod>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4b0d      	ldr	r3, [pc, #52]	; (800945c <UART_SetConfig+0x2d4>)
 8009428:	fba3 1302 	umull	r1, r3, r3, r2
 800942c:	095b      	lsrs	r3, r3, #5
 800942e:	2164      	movs	r1, #100	; 0x64
 8009430:	fb01 f303 	mul.w	r3, r1, r3
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	3332      	adds	r3, #50	; 0x32
 800943a:	4a08      	ldr	r2, [pc, #32]	; (800945c <UART_SetConfig+0x2d4>)
 800943c:	fba2 2303 	umull	r2, r3, r2, r3
 8009440:	095b      	lsrs	r3, r3, #5
 8009442:	f003 0207 	and.w	r2, r3, #7
 8009446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4422      	add	r2, r4
 800944e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009450:	e105      	b.n	800965e <UART_SetConfig+0x4d6>
 8009452:	bf00      	nop
 8009454:	40011000 	.word	0x40011000
 8009458:	40011400 	.word	0x40011400
 800945c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009464:	2200      	movs	r2, #0
 8009466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800946a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800946e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009472:	4642      	mov	r2, r8
 8009474:	464b      	mov	r3, r9
 8009476:	1891      	adds	r1, r2, r2
 8009478:	6239      	str	r1, [r7, #32]
 800947a:	415b      	adcs	r3, r3
 800947c:	627b      	str	r3, [r7, #36]	; 0x24
 800947e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009482:	4641      	mov	r1, r8
 8009484:	1854      	adds	r4, r2, r1
 8009486:	4649      	mov	r1, r9
 8009488:	eb43 0501 	adc.w	r5, r3, r1
 800948c:	f04f 0200 	mov.w	r2, #0
 8009490:	f04f 0300 	mov.w	r3, #0
 8009494:	00eb      	lsls	r3, r5, #3
 8009496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800949a:	00e2      	lsls	r2, r4, #3
 800949c:	4614      	mov	r4, r2
 800949e:	461d      	mov	r5, r3
 80094a0:	4643      	mov	r3, r8
 80094a2:	18e3      	adds	r3, r4, r3
 80094a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094a8:	464b      	mov	r3, r9
 80094aa:	eb45 0303 	adc.w	r3, r5, r3
 80094ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80094b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	f04f 0300 	mov.w	r3, #0
 80094ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80094ce:	4629      	mov	r1, r5
 80094d0:	008b      	lsls	r3, r1, #2
 80094d2:	4621      	mov	r1, r4
 80094d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094d8:	4621      	mov	r1, r4
 80094da:	008a      	lsls	r2, r1, #2
 80094dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094e0:	f7f7 fb0c 	bl	8000afc <__aeabi_uldivmod>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4b60      	ldr	r3, [pc, #384]	; (800966c <UART_SetConfig+0x4e4>)
 80094ea:	fba3 2302 	umull	r2, r3, r3, r2
 80094ee:	095b      	lsrs	r3, r3, #5
 80094f0:	011c      	lsls	r4, r3, #4
 80094f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009500:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009504:	4642      	mov	r2, r8
 8009506:	464b      	mov	r3, r9
 8009508:	1891      	adds	r1, r2, r2
 800950a:	61b9      	str	r1, [r7, #24]
 800950c:	415b      	adcs	r3, r3
 800950e:	61fb      	str	r3, [r7, #28]
 8009510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009514:	4641      	mov	r1, r8
 8009516:	1851      	adds	r1, r2, r1
 8009518:	6139      	str	r1, [r7, #16]
 800951a:	4649      	mov	r1, r9
 800951c:	414b      	adcs	r3, r1
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	f04f 0200 	mov.w	r2, #0
 8009524:	f04f 0300 	mov.w	r3, #0
 8009528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800952c:	4659      	mov	r1, fp
 800952e:	00cb      	lsls	r3, r1, #3
 8009530:	4651      	mov	r1, sl
 8009532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009536:	4651      	mov	r1, sl
 8009538:	00ca      	lsls	r2, r1, #3
 800953a:	4610      	mov	r0, r2
 800953c:	4619      	mov	r1, r3
 800953e:	4603      	mov	r3, r0
 8009540:	4642      	mov	r2, r8
 8009542:	189b      	adds	r3, r3, r2
 8009544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009548:	464b      	mov	r3, r9
 800954a:	460a      	mov	r2, r1
 800954c:	eb42 0303 	adc.w	r3, r2, r3
 8009550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	67bb      	str	r3, [r7, #120]	; 0x78
 800955e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800956c:	4649      	mov	r1, r9
 800956e:	008b      	lsls	r3, r1, #2
 8009570:	4641      	mov	r1, r8
 8009572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009576:	4641      	mov	r1, r8
 8009578:	008a      	lsls	r2, r1, #2
 800957a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800957e:	f7f7 fabd 	bl	8000afc <__aeabi_uldivmod>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4b39      	ldr	r3, [pc, #228]	; (800966c <UART_SetConfig+0x4e4>)
 8009588:	fba3 1302 	umull	r1, r3, r3, r2
 800958c:	095b      	lsrs	r3, r3, #5
 800958e:	2164      	movs	r1, #100	; 0x64
 8009590:	fb01 f303 	mul.w	r3, r1, r3
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	011b      	lsls	r3, r3, #4
 8009598:	3332      	adds	r3, #50	; 0x32
 800959a:	4a34      	ldr	r2, [pc, #208]	; (800966c <UART_SetConfig+0x4e4>)
 800959c:	fba2 2303 	umull	r2, r3, r2, r3
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095a6:	441c      	add	r4, r3
 80095a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095ac:	2200      	movs	r2, #0
 80095ae:	673b      	str	r3, [r7, #112]	; 0x70
 80095b0:	677a      	str	r2, [r7, #116]	; 0x74
 80095b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80095b6:	4642      	mov	r2, r8
 80095b8:	464b      	mov	r3, r9
 80095ba:	1891      	adds	r1, r2, r2
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	415b      	adcs	r3, r3
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095c6:	4641      	mov	r1, r8
 80095c8:	1851      	adds	r1, r2, r1
 80095ca:	6039      	str	r1, [r7, #0]
 80095cc:	4649      	mov	r1, r9
 80095ce:	414b      	adcs	r3, r1
 80095d0:	607b      	str	r3, [r7, #4]
 80095d2:	f04f 0200 	mov.w	r2, #0
 80095d6:	f04f 0300 	mov.w	r3, #0
 80095da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095de:	4659      	mov	r1, fp
 80095e0:	00cb      	lsls	r3, r1, #3
 80095e2:	4651      	mov	r1, sl
 80095e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095e8:	4651      	mov	r1, sl
 80095ea:	00ca      	lsls	r2, r1, #3
 80095ec:	4610      	mov	r0, r2
 80095ee:	4619      	mov	r1, r3
 80095f0:	4603      	mov	r3, r0
 80095f2:	4642      	mov	r2, r8
 80095f4:	189b      	adds	r3, r3, r2
 80095f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80095f8:	464b      	mov	r3, r9
 80095fa:	460a      	mov	r2, r1
 80095fc:	eb42 0303 	adc.w	r3, r2, r3
 8009600:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	663b      	str	r3, [r7, #96]	; 0x60
 800960c:	667a      	str	r2, [r7, #100]	; 0x64
 800960e:	f04f 0200 	mov.w	r2, #0
 8009612:	f04f 0300 	mov.w	r3, #0
 8009616:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800961a:	4649      	mov	r1, r9
 800961c:	008b      	lsls	r3, r1, #2
 800961e:	4641      	mov	r1, r8
 8009620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009624:	4641      	mov	r1, r8
 8009626:	008a      	lsls	r2, r1, #2
 8009628:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800962c:	f7f7 fa66 	bl	8000afc <__aeabi_uldivmod>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4b0d      	ldr	r3, [pc, #52]	; (800966c <UART_SetConfig+0x4e4>)
 8009636:	fba3 1302 	umull	r1, r3, r3, r2
 800963a:	095b      	lsrs	r3, r3, #5
 800963c:	2164      	movs	r1, #100	; 0x64
 800963e:	fb01 f303 	mul.w	r3, r1, r3
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	011b      	lsls	r3, r3, #4
 8009646:	3332      	adds	r3, #50	; 0x32
 8009648:	4a08      	ldr	r2, [pc, #32]	; (800966c <UART_SetConfig+0x4e4>)
 800964a:	fba2 2303 	umull	r2, r3, r2, r3
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	f003 020f 	and.w	r2, r3, #15
 8009654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4422      	add	r2, r4
 800965c:	609a      	str	r2, [r3, #8]
}
 800965e:	bf00      	nop
 8009660:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009664:	46bd      	mov	sp, r7
 8009666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800966a:	bf00      	nop
 800966c:	51eb851f 	.word	0x51eb851f

08009670 <__cxa_pure_virtual>:
 8009670:	b508      	push	{r3, lr}
 8009672:	f000 f80d 	bl	8009690 <_ZSt9terminatev>

08009676 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009676:	b508      	push	{r3, lr}
 8009678:	4780      	blx	r0
 800967a:	f000 fa16 	bl	8009aaa <abort>
	...

08009680 <_ZSt13get_terminatev>:
 8009680:	4b02      	ldr	r3, [pc, #8]	; (800968c <_ZSt13get_terminatev+0xc>)
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	f3bf 8f5b 	dmb	ish
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	2000000c 	.word	0x2000000c

08009690 <_ZSt9terminatev>:
 8009690:	b508      	push	{r3, lr}
 8009692:	f7ff fff5 	bl	8009680 <_ZSt13get_terminatev>
 8009696:	f7ff ffee 	bl	8009676 <_ZN10__cxxabiv111__terminateEPFvvE>
 800969a:	0000      	movs	r0, r0
 800969c:	0000      	movs	r0, r0
	...

080096a0 <exp>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	ed2d 8b02 	vpush	{d8}
 80096a6:	ec55 4b10 	vmov	r4, r5, d0
 80096aa:	f000 f841 	bl	8009730 <__ieee754_exp>
 80096ae:	eeb0 8a40 	vmov.f32	s16, s0
 80096b2:	eef0 8a60 	vmov.f32	s17, s1
 80096b6:	ec45 4b10 	vmov	d0, r4, r5
 80096ba:	f000 f9eb 	bl	8009a94 <finite>
 80096be:	b168      	cbz	r0, 80096dc <exp+0x3c>
 80096c0:	a317      	add	r3, pc, #92	; (adr r3, 8009720 <exp+0x80>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f7 f9e5 	bl	8000a98 <__aeabi_dcmpgt>
 80096ce:	b160      	cbz	r0, 80096ea <exp+0x4a>
 80096d0:	f000 f9f2 	bl	8009ab8 <__errno>
 80096d4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8009710 <exp+0x70>
 80096d8:	2322      	movs	r3, #34	; 0x22
 80096da:	6003      	str	r3, [r0, #0]
 80096dc:	eeb0 0a48 	vmov.f32	s0, s16
 80096e0:	eef0 0a68 	vmov.f32	s1, s17
 80096e4:	ecbd 8b02 	vpop	{d8}
 80096e8:	bd38      	pop	{r3, r4, r5, pc}
 80096ea:	a30f      	add	r3, pc, #60	; (adr r3, 8009728 <exp+0x88>)
 80096ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f0:	4620      	mov	r0, r4
 80096f2:	4629      	mov	r1, r5
 80096f4:	f7f7 f9b2 	bl	8000a5c <__aeabi_dcmplt>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d0ef      	beq.n	80096dc <exp+0x3c>
 80096fc:	f000 f9dc 	bl	8009ab8 <__errno>
 8009700:	2322      	movs	r3, #34	; 0x22
 8009702:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8009718 <exp+0x78>
 8009706:	6003      	str	r3, [r0, #0]
 8009708:	e7e8      	b.n	80096dc <exp+0x3c>
 800970a:	bf00      	nop
 800970c:	f3af 8000 	nop.w
 8009710:	00000000 	.word	0x00000000
 8009714:	7ff00000 	.word	0x7ff00000
	...
 8009720:	fefa39ef 	.word	0xfefa39ef
 8009724:	40862e42 	.word	0x40862e42
 8009728:	d52d3051 	.word	0xd52d3051
 800972c:	c0874910 	.word	0xc0874910

08009730 <__ieee754_exp>:
 8009730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009734:	ec55 4b10 	vmov	r4, r5, d0
 8009738:	49b5      	ldr	r1, [pc, #724]	; (8009a10 <__ieee754_exp+0x2e0>)
 800973a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800973e:	428b      	cmp	r3, r1
 8009740:	ed2d 8b04 	vpush	{d8-d9}
 8009744:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8009748:	d93d      	bls.n	80097c6 <__ieee754_exp+0x96>
 800974a:	49b2      	ldr	r1, [pc, #712]	; (8009a14 <__ieee754_exp+0x2e4>)
 800974c:	428b      	cmp	r3, r1
 800974e:	d918      	bls.n	8009782 <__ieee754_exp+0x52>
 8009750:	ee10 3a10 	vmov	r3, s0
 8009754:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8009758:	4313      	orrs	r3, r2
 800975a:	d009      	beq.n	8009770 <__ieee754_exp+0x40>
 800975c:	ee10 2a10 	vmov	r2, s0
 8009760:	462b      	mov	r3, r5
 8009762:	4620      	mov	r0, r4
 8009764:	4629      	mov	r1, r5
 8009766:	f7f6 fd51 	bl	800020c <__adddf3>
 800976a:	4604      	mov	r4, r0
 800976c:	460d      	mov	r5, r1
 800976e:	e002      	b.n	8009776 <__ieee754_exp+0x46>
 8009770:	b10e      	cbz	r6, 8009776 <__ieee754_exp+0x46>
 8009772:	2400      	movs	r4, #0
 8009774:	2500      	movs	r5, #0
 8009776:	ecbd 8b04 	vpop	{d8-d9}
 800977a:	ec45 4b10 	vmov	d0, r4, r5
 800977e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009782:	a38d      	add	r3, pc, #564	; (adr r3, 80099b8 <__ieee754_exp+0x288>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	ee10 0a10 	vmov	r0, s0
 800978c:	4629      	mov	r1, r5
 800978e:	f7f7 f983 	bl	8000a98 <__aeabi_dcmpgt>
 8009792:	4607      	mov	r7, r0
 8009794:	b130      	cbz	r0, 80097a4 <__ieee754_exp+0x74>
 8009796:	ecbd 8b04 	vpop	{d8-d9}
 800979a:	2000      	movs	r0, #0
 800979c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	f000 b96f 	b.w	8009a82 <__math_oflow>
 80097a4:	a386      	add	r3, pc, #536	; (adr r3, 80099c0 <__ieee754_exp+0x290>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	4620      	mov	r0, r4
 80097ac:	4629      	mov	r1, r5
 80097ae:	f7f7 f955 	bl	8000a5c <__aeabi_dcmplt>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f000 808b 	beq.w	80098ce <__ieee754_exp+0x19e>
 80097b8:	ecbd 8b04 	vpop	{d8-d9}
 80097bc:	4638      	mov	r0, r7
 80097be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c2:	f000 b955 	b.w	8009a70 <__math_uflow>
 80097c6:	4a94      	ldr	r2, [pc, #592]	; (8009a18 <__ieee754_exp+0x2e8>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	f240 80ac 	bls.w	8009926 <__ieee754_exp+0x1f6>
 80097ce:	4a93      	ldr	r2, [pc, #588]	; (8009a1c <__ieee754_exp+0x2ec>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d87c      	bhi.n	80098ce <__ieee754_exp+0x19e>
 80097d4:	4b92      	ldr	r3, [pc, #584]	; (8009a20 <__ieee754_exp+0x2f0>)
 80097d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	ee10 0a10 	vmov	r0, s0
 80097e2:	4629      	mov	r1, r5
 80097e4:	f7f6 fd10 	bl	8000208 <__aeabi_dsub>
 80097e8:	4b8e      	ldr	r3, [pc, #568]	; (8009a24 <__ieee754_exp+0x2f4>)
 80097ea:	00f7      	lsls	r7, r6, #3
 80097ec:	443b      	add	r3, r7
 80097ee:	ed93 7b00 	vldr	d7, [r3]
 80097f2:	f1c6 0a01 	rsb	sl, r6, #1
 80097f6:	4680      	mov	r8, r0
 80097f8:	4689      	mov	r9, r1
 80097fa:	ebaa 0a06 	sub.w	sl, sl, r6
 80097fe:	eeb0 8a47 	vmov.f32	s16, s14
 8009802:	eef0 8a67 	vmov.f32	s17, s15
 8009806:	ec53 2b18 	vmov	r2, r3, d8
 800980a:	4640      	mov	r0, r8
 800980c:	4649      	mov	r1, r9
 800980e:	f7f6 fcfb 	bl	8000208 <__aeabi_dsub>
 8009812:	4604      	mov	r4, r0
 8009814:	460d      	mov	r5, r1
 8009816:	4622      	mov	r2, r4
 8009818:	462b      	mov	r3, r5
 800981a:	4620      	mov	r0, r4
 800981c:	4629      	mov	r1, r5
 800981e:	f7f6 feab 	bl	8000578 <__aeabi_dmul>
 8009822:	a369      	add	r3, pc, #420	; (adr r3, 80099c8 <__ieee754_exp+0x298>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	4606      	mov	r6, r0
 800982a:	460f      	mov	r7, r1
 800982c:	f7f6 fea4 	bl	8000578 <__aeabi_dmul>
 8009830:	a367      	add	r3, pc, #412	; (adr r3, 80099d0 <__ieee754_exp+0x2a0>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f7f6 fce7 	bl	8000208 <__aeabi_dsub>
 800983a:	4632      	mov	r2, r6
 800983c:	463b      	mov	r3, r7
 800983e:	f7f6 fe9b 	bl	8000578 <__aeabi_dmul>
 8009842:	a365      	add	r3, pc, #404	; (adr r3, 80099d8 <__ieee754_exp+0x2a8>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fce0 	bl	800020c <__adddf3>
 800984c:	4632      	mov	r2, r6
 800984e:	463b      	mov	r3, r7
 8009850:	f7f6 fe92 	bl	8000578 <__aeabi_dmul>
 8009854:	a362      	add	r3, pc, #392	; (adr r3, 80099e0 <__ieee754_exp+0x2b0>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f7f6 fcd5 	bl	8000208 <__aeabi_dsub>
 800985e:	4632      	mov	r2, r6
 8009860:	463b      	mov	r3, r7
 8009862:	f7f6 fe89 	bl	8000578 <__aeabi_dmul>
 8009866:	a360      	add	r3, pc, #384	; (adr r3, 80099e8 <__ieee754_exp+0x2b8>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f7f6 fcce 	bl	800020c <__adddf3>
 8009870:	4632      	mov	r2, r6
 8009872:	463b      	mov	r3, r7
 8009874:	f7f6 fe80 	bl	8000578 <__aeabi_dmul>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	4620      	mov	r0, r4
 800987e:	4629      	mov	r1, r5
 8009880:	f7f6 fcc2 	bl	8000208 <__aeabi_dsub>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4606      	mov	r6, r0
 800988a:	460f      	mov	r7, r1
 800988c:	4620      	mov	r0, r4
 800988e:	4629      	mov	r1, r5
 8009890:	f7f6 fe72 	bl	8000578 <__aeabi_dmul>
 8009894:	ec41 0b19 	vmov	d9, r0, r1
 8009898:	f1ba 0f00 	cmp.w	sl, #0
 800989c:	d15d      	bne.n	800995a <__ieee754_exp+0x22a>
 800989e:	2200      	movs	r2, #0
 80098a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098a4:	4630      	mov	r0, r6
 80098a6:	4639      	mov	r1, r7
 80098a8:	f7f6 fcae 	bl	8000208 <__aeabi_dsub>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	ec51 0b19 	vmov	r0, r1, d9
 80098b4:	f7f6 ff8a 	bl	80007cc <__aeabi_ddiv>
 80098b8:	4622      	mov	r2, r4
 80098ba:	462b      	mov	r3, r5
 80098bc:	f7f6 fca4 	bl	8000208 <__aeabi_dsub>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	2000      	movs	r0, #0
 80098c6:	4958      	ldr	r1, [pc, #352]	; (8009a28 <__ieee754_exp+0x2f8>)
 80098c8:	f7f6 fc9e 	bl	8000208 <__aeabi_dsub>
 80098cc:	e74d      	b.n	800976a <__ieee754_exp+0x3a>
 80098ce:	4857      	ldr	r0, [pc, #348]	; (8009a2c <__ieee754_exp+0x2fc>)
 80098d0:	a347      	add	r3, pc, #284	; (adr r3, 80099f0 <__ieee754_exp+0x2c0>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80098da:	4629      	mov	r1, r5
 80098dc:	4620      	mov	r0, r4
 80098de:	f7f6 fe4b 	bl	8000578 <__aeabi_dmul>
 80098e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098e6:	f7f6 fc91 	bl	800020c <__adddf3>
 80098ea:	f7f7 f8df 	bl	8000aac <__aeabi_d2iz>
 80098ee:	4682      	mov	sl, r0
 80098f0:	f7f6 fdd8 	bl	80004a4 <__aeabi_i2d>
 80098f4:	a340      	add	r3, pc, #256	; (adr r3, 80099f8 <__ieee754_exp+0x2c8>)
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	4606      	mov	r6, r0
 80098fc:	460f      	mov	r7, r1
 80098fe:	f7f6 fe3b 	bl	8000578 <__aeabi_dmul>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4620      	mov	r0, r4
 8009908:	4629      	mov	r1, r5
 800990a:	f7f6 fc7d 	bl	8000208 <__aeabi_dsub>
 800990e:	a33c      	add	r3, pc, #240	; (adr r3, 8009a00 <__ieee754_exp+0x2d0>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	4680      	mov	r8, r0
 8009916:	4689      	mov	r9, r1
 8009918:	4630      	mov	r0, r6
 800991a:	4639      	mov	r1, r7
 800991c:	f7f6 fe2c 	bl	8000578 <__aeabi_dmul>
 8009920:	ec41 0b18 	vmov	d8, r0, r1
 8009924:	e76f      	b.n	8009806 <__ieee754_exp+0xd6>
 8009926:	4a42      	ldr	r2, [pc, #264]	; (8009a30 <__ieee754_exp+0x300>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d811      	bhi.n	8009950 <__ieee754_exp+0x220>
 800992c:	a336      	add	r3, pc, #216	; (adr r3, 8009a08 <__ieee754_exp+0x2d8>)
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	ee10 0a10 	vmov	r0, s0
 8009936:	4629      	mov	r1, r5
 8009938:	f7f6 fc68 	bl	800020c <__adddf3>
 800993c:	4b3a      	ldr	r3, [pc, #232]	; (8009a28 <__ieee754_exp+0x2f8>)
 800993e:	2200      	movs	r2, #0
 8009940:	f7f7 f8aa 	bl	8000a98 <__aeabi_dcmpgt>
 8009944:	b138      	cbz	r0, 8009956 <__ieee754_exp+0x226>
 8009946:	4b38      	ldr	r3, [pc, #224]	; (8009a28 <__ieee754_exp+0x2f8>)
 8009948:	2200      	movs	r2, #0
 800994a:	4620      	mov	r0, r4
 800994c:	4629      	mov	r1, r5
 800994e:	e70a      	b.n	8009766 <__ieee754_exp+0x36>
 8009950:	f04f 0a00 	mov.w	sl, #0
 8009954:	e75f      	b.n	8009816 <__ieee754_exp+0xe6>
 8009956:	4682      	mov	sl, r0
 8009958:	e75d      	b.n	8009816 <__ieee754_exp+0xe6>
 800995a:	4632      	mov	r2, r6
 800995c:	463b      	mov	r3, r7
 800995e:	2000      	movs	r0, #0
 8009960:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009964:	f7f6 fc50 	bl	8000208 <__aeabi_dsub>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	ec51 0b19 	vmov	r0, r1, d9
 8009970:	f7f6 ff2c 	bl	80007cc <__aeabi_ddiv>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	ec51 0b18 	vmov	r0, r1, d8
 800997c:	f7f6 fc44 	bl	8000208 <__aeabi_dsub>
 8009980:	4642      	mov	r2, r8
 8009982:	464b      	mov	r3, r9
 8009984:	f7f6 fc40 	bl	8000208 <__aeabi_dsub>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	2000      	movs	r0, #0
 800998e:	4926      	ldr	r1, [pc, #152]	; (8009a28 <__ieee754_exp+0x2f8>)
 8009990:	f7f6 fc3a 	bl	8000208 <__aeabi_dsub>
 8009994:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8009998:	4592      	cmp	sl, r2
 800999a:	db02      	blt.n	80099a2 <__ieee754_exp+0x272>
 800999c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80099a0:	e6e3      	b.n	800976a <__ieee754_exp+0x3a>
 80099a2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80099a6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80099aa:	2200      	movs	r2, #0
 80099ac:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80099b0:	f7f6 fde2 	bl	8000578 <__aeabi_dmul>
 80099b4:	e6d9      	b.n	800976a <__ieee754_exp+0x3a>
 80099b6:	bf00      	nop
 80099b8:	fefa39ef 	.word	0xfefa39ef
 80099bc:	40862e42 	.word	0x40862e42
 80099c0:	d52d3051 	.word	0xd52d3051
 80099c4:	c0874910 	.word	0xc0874910
 80099c8:	72bea4d0 	.word	0x72bea4d0
 80099cc:	3e663769 	.word	0x3e663769
 80099d0:	c5d26bf1 	.word	0xc5d26bf1
 80099d4:	3ebbbd41 	.word	0x3ebbbd41
 80099d8:	af25de2c 	.word	0xaf25de2c
 80099dc:	3f11566a 	.word	0x3f11566a
 80099e0:	16bebd93 	.word	0x16bebd93
 80099e4:	3f66c16c 	.word	0x3f66c16c
 80099e8:	5555553e 	.word	0x5555553e
 80099ec:	3fc55555 	.word	0x3fc55555
 80099f0:	652b82fe 	.word	0x652b82fe
 80099f4:	3ff71547 	.word	0x3ff71547
 80099f8:	fee00000 	.word	0xfee00000
 80099fc:	3fe62e42 	.word	0x3fe62e42
 8009a00:	35793c76 	.word	0x35793c76
 8009a04:	3dea39ef 	.word	0x3dea39ef
 8009a08:	8800759c 	.word	0x8800759c
 8009a0c:	7e37e43c 	.word	0x7e37e43c
 8009a10:	40862e41 	.word	0x40862e41
 8009a14:	7fefffff 	.word	0x7fefffff
 8009a18:	3fd62e42 	.word	0x3fd62e42
 8009a1c:	3ff0a2b1 	.word	0x3ff0a2b1
 8009a20:	0800a140 	.word	0x0800a140
 8009a24:	0800a150 	.word	0x0800a150
 8009a28:	3ff00000 	.word	0x3ff00000
 8009a2c:	0800a130 	.word	0x0800a130
 8009a30:	3defffff 	.word	0x3defffff

08009a34 <with_errno>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	4604      	mov	r4, r0
 8009a38:	460d      	mov	r5, r1
 8009a3a:	4616      	mov	r6, r2
 8009a3c:	f000 f83c 	bl	8009ab8 <__errno>
 8009a40:	4629      	mov	r1, r5
 8009a42:	6006      	str	r6, [r0, #0]
 8009a44:	4620      	mov	r0, r4
 8009a46:	bd70      	pop	{r4, r5, r6, pc}

08009a48 <xflow>:
 8009a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a4a:	4614      	mov	r4, r2
 8009a4c:	461d      	mov	r5, r3
 8009a4e:	b108      	cbz	r0, 8009a54 <xflow+0xc>
 8009a50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a54:	e9cd 2300 	strd	r2, r3, [sp]
 8009a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fd8a 	bl	8000578 <__aeabi_dmul>
 8009a64:	2222      	movs	r2, #34	; 0x22
 8009a66:	b003      	add	sp, #12
 8009a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a6c:	f7ff bfe2 	b.w	8009a34 <with_errno>

08009a70 <__math_uflow>:
 8009a70:	b508      	push	{r3, lr}
 8009a72:	2200      	movs	r2, #0
 8009a74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a78:	f7ff ffe6 	bl	8009a48 <xflow>
 8009a7c:	ec41 0b10 	vmov	d0, r0, r1
 8009a80:	bd08      	pop	{r3, pc}

08009a82 <__math_oflow>:
 8009a82:	b508      	push	{r3, lr}
 8009a84:	2200      	movs	r2, #0
 8009a86:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009a8a:	f7ff ffdd 	bl	8009a48 <xflow>
 8009a8e:	ec41 0b10 	vmov	d0, r0, r1
 8009a92:	bd08      	pop	{r3, pc}

08009a94 <finite>:
 8009a94:	b082      	sub	sp, #8
 8009a96:	ed8d 0b00 	vstr	d0, [sp]
 8009a9a:	9801      	ldr	r0, [sp, #4]
 8009a9c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009aa0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009aa4:	0fc0      	lsrs	r0, r0, #31
 8009aa6:	b002      	add	sp, #8
 8009aa8:	4770      	bx	lr

08009aaa <abort>:
 8009aaa:	b508      	push	{r3, lr}
 8009aac:	2006      	movs	r0, #6
 8009aae:	f000 f873 	bl	8009b98 <raise>
 8009ab2:	2001      	movs	r0, #1
 8009ab4:	f7fa fed8 	bl	8004868 <_exit>

08009ab8 <__errno>:
 8009ab8:	4b01      	ldr	r3, [pc, #4]	; (8009ac0 <__errno+0x8>)
 8009aba:	6818      	ldr	r0, [r3, #0]
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	20000010 	.word	0x20000010

08009ac4 <__libc_init_array>:
 8009ac4:	b570      	push	{r4, r5, r6, lr}
 8009ac6:	4d0d      	ldr	r5, [pc, #52]	; (8009afc <__libc_init_array+0x38>)
 8009ac8:	4c0d      	ldr	r4, [pc, #52]	; (8009b00 <__libc_init_array+0x3c>)
 8009aca:	1b64      	subs	r4, r4, r5
 8009acc:	10a4      	asrs	r4, r4, #2
 8009ace:	2600      	movs	r6, #0
 8009ad0:	42a6      	cmp	r6, r4
 8009ad2:	d109      	bne.n	8009ae8 <__libc_init_array+0x24>
 8009ad4:	4d0b      	ldr	r5, [pc, #44]	; (8009b04 <__libc_init_array+0x40>)
 8009ad6:	4c0c      	ldr	r4, [pc, #48]	; (8009b08 <__libc_init_array+0x44>)
 8009ad8:	f000 f9b0 	bl	8009e3c <_init>
 8009adc:	1b64      	subs	r4, r4, r5
 8009ade:	10a4      	asrs	r4, r4, #2
 8009ae0:	2600      	movs	r6, #0
 8009ae2:	42a6      	cmp	r6, r4
 8009ae4:	d105      	bne.n	8009af2 <__libc_init_array+0x2e>
 8009ae6:	bd70      	pop	{r4, r5, r6, pc}
 8009ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aec:	4798      	blx	r3
 8009aee:	3601      	adds	r6, #1
 8009af0:	e7ee      	b.n	8009ad0 <__libc_init_array+0xc>
 8009af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af6:	4798      	blx	r3
 8009af8:	3601      	adds	r6, #1
 8009afa:	e7f2      	b.n	8009ae2 <__libc_init_array+0x1e>
 8009afc:	0800a168 	.word	0x0800a168
 8009b00:	0800a168 	.word	0x0800a168
 8009b04:	0800a168 	.word	0x0800a168
 8009b08:	0800a174 	.word	0x0800a174

08009b0c <memcpy>:
 8009b0c:	440a      	add	r2, r1
 8009b0e:	4291      	cmp	r1, r2
 8009b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b14:	d100      	bne.n	8009b18 <memcpy+0xc>
 8009b16:	4770      	bx	lr
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b22:	4291      	cmp	r1, r2
 8009b24:	d1f9      	bne.n	8009b1a <memcpy+0xe>
 8009b26:	bd10      	pop	{r4, pc}

08009b28 <memset>:
 8009b28:	4402      	add	r2, r0
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d100      	bne.n	8009b32 <memset+0xa>
 8009b30:	4770      	bx	lr
 8009b32:	f803 1b01 	strb.w	r1, [r3], #1
 8009b36:	e7f9      	b.n	8009b2c <memset+0x4>

08009b38 <realloc>:
 8009b38:	4b02      	ldr	r3, [pc, #8]	; (8009b44 <realloc+0xc>)
 8009b3a:	460a      	mov	r2, r1
 8009b3c:	4601      	mov	r1, r0
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	f000 b8da 	b.w	8009cf8 <_realloc_r>
 8009b44:	20000010 	.word	0x20000010

08009b48 <_raise_r>:
 8009b48:	291f      	cmp	r1, #31
 8009b4a:	b538      	push	{r3, r4, r5, lr}
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	460d      	mov	r5, r1
 8009b50:	d904      	bls.n	8009b5c <_raise_r+0x14>
 8009b52:	2316      	movs	r3, #22
 8009b54:	6003      	str	r3, [r0, #0]
 8009b56:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5a:	bd38      	pop	{r3, r4, r5, pc}
 8009b5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b5e:	b112      	cbz	r2, 8009b66 <_raise_r+0x1e>
 8009b60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b64:	b94b      	cbnz	r3, 8009b7a <_raise_r+0x32>
 8009b66:	4620      	mov	r0, r4
 8009b68:	f000 f830 	bl	8009bcc <_getpid_r>
 8009b6c:	462a      	mov	r2, r5
 8009b6e:	4601      	mov	r1, r0
 8009b70:	4620      	mov	r0, r4
 8009b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b76:	f000 b817 	b.w	8009ba8 <_kill_r>
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d00a      	beq.n	8009b94 <_raise_r+0x4c>
 8009b7e:	1c59      	adds	r1, r3, #1
 8009b80:	d103      	bne.n	8009b8a <_raise_r+0x42>
 8009b82:	2316      	movs	r3, #22
 8009b84:	6003      	str	r3, [r0, #0]
 8009b86:	2001      	movs	r0, #1
 8009b88:	e7e7      	b.n	8009b5a <_raise_r+0x12>
 8009b8a:	2400      	movs	r4, #0
 8009b8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b90:	4628      	mov	r0, r5
 8009b92:	4798      	blx	r3
 8009b94:	2000      	movs	r0, #0
 8009b96:	e7e0      	b.n	8009b5a <_raise_r+0x12>

08009b98 <raise>:
 8009b98:	4b02      	ldr	r3, [pc, #8]	; (8009ba4 <raise+0xc>)
 8009b9a:	4601      	mov	r1, r0
 8009b9c:	6818      	ldr	r0, [r3, #0]
 8009b9e:	f7ff bfd3 	b.w	8009b48 <_raise_r>
 8009ba2:	bf00      	nop
 8009ba4:	20000010 	.word	0x20000010

08009ba8 <_kill_r>:
 8009ba8:	b538      	push	{r3, r4, r5, lr}
 8009baa:	4d07      	ldr	r5, [pc, #28]	; (8009bc8 <_kill_r+0x20>)
 8009bac:	2300      	movs	r3, #0
 8009bae:	4604      	mov	r4, r0
 8009bb0:	4608      	mov	r0, r1
 8009bb2:	4611      	mov	r1, r2
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	f7fa fe47 	bl	8004848 <_kill>
 8009bba:	1c43      	adds	r3, r0, #1
 8009bbc:	d102      	bne.n	8009bc4 <_kill_r+0x1c>
 8009bbe:	682b      	ldr	r3, [r5, #0]
 8009bc0:	b103      	cbz	r3, 8009bc4 <_kill_r+0x1c>
 8009bc2:	6023      	str	r3, [r4, #0]
 8009bc4:	bd38      	pop	{r3, r4, r5, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20001e64 	.word	0x20001e64

08009bcc <_getpid_r>:
 8009bcc:	f7fa be34 	b.w	8004838 <_getpid>

08009bd0 <sbrk_aligned>:
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	4e0e      	ldr	r6, [pc, #56]	; (8009c0c <sbrk_aligned+0x3c>)
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	6831      	ldr	r1, [r6, #0]
 8009bd8:	4605      	mov	r5, r0
 8009bda:	b911      	cbnz	r1, 8009be2 <sbrk_aligned+0x12>
 8009bdc:	f000 f8bc 	bl	8009d58 <_sbrk_r>
 8009be0:	6030      	str	r0, [r6, #0]
 8009be2:	4621      	mov	r1, r4
 8009be4:	4628      	mov	r0, r5
 8009be6:	f000 f8b7 	bl	8009d58 <_sbrk_r>
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	d00a      	beq.n	8009c04 <sbrk_aligned+0x34>
 8009bee:	1cc4      	adds	r4, r0, #3
 8009bf0:	f024 0403 	bic.w	r4, r4, #3
 8009bf4:	42a0      	cmp	r0, r4
 8009bf6:	d007      	beq.n	8009c08 <sbrk_aligned+0x38>
 8009bf8:	1a21      	subs	r1, r4, r0
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f000 f8ac 	bl	8009d58 <_sbrk_r>
 8009c00:	3001      	adds	r0, #1
 8009c02:	d101      	bne.n	8009c08 <sbrk_aligned+0x38>
 8009c04:	f04f 34ff 	mov.w	r4, #4294967295
 8009c08:	4620      	mov	r0, r4
 8009c0a:	bd70      	pop	{r4, r5, r6, pc}
 8009c0c:	20001e60 	.word	0x20001e60

08009c10 <_malloc_r>:
 8009c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c14:	1ccd      	adds	r5, r1, #3
 8009c16:	f025 0503 	bic.w	r5, r5, #3
 8009c1a:	3508      	adds	r5, #8
 8009c1c:	2d0c      	cmp	r5, #12
 8009c1e:	bf38      	it	cc
 8009c20:	250c      	movcc	r5, #12
 8009c22:	2d00      	cmp	r5, #0
 8009c24:	4607      	mov	r7, r0
 8009c26:	db01      	blt.n	8009c2c <_malloc_r+0x1c>
 8009c28:	42a9      	cmp	r1, r5
 8009c2a:	d905      	bls.n	8009c38 <_malloc_r+0x28>
 8009c2c:	230c      	movs	r3, #12
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	2600      	movs	r6, #0
 8009c32:	4630      	mov	r0, r6
 8009c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c38:	4e2e      	ldr	r6, [pc, #184]	; (8009cf4 <_malloc_r+0xe4>)
 8009c3a:	f000 f89d 	bl	8009d78 <__malloc_lock>
 8009c3e:	6833      	ldr	r3, [r6, #0]
 8009c40:	461c      	mov	r4, r3
 8009c42:	bb34      	cbnz	r4, 8009c92 <_malloc_r+0x82>
 8009c44:	4629      	mov	r1, r5
 8009c46:	4638      	mov	r0, r7
 8009c48:	f7ff ffc2 	bl	8009bd0 <sbrk_aligned>
 8009c4c:	1c43      	adds	r3, r0, #1
 8009c4e:	4604      	mov	r4, r0
 8009c50:	d14d      	bne.n	8009cee <_malloc_r+0xde>
 8009c52:	6834      	ldr	r4, [r6, #0]
 8009c54:	4626      	mov	r6, r4
 8009c56:	2e00      	cmp	r6, #0
 8009c58:	d140      	bne.n	8009cdc <_malloc_r+0xcc>
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4638      	mov	r0, r7
 8009c60:	eb04 0803 	add.w	r8, r4, r3
 8009c64:	f000 f878 	bl	8009d58 <_sbrk_r>
 8009c68:	4580      	cmp	r8, r0
 8009c6a:	d13a      	bne.n	8009ce2 <_malloc_r+0xd2>
 8009c6c:	6821      	ldr	r1, [r4, #0]
 8009c6e:	3503      	adds	r5, #3
 8009c70:	1a6d      	subs	r5, r5, r1
 8009c72:	f025 0503 	bic.w	r5, r5, #3
 8009c76:	3508      	adds	r5, #8
 8009c78:	2d0c      	cmp	r5, #12
 8009c7a:	bf38      	it	cc
 8009c7c:	250c      	movcc	r5, #12
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4638      	mov	r0, r7
 8009c82:	f7ff ffa5 	bl	8009bd0 <sbrk_aligned>
 8009c86:	3001      	adds	r0, #1
 8009c88:	d02b      	beq.n	8009ce2 <_malloc_r+0xd2>
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	442b      	add	r3, r5
 8009c8e:	6023      	str	r3, [r4, #0]
 8009c90:	e00e      	b.n	8009cb0 <_malloc_r+0xa0>
 8009c92:	6822      	ldr	r2, [r4, #0]
 8009c94:	1b52      	subs	r2, r2, r5
 8009c96:	d41e      	bmi.n	8009cd6 <_malloc_r+0xc6>
 8009c98:	2a0b      	cmp	r2, #11
 8009c9a:	d916      	bls.n	8009cca <_malloc_r+0xba>
 8009c9c:	1961      	adds	r1, r4, r5
 8009c9e:	42a3      	cmp	r3, r4
 8009ca0:	6025      	str	r5, [r4, #0]
 8009ca2:	bf18      	it	ne
 8009ca4:	6059      	strne	r1, [r3, #4]
 8009ca6:	6863      	ldr	r3, [r4, #4]
 8009ca8:	bf08      	it	eq
 8009caa:	6031      	streq	r1, [r6, #0]
 8009cac:	5162      	str	r2, [r4, r5]
 8009cae:	604b      	str	r3, [r1, #4]
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	f104 060b 	add.w	r6, r4, #11
 8009cb6:	f000 f865 	bl	8009d84 <__malloc_unlock>
 8009cba:	f026 0607 	bic.w	r6, r6, #7
 8009cbe:	1d23      	adds	r3, r4, #4
 8009cc0:	1af2      	subs	r2, r6, r3
 8009cc2:	d0b6      	beq.n	8009c32 <_malloc_r+0x22>
 8009cc4:	1b9b      	subs	r3, r3, r6
 8009cc6:	50a3      	str	r3, [r4, r2]
 8009cc8:	e7b3      	b.n	8009c32 <_malloc_r+0x22>
 8009cca:	6862      	ldr	r2, [r4, #4]
 8009ccc:	42a3      	cmp	r3, r4
 8009cce:	bf0c      	ite	eq
 8009cd0:	6032      	streq	r2, [r6, #0]
 8009cd2:	605a      	strne	r2, [r3, #4]
 8009cd4:	e7ec      	b.n	8009cb0 <_malloc_r+0xa0>
 8009cd6:	4623      	mov	r3, r4
 8009cd8:	6864      	ldr	r4, [r4, #4]
 8009cda:	e7b2      	b.n	8009c42 <_malloc_r+0x32>
 8009cdc:	4634      	mov	r4, r6
 8009cde:	6876      	ldr	r6, [r6, #4]
 8009ce0:	e7b9      	b.n	8009c56 <_malloc_r+0x46>
 8009ce2:	230c      	movs	r3, #12
 8009ce4:	603b      	str	r3, [r7, #0]
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	f000 f84c 	bl	8009d84 <__malloc_unlock>
 8009cec:	e7a1      	b.n	8009c32 <_malloc_r+0x22>
 8009cee:	6025      	str	r5, [r4, #0]
 8009cf0:	e7de      	b.n	8009cb0 <_malloc_r+0xa0>
 8009cf2:	bf00      	nop
 8009cf4:	20001e5c 	.word	0x20001e5c

08009cf8 <_realloc_r>:
 8009cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfc:	4680      	mov	r8, r0
 8009cfe:	4614      	mov	r4, r2
 8009d00:	460e      	mov	r6, r1
 8009d02:	b921      	cbnz	r1, 8009d0e <_realloc_r+0x16>
 8009d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d08:	4611      	mov	r1, r2
 8009d0a:	f7ff bf81 	b.w	8009c10 <_malloc_r>
 8009d0e:	b92a      	cbnz	r2, 8009d1c <_realloc_r+0x24>
 8009d10:	f000 f83e 	bl	8009d90 <_free_r>
 8009d14:	4625      	mov	r5, r4
 8009d16:	4628      	mov	r0, r5
 8009d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d1c:	f000 f884 	bl	8009e28 <_malloc_usable_size_r>
 8009d20:	4284      	cmp	r4, r0
 8009d22:	4607      	mov	r7, r0
 8009d24:	d802      	bhi.n	8009d2c <_realloc_r+0x34>
 8009d26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d2a:	d812      	bhi.n	8009d52 <_realloc_r+0x5a>
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	4640      	mov	r0, r8
 8009d30:	f7ff ff6e 	bl	8009c10 <_malloc_r>
 8009d34:	4605      	mov	r5, r0
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d0ed      	beq.n	8009d16 <_realloc_r+0x1e>
 8009d3a:	42bc      	cmp	r4, r7
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	4631      	mov	r1, r6
 8009d40:	bf28      	it	cs
 8009d42:	463a      	movcs	r2, r7
 8009d44:	f7ff fee2 	bl	8009b0c <memcpy>
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	f000 f820 	bl	8009d90 <_free_r>
 8009d50:	e7e1      	b.n	8009d16 <_realloc_r+0x1e>
 8009d52:	4635      	mov	r5, r6
 8009d54:	e7df      	b.n	8009d16 <_realloc_r+0x1e>
	...

08009d58 <_sbrk_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d06      	ldr	r5, [pc, #24]	; (8009d74 <_sbrk_r+0x1c>)
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	602b      	str	r3, [r5, #0]
 8009d64:	f7fa fd8a 	bl	800487c <_sbrk>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d102      	bne.n	8009d72 <_sbrk_r+0x1a>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	b103      	cbz	r3, 8009d72 <_sbrk_r+0x1a>
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	20001e64 	.word	0x20001e64

08009d78 <__malloc_lock>:
 8009d78:	4801      	ldr	r0, [pc, #4]	; (8009d80 <__malloc_lock+0x8>)
 8009d7a:	f000 b85d 	b.w	8009e38 <__retarget_lock_acquire_recursive>
 8009d7e:	bf00      	nop
 8009d80:	20001e68 	.word	0x20001e68

08009d84 <__malloc_unlock>:
 8009d84:	4801      	ldr	r0, [pc, #4]	; (8009d8c <__malloc_unlock+0x8>)
 8009d86:	f000 b858 	b.w	8009e3a <__retarget_lock_release_recursive>
 8009d8a:	bf00      	nop
 8009d8c:	20001e68 	.word	0x20001e68

08009d90 <_free_r>:
 8009d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d92:	2900      	cmp	r1, #0
 8009d94:	d044      	beq.n	8009e20 <_free_r+0x90>
 8009d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d9a:	9001      	str	r0, [sp, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009da2:	bfb8      	it	lt
 8009da4:	18e4      	addlt	r4, r4, r3
 8009da6:	f7ff ffe7 	bl	8009d78 <__malloc_lock>
 8009daa:	4a1e      	ldr	r2, [pc, #120]	; (8009e24 <_free_r+0x94>)
 8009dac:	9801      	ldr	r0, [sp, #4]
 8009dae:	6813      	ldr	r3, [r2, #0]
 8009db0:	b933      	cbnz	r3, 8009dc0 <_free_r+0x30>
 8009db2:	6063      	str	r3, [r4, #4]
 8009db4:	6014      	str	r4, [r2, #0]
 8009db6:	b003      	add	sp, #12
 8009db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dbc:	f7ff bfe2 	b.w	8009d84 <__malloc_unlock>
 8009dc0:	42a3      	cmp	r3, r4
 8009dc2:	d908      	bls.n	8009dd6 <_free_r+0x46>
 8009dc4:	6825      	ldr	r5, [r4, #0]
 8009dc6:	1961      	adds	r1, r4, r5
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	bf01      	itttt	eq
 8009dcc:	6819      	ldreq	r1, [r3, #0]
 8009dce:	685b      	ldreq	r3, [r3, #4]
 8009dd0:	1949      	addeq	r1, r1, r5
 8009dd2:	6021      	streq	r1, [r4, #0]
 8009dd4:	e7ed      	b.n	8009db2 <_free_r+0x22>
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	b10b      	cbz	r3, 8009de0 <_free_r+0x50>
 8009ddc:	42a3      	cmp	r3, r4
 8009dde:	d9fa      	bls.n	8009dd6 <_free_r+0x46>
 8009de0:	6811      	ldr	r1, [r2, #0]
 8009de2:	1855      	adds	r5, r2, r1
 8009de4:	42a5      	cmp	r5, r4
 8009de6:	d10b      	bne.n	8009e00 <_free_r+0x70>
 8009de8:	6824      	ldr	r4, [r4, #0]
 8009dea:	4421      	add	r1, r4
 8009dec:	1854      	adds	r4, r2, r1
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	6011      	str	r1, [r2, #0]
 8009df2:	d1e0      	bne.n	8009db6 <_free_r+0x26>
 8009df4:	681c      	ldr	r4, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	6053      	str	r3, [r2, #4]
 8009dfa:	4421      	add	r1, r4
 8009dfc:	6011      	str	r1, [r2, #0]
 8009dfe:	e7da      	b.n	8009db6 <_free_r+0x26>
 8009e00:	d902      	bls.n	8009e08 <_free_r+0x78>
 8009e02:	230c      	movs	r3, #12
 8009e04:	6003      	str	r3, [r0, #0]
 8009e06:	e7d6      	b.n	8009db6 <_free_r+0x26>
 8009e08:	6825      	ldr	r5, [r4, #0]
 8009e0a:	1961      	adds	r1, r4, r5
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	bf04      	itt	eq
 8009e10:	6819      	ldreq	r1, [r3, #0]
 8009e12:	685b      	ldreq	r3, [r3, #4]
 8009e14:	6063      	str	r3, [r4, #4]
 8009e16:	bf04      	itt	eq
 8009e18:	1949      	addeq	r1, r1, r5
 8009e1a:	6021      	streq	r1, [r4, #0]
 8009e1c:	6054      	str	r4, [r2, #4]
 8009e1e:	e7ca      	b.n	8009db6 <_free_r+0x26>
 8009e20:	b003      	add	sp, #12
 8009e22:	bd30      	pop	{r4, r5, pc}
 8009e24:	20001e5c 	.word	0x20001e5c

08009e28 <_malloc_usable_size_r>:
 8009e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e2c:	1f18      	subs	r0, r3, #4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	bfbc      	itt	lt
 8009e32:	580b      	ldrlt	r3, [r1, r0]
 8009e34:	18c0      	addlt	r0, r0, r3
 8009e36:	4770      	bx	lr

08009e38 <__retarget_lock_acquire_recursive>:
 8009e38:	4770      	bx	lr

08009e3a <__retarget_lock_release_recursive>:
 8009e3a:	4770      	bx	lr

08009e3c <_init>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	bf00      	nop
 8009e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e42:	bc08      	pop	{r3}
 8009e44:	469e      	mov	lr, r3
 8009e46:	4770      	bx	lr

08009e48 <_fini>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	bf00      	nop
 8009e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4e:	bc08      	pop	{r3}
 8009e50:	469e      	mov	lr, r3
 8009e52:	4770      	bx	lr
