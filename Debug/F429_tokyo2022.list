
F429_tokyo2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a01c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800a1d0  0800a1d0  0001a1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4d8  0800a4d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4e0  0800a4e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800a4e0  0800a4e0  0001a4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4ec  0800a4ec  0001a4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a4f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001e38  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001eb0  20001eb0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025db2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004411  00000000  00000000  00045e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  0004a268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001108  00000000  00000000  0004b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027227  00000000  00000000  0004c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001959c  00000000  00000000  0007380f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e264c  00000000  00000000  0008cdab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016f3f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005404  00000000  00000000  0016f448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a1b4 	.word	0x0800a1b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800a1b4 	.word	0x0800a1b4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <_ZN3ros16normalizeSecNSecERmS0_>:
#include <Rosserial_STM32_Inc/ros/time.h>

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	0a5a      	lsrs	r2, r3, #9
 8000e10:	490f      	ldr	r1, [pc, #60]	; (8000e50 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e12:	fba1 1202 	umull	r1, r2, r1, r2
 8000e16:	09d2      	lsrs	r2, r2, #7
 8000e18:	490e      	ldr	r1, [pc, #56]	; (8000e54 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000e1a:	fb01 f202 	mul.w	r2, r1, r2
 8000e1e:	1a9b      	subs	r3, r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	0a5b      	lsrs	r3, r3, #9
 8000e28:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	09db      	lsrs	r3, r3, #7
 8000e30:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	441a      	add	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	601a      	str	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	00044b83 	.word	0x00044b83
 8000e54:	3b9aca00 	.word	0x3b9aca00

08000e58 <_ZN13LowPassFilterC1Ev>:
 *	https://github.com/jimmyberg/LowPassFilter
 */

#include <LowPassFilter.h>

LowPassFilter::LowPassFilter():
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	output_(0),ePow_(0)
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	e9c1 2300 	strd	r2, r3, [r1]
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	e9c1 2302 	strd	r2, r3, [r1, #8]
{
}
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	0000      	movs	r0, r0
 8000e8c:	0000      	movs	r0, r0
	...

08000e90 <_ZN13LowPassFilter4initEdd>:
	ePow_(1 - exp(-iDeltaTime * 2 * M_PI * iCutOffFrequency))
{
}

void LowPassFilter::init(double iCutOffFrequency, double iDeltaTime)
{
 8000e90:	b5b0      	push	{r4, r5, r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6178      	str	r0, [r7, #20]
 8000e98:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e9c:	ed87 1b00 	vstr	d1, [r7]
	output_ = 0;
 8000ea0:	6979      	ldr	r1, [r7, #20]
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9c1 2300 	strd	r2, r3, [r1]
	ePow_ = 1 - exp(-iDeltaTime * 2 * M_PI * iCutOffFrequency);
 8000eae:	683c      	ldr	r4, [r7, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000eb6:	4622      	mov	r2, r4
 8000eb8:	462b      	mov	r3, r5
 8000eba:	4620      	mov	r0, r4
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	f7ff f9a5 	bl	800020c <__adddf3>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	a314      	add	r3, pc, #80	; (adr r3, 8000f1c <_ZN13LowPassFilter4initEdd+0x8c>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fb52 	bl	8000578 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ee0:	f7ff fb4a 	bl	8000578 <__aeabi_dmul>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	ec43 2b17 	vmov	d7, r2, r3
 8000eec:	eeb0 0a47 	vmov.f32	s0, s14
 8000ef0:	eef0 0a67 	vmov.f32	s1, s15
 8000ef4:	f008 fd90 	bl	8009a18 <exp>
 8000ef8:	ec53 2b10 	vmov	r2, r3, d0
 8000efc:	f04f 0000 	mov.w	r0, #0
 8000f00:	4905      	ldr	r1, [pc, #20]	; (8000f18 <_ZN13LowPassFilter4initEdd+0x88>)
 8000f02:	f7ff f981 	bl	8000208 <__aeabi_dsub>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	6979      	ldr	r1, [r7, #20]
 8000f0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bdb0      	pop	{r4, r5, r7, pc}
 8000f18:	3ff00000 	.word	0x3ff00000
 8000f1c:	54442d18 	.word	0x54442d18
 8000f20:	400921fb 	.word	0x400921fb

08000f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <MX_DMA_Init+0x4c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <MX_DMA_Init+0x4c>)
 8000f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <MX_DMA_Init+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	200c      	movs	r0, #12
 8000f4c:	f004 fef5 	bl	8005d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f50:	200c      	movs	r0, #12
 8000f52:	f004 ff0e 	bl	8005d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	200e      	movs	r0, #14
 8000f5c:	f004 feed 	bl	8005d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f60:	200e      	movs	r0, #14
 8000f62:	f004 ff06 	bl	8005d72 <HAL_NVIC_EnableIRQ>

}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <_ZN7EncoderC1Ev>:
 *
 */

#include <encoder.h>

Encoder::Encoder() {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
}
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <_ZN7Encoder4initEv>:
		uint32_t channel_1, uint32_t channel_2) :
		inverted_(false), last_(0), current_(0), diff_(0), htim_(htim), timer_bits_(
				timer_bits), timer_channel_ { channel_1, channel_2 } {
}

void Encoder::init() {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(htim_, timer_channel_[0]);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	f006 fc61 	bl	8007864 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(htim_, timer_channel_[1]);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4610      	mov	r0, r2
 8000fae:	f006 fc59 	bl	8007864 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(htim_, 0);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_ZN7Encoder4initEP17TIM_HandleTypeDefhmm>:

void Encoder::init(TIM_HandleTypeDef *htim, uint8_t timer_bits,
		uint32_t channel_1, uint32_t channel_2) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71fb      	strb	r3, [r7, #7]
	inverted_ = false;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
	last_ = 0;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
	current_ = 0;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
	diff_ = 0;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
	htim_ = htim;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	611a      	str	r2, [r3, #16]
	timer_bits_ = timer_bits;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	79fa      	ldrb	r2, [r7, #7]
 8000ff6:	751a      	strb	r2, [r3, #20]
	timer_channel_[0] = channel_1;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	619a      	str	r2, [r3, #24]
	timer_channel_[1] = channel_2;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	61da      	str	r2, [r3, #28]
	init();
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f7ff ffc0 	bl	8000f8a <_ZN7Encoder4initEv>
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_ZN7Encoder9readDeltaEv>:

void Encoder::setInverted(bool inverted) {
	inverted_ = inverted;
}

int32_t Encoder::readDelta() {
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	/* update encoder data */
	last_ = current_;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	605a      	str	r2, [r3, #4]
	current_ = __HAL_TIM_GET_COUNTER(htim_);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	609a      	str	r2, [r3, #8]

	/* check if inverted */
	if (!inverted_) {
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	f083 0301 	eor.w	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d008      	beq.n	800104e <_ZN7Encoder9readDeltaEv+0x3c>
		diff_ = current_ - last_;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	e007      	b.n	800105e <_ZN7Encoder9readDeltaEv+0x4c>
	} else {
		diff_ = last_ - current_;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60da      	str	r2, [r3, #12]
	}

	/* deal with counter overflow */
	/* 16-bit Timer */
	if (timer_bits_ == 16) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7d1b      	ldrb	r3, [r3, #20]
 8001062:	2b10      	cmp	r3, #16
 8001064:	d117      	bne.n	8001096 <_ZN7Encoder9readDeltaEv+0x84>
		if (diff_ > UINT16_MAX / 2)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800106e:	db06      	blt.n	800107e <_ZN7Encoder9readDeltaEv+0x6c>
			diff_ -= UINT16_MAX + 1;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	e01c      	b.n	80010b8 <_ZN7Encoder9readDeltaEv+0xa6>
		else if (diff_ < -UINT16_MAX / 2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001086:	dc17      	bgt.n	80010b8 <_ZN7Encoder9readDeltaEv+0xa6>
			diff_ += UINT16_MAX + 1;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	e010      	b.n	80010b8 <_ZN7Encoder9readDeltaEv+0xa6>
	}
	/* 32-bit Timer */
	else if (timer_bits_ == 32) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7d1b      	ldrb	r3, [r3, #20]
 800109a:	2b20      	cmp	r3, #32
 800109c:	d108      	bne.n	80010b0 <_ZN7Encoder9readDeltaEv+0x9e>
		if (diff_ > UINT32_MAX / 2)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	da08      	bge.n	80010b8 <_ZN7Encoder9readDeltaEv+0xa6>
			diff_ -= UINT32_MAX + 1;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	e003      	b.n	80010b8 <_ZN7Encoder9readDeltaEv+0xa6>
		else if (diff_ < -UINT32_MAX / 2)
			diff_ += UINT32_MAX + 1;
	}
	else {
		diff_ = -1;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f04f 32ff 	mov.w	r2, #4294967295
 80010b6:	60da      	str	r2, [r3, #12]
	}
	return diff_;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b54      	ldr	r3, [pc, #336]	; (8001234 <MX_GPIO_Init+0x16c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a53      	ldr	r2, [pc, #332]	; (8001234 <MX_GPIO_Init+0x16c>)
 80010e8:	f043 0310 	orr.w	r3, r3, #16
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b51      	ldr	r3, [pc, #324]	; (8001234 <MX_GPIO_Init+0x16c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a4c      	ldr	r2, [pc, #304]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <MX_GPIO_Init+0x16c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b46      	ldr	r3, [pc, #280]	; (8001234 <MX_GPIO_Init+0x16c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a45      	ldr	r2, [pc, #276]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b43      	ldr	r3, [pc, #268]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b3f      	ldr	r3, [pc, #252]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a3e      	ldr	r2, [pc, #248]	; (8001234 <MX_GPIO_Init+0x16c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b38      	ldr	r3, [pc, #224]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a37      	ldr	r2, [pc, #220]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a30      	ldr	r2, [pc, #192]	; (8001234 <MX_GPIO_Init+0x16c>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <MX_GPIO_Init+0x16c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	211c      	movs	r1, #28
 800118a:	482b      	ldr	r0, [pc, #172]	; (8001238 <MX_GPIO_Init+0x170>)
 800118c:	f005 fbba 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	4829      	ldr	r0, [pc, #164]	; (800123c <MX_GPIO_Init+0x174>)
 8001198:	f005 fbb4 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80011a2:	4827      	ldr	r0, [pc, #156]	; (8001240 <MX_GPIO_Init+0x178>)
 80011a4:	f005 fbae 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80011ae:	4825      	ldr	r0, [pc, #148]	; (8001244 <MX_GPIO_Init+0x17c>)
 80011b0:	f005 fba8 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80011b4:	231c      	movs	r3, #28
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	481b      	ldr	r0, [pc, #108]	; (8001238 <MX_GPIO_Init+0x170>)
 80011cc:	f005 f9ee 	bl	80065ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4814      	ldr	r0, [pc, #80]	; (800123c <MX_GPIO_Init+0x174>)
 80011ea:	f005 f9df 	bl	80065ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_GPIO_Init+0x178>)
 8001208:	f005 f9d0 	bl	80065ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 800120c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4807      	ldr	r0, [pc, #28]	; (8001244 <MX_GPIO_Init+0x17c>)
 8001226:	f005 f9c1 	bl	80065ac <HAL_GPIO_Init>

}
 800122a:	bf00      	nop
 800122c:	3730      	adds	r7, #48	; 0x30
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40021000 	.word	0x40021000
 800123c:	40020800 	.word	0x40020800
 8001240:	40020400 	.word	0x40020400
 8001244:	40020c00 	.word	0x40020c00

08001248 <_ZN9KinematicC1Ev>:
 *      \__\/         \__\/         \__\/
 *
 */
#include <kinematic.h>

Kinematic::Kinematic()
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
{
}
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <_ZN9Kinematic4initEddd>:

void Kinematic::init(double wheel_radius, double l_x, double l_y)
{
 800125e:	b480      	push	{r7}
 8001260:	b089      	sub	sp, #36	; 0x24
 8001262:	af00      	add	r7, sp, #0
 8001264:	61f8      	str	r0, [r7, #28]
 8001266:	ed87 0b04 	vstr	d0, [r7, #16]
 800126a:	ed87 1b02 	vstr	d1, [r7, #8]
 800126e:	ed87 2b00 	vstr	d2, [r7]
	wheel_radius_ = wheel_radius;  //meter
 8001272:	69f9      	ldr	r1, [r7, #28]
 8001274:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001278:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	l_x_ = l_x; //meter
 800127c:	69f9      	ldr	r1, [r7, #28]
 800127e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001282:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	l_y_ = l_y; //meter
 8001286:	69f9      	ldr	r1, [r7, #28]
 8001288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800128c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001290:	bf00      	nop
 8001292:	3724      	adds	r7, #36	; 0x24
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <_ZN9Kinematic14readWheelSpeedEdddd>:

void Kinematic::readWheelSpeed(double v1, double v2, double v3, double v4)
{
 800129c:	b480      	push	{r7}
 800129e:	b08b      	sub	sp, #44	; 0x2c
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6278      	str	r0, [r7, #36]	; 0x24
 80012a4:	ed87 0b06 	vstr	d0, [r7, #24]
 80012a8:	ed87 1b04 	vstr	d1, [r7, #16]
 80012ac:	ed87 2b02 	vstr	d2, [r7, #8]
 80012b0:	ed87 3b00 	vstr	d3, [r7]
	wheel_speed_[0] = v1;
 80012b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
	wheel_speed_[1] = v2;
 80012be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012c4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	wheel_speed_[2] = v3;
 80012c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	wheel_speed_[3] = v4;
 80012d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012d8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 80012dc:	bf00      	nop
 80012de:	372c      	adds	r7, #44	; 0x2c
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_ZN9Kinematic14readRobotSpeedEddd>:

void Kinematic::readRobotSpeed(double vx, double vy, double w)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	61f8      	str	r0, [r7, #28]
 80012f0:	ed87 0b04 	vstr	d0, [r7, #16]
 80012f4:	ed87 1b02 	vstr	d1, [r7, #8]
 80012f8:	ed87 2b00 	vstr	d2, [r7]
	robot_speed.vx_ = vx;
 80012fc:	69f9      	ldr	r1, [r7, #28]
 80012fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001302:	e9c1 2300 	strd	r2, r3, [r1]
	robot_speed.vy_ = vy;
 8001306:	69f9      	ldr	r1, [r7, #28]
 8001308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800130c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	robot_speed.w_  = w;
 8001310:	69f9      	ldr	r1, [r7, #28]
 8001312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001316:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800131a:	bf00      	nop
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <_ZN9Kinematic16forwardKinematicEdddd>:

void Kinematic::forwardKinematic(double v1, double v2, double v3, double v4)
{
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6278      	str	r0, [r7, #36]	; 0x24
 8001330:	ed87 0b06 	vstr	d0, [r7, #24]
 8001334:	ed87 1b04 	vstr	d1, [r7, #16]
 8001338:	ed87 2b02 	vstr	d2, [r7, #8]
 800133c:	ed87 3b00 	vstr	d3, [r7]
	readWheelSpeed(v1, v2, v3, v4);
 8001340:	ed97 3b00 	vldr	d3, [r7]
 8001344:	ed97 2b02 	vldr	d2, [r7, #8]
 8001348:	ed97 1b04 	vldr	d1, [r7, #16]
 800134c:	ed97 0b06 	vldr	d0, [r7, #24]
 8001350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001352:	f7ff ffa3 	bl	800129c <_ZN9Kinematic14readWheelSpeedEdddd>
	robot_speed.vx_ = ( wheel_speed_[0] + wheel_speed_[1] + wheel_speed_[2] + wheel_speed_[3]) * wheel_radius_ / 4;
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001362:	f7fe ff53 	bl	800020c <__adddf3>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001374:	f7fe ff4a 	bl	800020c <__adddf3>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001386:	f7fe ff41 	bl	800020c <__adddf3>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001398:	f7ff f8ee 	bl	8000578 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b3f      	ldr	r3, [pc, #252]	; (80014a8 <_ZN9Kinematic16forwardKinematicEdddd+0x180>)
 80013aa:	f7ff fa0f 	bl	80007cc <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013b4:	e9c1 2300 	strd	r2, r3, [r1]
	robot_speed.vy_ = (-wheel_speed_[0] + wheel_speed_[1] + wheel_speed_[2] - wheel_speed_[3]) * wheel_radius_ / 4;
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80013c4:	f7fe ff20 	bl	8000208 <__aeabi_dsub>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80013d6:	f7fe ff19 	bl	800020c <__adddf3>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80013e8:	f7fe ff0e 	bl	8000208 <__aeabi_dsub>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80013fa:	f7ff f8bd 	bl	8000578 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <_ZN9Kinematic16forwardKinematicEdddd+0x180>)
 800140c:	f7ff f9de 	bl	80007cc <__aeabi_ddiv>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001416:	e9c1 2302 	strd	r2, r3, [r1, #8]
	robot_speed.w_  = (-wheel_speed_[0] + wheel_speed_[1] - wheel_speed_[2] + wheel_speed_[3]) * wheel_radius_ /(4 *(l_x_ + l_y_));
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001426:	f7fe feef 	bl	8000208 <__aeabi_dsub>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001438:	f7fe fee6 	bl	8000208 <__aeabi_dsub>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800144a:	f7fe fedf 	bl	800020c <__adddf3>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800145c:	f7ff f88c 	bl	8000578 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4614      	mov	r4, r2
 8001466:	461d      	mov	r5, r3
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001474:	f7fe feca 	bl	800020c <__adddf3>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_ZN9Kinematic16forwardKinematicEdddd+0x180>)
 8001486:	f7ff f877 	bl	8000578 <__aeabi_dmul>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4620      	mov	r0, r4
 8001490:	4629      	mov	r1, r5
 8001492:	f7ff f99b 	bl	80007cc <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800149c:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80014a0:	bf00      	nop
 80014a2:	3728      	adds	r7, #40	; 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bdb0      	pop	{r4, r5, r7, pc}
 80014a8:	40100000 	.word	0x40100000

080014ac <_ZN9Kinematic16inverseKinematicEddd>:

void Kinematic::inverseKinematic(double vx, double vy, double w)
{
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	61f8      	str	r0, [r7, #28]
 80014b4:	ed87 0b04 	vstr	d0, [r7, #16]
 80014b8:	ed87 1b02 	vstr	d1, [r7, #8]
 80014bc:	ed87 2b00 	vstr	d2, [r7]
	readRobotSpeed(vx, vy, w);
 80014c0:	ed97 2b00 	vldr	d2, [r7]
 80014c4:	ed97 1b02 	vldr	d1, [r7, #8]
 80014c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80014cc:	69f8      	ldr	r0, [r7, #28]
 80014ce:	f7ff ff0b 	bl	80012e8 <_ZN9Kinematic14readRobotSpeedEddd>
	wheel_speed_[0] = (robot_speed.vx_ - robot_speed.vy_ - (l_x_ + l_y_)*robot_speed.w_) / wheel_radius_;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014de:	f7fe fe93 	bl	8000208 <__aeabi_dsub>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4614      	mov	r4, r2
 80014e8:	461d      	mov	r5, r3
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80014f6:	f7fe fe89 	bl	800020c <__adddf3>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001508:	f7ff f836 	bl	8000578 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4620      	mov	r0, r4
 8001512:	4629      	mov	r1, r5
 8001514:	f7fe fe78 	bl	8000208 <__aeabi_dsub>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001526:	f7ff f951 	bl	80007cc <__aeabi_ddiv>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	69f9      	ldr	r1, [r7, #28]
 8001530:	e9c1 2306 	strd	r2, r3, [r1, #24]
	wheel_speed_[1] = (robot_speed.vx_ + robot_speed.vy_ + (l_x_ + l_y_)*robot_speed.w_) / wheel_radius_;
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001540:	f7fe fe64 	bl	800020c <__adddf3>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4614      	mov	r4, r2
 800154a:	461d      	mov	r5, r3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001558:	f7fe fe58 	bl	800020c <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800156a:	f7ff f805 	bl	8000578 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4620      	mov	r0, r4
 8001574:	4629      	mov	r1, r5
 8001576:	f7fe fe49 	bl	800020c <__adddf3>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001588:	f7ff f920 	bl	80007cc <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	69f9      	ldr	r1, [r7, #28]
 8001592:	e9c1 2308 	strd	r2, r3, [r1, #32]
	wheel_speed_[2] = (robot_speed.vx_ + robot_speed.vy_ - (l_x_ + l_y_)*robot_speed.w_) / wheel_radius_;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	e9d3 0100 	ldrd	r0, r1, [r3]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015a2:	f7fe fe33 	bl	800020c <__adddf3>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4614      	mov	r4, r2
 80015ac:	461d      	mov	r5, r3
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80015ba:	f7fe fe27 	bl	800020c <__adddf3>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015cc:	f7fe ffd4 	bl	8000578 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7fe fe16 	bl	8000208 <__aeabi_dsub>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015ea:	f7ff f8ef 	bl	80007cc <__aeabi_ddiv>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	69f9      	ldr	r1, [r7, #28]
 80015f4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	wheel_speed_[3] = (robot_speed.vx_ - robot_speed.vy_ + (l_x_ + l_y_)*robot_speed.w_) / wheel_radius_;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001604:	f7fe fe00 	bl	8000208 <__aeabi_dsub>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4614      	mov	r4, r2
 800160e:	461d      	mov	r5, r3
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800161c:	f7fe fdf6 	bl	800020c <__adddf3>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800162e:	f7fe ffa3 	bl	8000578 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4620      	mov	r0, r4
 8001638:	4629      	mov	r1, r5
 800163a:	f7fe fde7 	bl	800020c <__adddf3>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800164c:	f7ff f8be 	bl	80007cc <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	69f9      	ldr	r1, [r7, #28]
 8001656:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 800165a:	bf00      	nop
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bdb0      	pop	{r4, r5, r7, pc}

08001662 <_ZN5RobotC1Ev>:
#include <pid.h>
#include <vnh5019.h>
#include <encoder.h>
#include <LowPassFilter.h>

class Robot
 8001662:	b5b0      	push	{r4, r5, r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2403      	movs	r4, #3
 800166e:	461d      	mov	r5, r3
 8001670:	2c00      	cmp	r4, #0
 8001672:	db05      	blt.n	8001680 <_ZN5RobotC1Ev+0x1e>
 8001674:	4628      	mov	r0, r5
 8001676:	f004 f87b 	bl	8005770 <_ZN7VNH5019C1Ev>
 800167a:	3528      	adds	r5, #40	; 0x28
 800167c:	3c01      	subs	r4, #1
 800167e:	e7f7      	b.n	8001670 <_ZN5RobotC1Ev+0xe>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	33a0      	adds	r3, #160	; 0xa0
 8001684:	2403      	movs	r4, #3
 8001686:	461d      	mov	r5, r3
 8001688:	2c00      	cmp	r4, #0
 800168a:	db05      	blt.n	8001698 <_ZN5RobotC1Ev+0x36>
 800168c:	4628      	mov	r0, r5
 800168e:	f7ff fc71 	bl	8000f74 <_ZN7EncoderC1Ev>
 8001692:	3520      	adds	r5, #32
 8001694:	3c01      	subs	r4, #1
 8001696:	e7f7      	b.n	8001688 <_ZN5RobotC1Ev+0x26>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800169e:	2403      	movs	r4, #3
 80016a0:	461d      	mov	r5, r3
 80016a2:	2c00      	cmp	r4, #0
 80016a4:	db06      	blt.n	80016b4 <_ZN5RobotC1Ev+0x52>
 80016a6:	4628      	mov	r0, r5
 80016a8:	f000 fa2e 	bl	8001b08 <_ZN3PIDC1Ev>
 80016ac:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80016b0:	3c01      	subs	r4, #1
 80016b2:	e7f6      	b.n	80016a2 <_ZN5RobotC1Ev+0x40>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f503 6374 	add.w	r3, r3, #3904	; 0xf40
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fdc4 	bl	8001248 <_ZN9KinematicC1Ev>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fbc6 	bl	8000e58 <_ZN13LowPassFilterC1Ev>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080016d8 <_Z10speed_initv>:
	robot.pid[motor].setFeedback(OMEGA[motor]);				//set PID feedback
	duty[motor] = robot.pid[motor].clacOutput();			//calculate duty cycle
	robot.motor_[motor].writeDuty(duty[motor]);				//write duty cycle to VNH5019
}

void speed_init(){
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	received_vel.vx = 0;
 80016dc:	4917      	ldr	r1, [pc, #92]	; (800173c <_Z10speed_initv+0x64>)
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	e9c1 2300 	strd	r2, r3, [r1]
	received_vel.vy = 0;
 80016ea:	4914      	ldr	r1, [pc, #80]	; (800173c <_Z10speed_initv+0x64>)
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	received_vel.w  = 0;
 80016f8:	4910      	ldr	r1, [pc, #64]	; (800173c <_Z10speed_initv+0x64>)
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9c1 2304 	strd	r2, r3, [r1, #16]
	odom_vel.vx = 0;
 8001706:	490e      	ldr	r1, [pc, #56]	; (8001740 <_Z10speed_initv+0x68>)
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	e9c1 2300 	strd	r2, r3, [r1]
	odom_vel.vy = 0;
 8001714:	490a      	ldr	r1, [pc, #40]	; (8001740 <_Z10speed_initv+0x68>)
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	odom_vel.w	= 0;
 8001722:	4907      	ldr	r1, [pc, #28]	; (8001740 <_Z10speed_initv+0x68>)
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20001070 	.word	0x20001070
 8001740:	20001088 	.word	0x20001088

08001744 <_Z12get_odom_velv>:

void get_odom_vel(){
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	odom_vel.vx = robot.kn_.robot_speed.vx_;
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <_Z12get_odom_velv+0x40>)
 800174a:	f503 6374 	add.w	r3, r3, #3904	; 0xf40
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	490d      	ldr	r1, [pc, #52]	; (8001788 <_Z12get_odom_velv+0x44>)
 8001754:	e9c1 2300 	strd	r2, r3, [r1]
	odom_vel.vy = robot.kn_.robot_speed.vy_;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <_Z12get_odom_velv+0x40>)
 800175a:	f503 6375 	add.w	r3, r3, #3920	; 0xf50
 800175e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001762:	4909      	ldr	r1, [pc, #36]	; (8001788 <_Z12get_odom_velv+0x44>)
 8001764:	e9c1 2302 	strd	r2, r3, [r1, #8]
	odom_vel.w  = robot.kn_.robot_speed.w_;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <_Z12get_odom_velv+0x40>)
 800176a:	f503 6375 	add.w	r3, r3, #3920	; 0xf50
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	4905      	ldr	r1, [pc, #20]	; (8001788 <_Z12get_odom_velv+0x44>)
 8001774:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000098 	.word	0x20000098
 8001788:	20001088 	.word	0x20001088

0800178c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	if (htim == &htim7) {	/* HIGH FREQ EVENT : 1kHz*/
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a6c      	ldr	r2, [pc, #432]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	f040 80c9 	bne.w	8001930 <HAL_TIM_PeriodElapsedCallback+0x1a4>
		robot.kn_.inverseKinematic(received_vel.vx, received_vel.vy, received_vel.w); //from target robot speed to 4 wheel's omega
 800179e:	4b6b      	ldr	r3, [pc, #428]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80017a0:	ed93 7b00 	vldr	d7, [r3]
 80017a4:	4b69      	ldr	r3, [pc, #420]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80017a6:	ed93 6b02 	vldr	d6, [r3, #8]
 80017aa:	4b68      	ldr	r3, [pc, #416]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80017ac:	ed93 5b04 	vldr	d5, [r3, #16]
 80017b0:	eeb0 2a45 	vmov.f32	s4, s10
 80017b4:	eef0 2a65 	vmov.f32	s5, s11
 80017b8:	eeb0 1a46 	vmov.f32	s2, s12
 80017bc:	eef0 1a66 	vmov.f32	s3, s13
 80017c0:	eeb0 0a47 	vmov.f32	s0, s14
 80017c4:	eef0 0a67 	vmov.f32	s1, s15
 80017c8:	4861      	ldr	r0, [pc, #388]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80017ca:	f7ff fe6f 	bl	80014ac <_ZN9Kinematic16inverseKinematicEddd>
		for (int i = 0; i < 4; i++){
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	f300 8087 	bgt.w	80018e8 <HAL_TIM_PeriodElapsedCallback+0x15c>
			target_wheel_w[i] = robot.kn_.wheel_speed_[i]; 			//get target wheel speed
 80017da:	4a5e      	ldr	r2, [pc, #376]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f203 13eb 	addw	r3, r3, #491	; 0x1eb
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	485b      	ldr	r0, [pc, #364]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80017ec:	68f9      	ldr	r1, [r7, #12]
 80017ee:	00c9      	lsls	r1, r1, #3
 80017f0:	4401      	add	r1, r0
 80017f2:	e9c1 2300 	strd	r2, r3, [r1]
//			LPF_output[i] = robot.LPF_.update(target_wheel_w[i]);	//Low Pass Filter
			robot.pid[i].setSetpoint(target_wheel_w[i]); 			//set PID target
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f44f 7262 	mov.w	r2, #904	; 0x388
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001804:	4a53      	ldr	r2, [pc, #332]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001806:	441a      	add	r2, r3
 8001808:	4953      	ldr	r1, [pc, #332]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	ed93 7b00 	vldr	d7, [r3]
 8001814:	eeb0 0a47 	vmov.f32	s0, s14
 8001818:	eef0 0a67 	vmov.f32	s1, s15
 800181c:	4610      	mov	r0, r2
 800181e:	f000 f9e0 	bl	8001be2 <_ZN3PID11setSetpointEd>
			CNT_diff[i] = robot.encoder_[i].readDelta();			//read encoder counter difference
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	3305      	adds	r3, #5
 8001826:	015b      	lsls	r3, r3, #5
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800182a:	4413      	add	r3, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fbf0 	bl	8001012 <_ZN7Encoder9readDeltaEv>
 8001832:	4602      	mov	r2, r0
 8001834:	4949      	ldr	r1, [pc, #292]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			OMEGA[i] = robot.diff_to_omega(CNT_diff[i]);			//from counter difference to omega
 800183c:	4a47      	ldr	r2, [pc, #284]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	4619      	mov	r1, r3
 8001846:	4843      	ldr	r0, [pc, #268]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001848:	f000 fc8a 	bl	8002160 <_ZN5Robot13diff_to_omegaEl>
 800184c:	eeb0 7a40 	vmov.f32	s14, s0
 8001850:	eef0 7a60 	vmov.f32	s15, s1
 8001854:	4a42      	ldr	r2, [pc, #264]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	ed83 7b00 	vstr	d7, [r3]
			robot.pid[i].setFeedback(OMEGA[i]);						//set PID feedback
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f44f 7262 	mov.w	r2, #904	; 0x388
 8001866:	fb02 f303 	mul.w	r3, r2, r3
 800186a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800186e:	4a39      	ldr	r2, [pc, #228]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001870:	441a      	add	r2, r3
 8001872:	493b      	ldr	r1, [pc, #236]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	ed93 7b00 	vldr	d7, [r3]
 800187e:	eeb0 0a47 	vmov.f32	s0, s14
 8001882:	eef0 0a67 	vmov.f32	s1, s15
 8001886:	4610      	mov	r0, r2
 8001888:	f000 f9bc 	bl	8001c04 <_ZN3PID11setFeedbackEd>
			duty[i] = robot.pid[i].clacOutput();					//calculate duty cycle
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800189a:	4a2e      	ldr	r2, [pc, #184]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800189c:	4413      	add	r3, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f9c2 	bl	8001c28 <_ZN3PID10clacOutputEv>
 80018a4:	eeb0 7a40 	vmov.f32	s14, s0
 80018a8:	eef0 7a60 	vmov.f32	s15, s1
 80018ac:	4a2d      	ldr	r2, [pc, #180]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	ed83 7b00 	vstr	d7, [r3]
			robot.motor_[i].writeDuty(duty[i]);						//write duty cycle to VNH
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4a24      	ldr	r2, [pc, #144]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80018c4:	441a      	add	r2, r3
 80018c6:	4927      	ldr	r1, [pc, #156]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	ed93 7b00 	vldr	d7, [r3]
 80018d2:	eeb0 0a47 	vmov.f32	s0, s14
 80018d6:	eef0 0a67 	vmov.f32	s1, s15
 80018da:	4610      	mov	r0, r2
 80018dc:	f003 ffc4 	bl	8005868 <_ZN7VNH50199writeDutyEd>
		for (int i = 0; i < 4; i++){
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e774      	b.n	80017d2 <HAL_TIM_PeriodElapsedCallback+0x46>
		}
		robot.kn_.forwardKinematic(OMEGA[0], OMEGA[1], OMEGA[2], OMEGA[3]);
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80018ea:	ed93 7b00 	vldr	d7, [r3]
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80018f0:	ed93 6b02 	vldr	d6, [r3, #8]
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80018f6:	ed93 5b04 	vldr	d5, [r3, #16]
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80018fc:	ed93 4b06 	vldr	d4, [r3, #24]
 8001900:	eeb0 3a44 	vmov.f32	s6, s8
 8001904:	eef0 3a64 	vmov.f32	s7, s9
 8001908:	eeb0 2a45 	vmov.f32	s4, s10
 800190c:	eef0 2a65 	vmov.f32	s5, s11
 8001910:	eeb0 1a46 	vmov.f32	s2, s12
 8001914:	eef0 1a66 	vmov.f32	s3, s13
 8001918:	eeb0 0a47 	vmov.f32	s0, s14
 800191c:	eef0 0a67 	vmov.f32	s1, s15
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001922:	f7ff fd01 	bl	8001328 <_ZN9Kinematic16forwardKinematicEdddd>
		get_odom_vel();
 8001926:	f7ff ff0d 	bl	8001744 <_Z12get_odom_velv>
		odom_store();
 800192a:	f002 f9fb 	bl	8003d24 <odom_store>
	}
	else if(htim == &htim6){	/* odometry publish FREQ : 100Hz*/
		odom_store();
		odom_pub();
	}
}
 800192e:	e007      	b.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x1b4>
	else if(htim == &htim6){	/* odometry publish FREQ : 100Hz*/
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d103      	bne.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x1b4>
		odom_store();
 8001938:	f002 f9f4 	bl	8003d24 <odom_store>
		odom_pub();
 800193c:	f002 fa10 	bl	8003d60 <odom_pub>
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20001c7c 	.word	0x20001c7c
 800194c:	20001070 	.word	0x20001070
 8001950:	20000fd8 	.word	0x20000fd8
 8001954:	20000098 	.word	0x20000098
 8001958:	200010a0 	.word	0x200010a0
 800195c:	200010c0 	.word	0x200010c0
 8001960:	200010d0 	.word	0x200010d0
 8001964:	200010f0 	.word	0x200010f0
 8001968:	20001c34 	.word	0x20001c34

0800196c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001970:	f004 f896 	bl	8005aa0 <HAL_Init>

  /* USER CODE BEGIN Init */

  speed_init(); //********* for manual test **********
 8001974:	f7ff feb0 	bl	80016d8 <_Z10speed_initv>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001978:	f000 f820 	bl	80019bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197c:	f7ff fba4 	bl	80010c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001980:	f7ff fad0 	bl	8000f24 <MX_DMA_Init>
  MX_TIM12_Init();
 8001984:	f003 fb48 	bl	8005018 <MX_TIM12_Init>
  MX_TIM9_Init();
 8001988:	f003 fad8 	bl	8004f3c <MX_TIM9_Init>
  MX_TIM2_Init();
 800198c:	f003 f91a 	bl	8004bc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001990:	f003 f96c 	bl	8004c6c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001994:	f003 f9be 	bl	8004d14 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001998:	f003 fa10 	bl	8004dbc <MX_TIM5_Init>
  MX_TIM7_Init();
 800199c:	f003 fa98 	bl	8004ed0 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 80019a0:	f003 fdac 	bl	80054fc <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80019a4:	f003 fa5e 	bl	8004e64 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80019a8:	f003 fd7e 	bl	80054a8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  robot.init();
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <main+0x4c>)
 80019ae:	f000 fa4f 	bl	8001e50 <_ZN5Robot4initEv>
  rosserial_setup();
 80019b2:	f002 f99d 	bl	8003cf0 <rosserial_setup>
   while (1)
 80019b6:	e7fe      	b.n	80019b6 <main+0x4a>
 80019b8:	20000098 	.word	0x20000098

080019bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b094      	sub	sp, #80	; 0x50
 80019c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019c2:	f107 0320 	add.w	r3, r7, #32
 80019c6:	2230      	movs	r2, #48	; 0x30
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f008 fa68 	bl	8009ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <_Z18SystemClock_Configv+0xfc>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	4a33      	ldr	r2, [pc, #204]	; (8001ab8 <_Z18SystemClock_Configv+0xfc>)
 80019ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ee:	6413      	str	r3, [r2, #64]	; 0x40
 80019f0:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <_Z18SystemClock_Configv+0xfc>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <_Z18SystemClock_Configv+0x100>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2d      	ldr	r2, [pc, #180]	; (8001abc <_Z18SystemClock_Configv+0x100>)
 8001a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <_Z18SystemClock_Configv+0x100>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a22:	2302      	movs	r3, #2
 8001a24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001a30:	23b4      	movs	r3, #180	; 0xb4
 8001a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3c:	f107 0320 	add.w	r3, r7, #32
 8001a40:	4618      	mov	r0, r3
 8001a42:	f004 ffc9 	bl	80069d8 <HAL_RCC_OscConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf14      	ite	ne
 8001a4c:	2301      	movne	r3, #1
 8001a4e:	2300      	moveq	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001a56:	f000 f833 	bl	8001ac0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a5a:	f004 ff6d 	bl	8006938 <HAL_PWREx_EnableOverDrive>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001a6e:	f000 f827 	bl	8001ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a72:	230f      	movs	r3, #15
 8001a74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a76:	2302      	movs	r3, #2
 8001a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001a84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	2105      	movs	r1, #5
 8001a90:	4618      	mov	r0, r3
 8001a92:	f005 fa19 	bl	8006ec8 <HAL_RCC_ClockConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf14      	ite	ne
 8001a9c:	2301      	movne	r3, #1
 8001a9e:	2300      	moveq	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 8001aa6:	f000 f80b 	bl	8001ac0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001aaa:	f005 faf3 	bl	8007094 <HAL_RCC_EnableCSS>
}
 8001aae:	bf00      	nop
 8001ab0:	3750      	adds	r7, #80	; 0x50
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000

08001ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac4:	b672      	cpsid	i
}
 8001ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <Error_Handler+0x8>
	...

08001acc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d107      	bne.n	8001aec <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d102      	bne.n	8001aec <_Z41__static_initialization_and_destruction_0ii+0x20>
Robot robot;
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001ae8:	f7ff fdbb 	bl	8001662 <_ZN5RobotC1Ev>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000098 	.word	0x20000098

08001af8 <_GLOBAL__sub_I_robot>:
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b00:	2001      	movs	r0, #1
 8001b02:	f7ff ffe3 	bl	8001acc <_Z41__static_initialization_and_destruction_0ii>
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZN3PIDC1Ev>:
 *
 */

#include <pid.h>

PID::PID()
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
{
}
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_ZN3PID4initEv>:
  : dt_(dt), kp_(kp), ki_(ki), kd_(kd), kb_(kb),setpoint_(0.0), feedback_(0.0), error_(0.0), error_int_(0.0), error_diff_(0.0),	back_cal_(0.0)
{
}

void PID::init()
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_ZN3PID4initEddddd>:

void PID::init(double dt, double kp, double ki, double kd, double kb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b08c      	sub	sp, #48	; 0x30
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001b3a:	ed87 0b08 	vstr	d0, [r7, #32]
 8001b3e:	ed87 1b06 	vstr	d1, [r7, #24]
 8001b42:	ed87 2b04 	vstr	d2, [r7, #16]
 8001b46:	ed87 3b02 	vstr	d3, [r7, #8]
 8001b4a:	ed87 4b00 	vstr	d4, [r7]
	dt_ = dt;
 8001b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b50:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b54:	e9c1 2300 	strd	r2, r3, [r1]
	kp_ = kp;
 8001b58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ki_ = ki;
 8001b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b68:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kd_ = kd;
 8001b6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b72:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kb_ = kb;
 8001b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b7c:	e9c1 2308 	strd	r2, r3, [r1, #32]

	setpoint_ = 0.0;
 8001b80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	feedback_ = 0.0;
 8001b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	error_ = 0.0;
 8001b9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	error_int_ = 0.0;
 8001baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	error_diff_ = 0.0;
 8001bb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	back_cal_ = 0.0;
 8001bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	e9c1 23dc 	strd	r2, r3, [r1, #880]	; 0x370

	init();
 8001bd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bd6:	f7ff ffa2 	bl	8001b1e <_ZN3PID4initEv>
}
 8001bda:	bf00      	nop
 8001bdc:	3730      	adds	r7, #48	; 0x30
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_ZN3PID11setSetpointEd>:
void PID::setSetpoint(double setpoint)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	ed87 0b00 	vstr	d0, [r7]
	setpoint_ = setpoint;
 8001bee:	68f9      	ldr	r1, [r7, #12]
 8001bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bf4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_ZN3PID11setFeedbackEd>:
void PID::setFeedback(double feedback)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	ed87 0b00 	vstr	d0, [r7]
	feedback_ = feedback;
 8001c10:	68f9      	ldr	r1, [r7, #12]
 8001c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c16:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <_ZN3PID10clacOutputEv>:
double PID::clacOutput()
{
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	error_ = setpoint_ - feedback_;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c3c:	f7fe fae4 	bl	8000208 <__aeabi_dsub>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	for (int i = FILTER_COEFF - 1; i; --i)
 8001c4a:	2363      	movs	r3, #99	; 0x63
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d012      	beq.n	8001c7a <_ZN3PID10clacOutputEv+0x52>
	{
		error_hist_[i] = error_hist_[i - 1];
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	3b01      	subs	r3, #1
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	330a      	adds	r3, #10
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c68:	310a      	adds	r1, #10
 8001c6a:	00c9      	lsls	r1, r1, #3
 8001c6c:	4401      	add	r1, r0
 8001c6e:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = FILTER_COEFF - 1; i; --i)
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3b01      	subs	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	e7e9      	b.n	8001c4e <_ZN3PID10clacOutputEv+0x26>
	}
	error_hist_[0] = error_;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	error_int_ += back_cal_; //Back Calculation
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	e9d3 23dc 	ldrd	r2, r3, [r3, #880]	; 0x370
 8001c92:	f7fe fabb 	bl	800020c <__adddf3>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	error_int_ += error_ * dt_;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	f7fe fc61 	bl	8000578 <__aeabi_dmul>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4620      	mov	r0, r4
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	f7fe faa5 	bl	800020c <__adddf3>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	error_diff_ = error_hist_[0] - error_hist_[1];
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001cd8:	f7fe fa96 	bl	8000208 <__aeabi_dsub>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	double p = kp_ * error_;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001cf2:	f7fe fc41 	bl	8000578 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double i = ki_ * error_int_;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001d0a:	f7fe fc35 	bl	8000578 <__aeabi_dmul>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double d = kd_ * error_diff_;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001d22:	f7fe fc29 	bl	8000578 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	i = SATURATION(i, -0.3, 0.3);
 8001d2e:	a344      	add	r3, pc, #272	; (adr r3, 8001e40 <_ZN3PID10clacOutputEv+0x218>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d38:	f7fe fe90 	bl	8000a5c <__aeabi_dcmplt>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <_ZN3PID10clacOutputEv+0x122>
 8001d42:	a33f      	add	r3, pc, #252	; (adr r3, 8001e40 <_ZN3PID10clacOutputEv+0x218>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	e00f      	b.n	8001d6a <_ZN3PID10clacOutputEv+0x142>
 8001d4a:	a33f      	add	r3, pc, #252	; (adr r3, 8001e48 <_ZN3PID10clacOutputEv+0x220>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d54:	f7fe fea0 	bl	8000a98 <__aeabi_dcmpgt>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <_ZN3PID10clacOutputEv+0x13e>
 8001d5e:	a33a      	add	r3, pc, #232	; (adr r3, 8001e48 <_ZN3PID10clacOutputEv+0x220>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	e001      	b.n	8001d6a <_ZN3PID10clacOutputEv+0x142>
 8001d66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	output_ = p + i + d;
 8001d6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d76:	f7fe fa49 	bl	800020c <__adddf3>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d86:	f7fe fa41 	bl	800020c <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	e9c1 23de 	strd	r2, r3, [r1, #888]	; 0x378
	output_SAT_ = SATURATION(output_, -1, 1);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	e9d3 01de 	ldrd	r0, r1, [r3, #888]	; 0x378
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <_ZN3PID10clacOutputEv+0x210>)
 8001da0:	f7fe fe5c 	bl	8000a5c <__aeabi_dcmplt>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <_ZN3PID10clacOutputEv+0x18a>
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <_ZN3PID10clacOutputEv+0x210>)
 8001db0:	e011      	b.n	8001dd6 <_ZN3PID10clacOutputEv+0x1ae>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	e9d3 01de 	ldrd	r0, r1, [r3, #888]	; 0x378
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <_ZN3PID10clacOutputEv+0x214>)
 8001dbe:	f7fe fe6b 	bl	8000a98 <__aeabi_dcmpgt>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <_ZN3PID10clacOutputEv+0x1a8>
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <_ZN3PID10clacOutputEv+0x214>)
 8001dce:	e002      	b.n	8001dd6 <_ZN3PID10clacOutputEv+0x1ae>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	e9c1 23e0 	strd	r2, r3, [r1, #896]	; 0x380
	if(output_ != output_SAT_){
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	e9d3 01de 	ldrd	r0, r1, [r3, #888]	; 0x378
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	e9d3 23e0 	ldrd	r2, r3, [r3, #896]	; 0x380
 8001de8:	f7fe fe2e 	bl	8000a48 <__aeabi_dcmpeq>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d115      	bne.n	8001e1e <_ZN3PID10clacOutputEv+0x1f6>
		back_cal_ = (output_SAT_ - output_) * kb_;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	e9d3 01e0 	ldrd	r0, r1, [r3, #896]	; 0x380
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8001dfe:	f7fe fa03 	bl	8000208 <__aeabi_dsub>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e10:	f7fe fbb2 	bl	8000578 <__aeabi_dmul>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	e9c1 23dc 	strd	r2, r3, [r1, #880]	; 0x370
	}
	return output_SAT_;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	e9d3 23e0 	ldrd	r2, r3, [r3, #896]	; 0x380
 8001e24:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e28:	eeb0 0a47 	vmov.f32	s0, s14
 8001e2c:	eef0 0a67 	vmov.f32	s1, s15
 8001e30:	3728      	adds	r7, #40	; 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bdb0      	pop	{r4, r5, r7, pc}
 8001e36:	bf00      	nop
 8001e38:	bff00000 	.word	0xbff00000
 8001e3c:	3ff00000 	.word	0x3ff00000
 8001e40:	33333333 	.word	0x33333333
 8001e44:	bfd33333 	.word	0xbfd33333
 8001e48:	33333333 	.word	0x33333333
 8001e4c:	3fd33333 	.word	0x3fd33333

08001e50 <_ZN5Robot4initEv>:
 *
 */

#include <robot.h>

void Robot::init() {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af04      	add	r7, sp, #16
 8001e56:	6078      	str	r0, [r7, #4]
	//Robot hardware parameters
	wheel_radius_ 	= (double)0.075/2;	//meter
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	a3b6      	add	r3, pc, #728	; (adr r3, 800213c <_ZN5Robot4initEv+0x2ec>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	e9c1 2300 	strd	r2, r3, [r1]
	l_x_ 			= (double)0.163/2;	//meter
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001e70:	4619      	mov	r1, r3
 8001e72:	a3b4      	add	r3, pc, #720	; (adr r3, 8002144 <_ZN5Robot4initEv+0x2f4>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	e941 2302 	strd	r2, r3, [r1, #-8]
	l_y_ 			= (double)0.184/2;	//meter
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001e82:	4619      	mov	r1, r3
 8001e84:	a3b1      	add	r3, pc, #708	; (adr r3, 800214c <_ZN5Robot4initEv+0x2fc>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	e9c1 2300 	strd	r2, r3, [r1]
	dt_ = 0.001; //PeriodElapsedCallback rate = 1k Hz (TIM7)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8001e94:	4619      	mov	r1, r3
 8001e96:	a3af      	add	r3, pc, #700	; (adr r3, 8002154 <_ZN5Robot4initEv+0x304>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	e941 2302 	strd	r2, r3, [r1, #-8]
	encoder_resolution_ = 1024;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea6:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
	reduction_ratio_ = 44; //1:44 reduction_ratio
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	222c      	movs	r2, #44	; 0x2c
 8001eae:	f8c3 2fc4 	str.w	r2, [r3, #4036]	; 0xfc4
	one_round_count_ = encoder_resolution_ * reduction_ratio_ * 4; //encoder's count for one round
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	; 0xfc0
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	f8d2 2fc4 	ldr.w	r2, [r2, #4036]	; 0xfc4
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	009a      	lsls	r2, r3, #2
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f8c3 2fc8 	str.w	r2, [r3, #4040]	; 0xfc8

	motor_[0].init(&htim12, TIM_CHANNEL_2, 4499, GPIOD, GPIOD, GPIO_PIN_8, GPIO_PIN_14); //(*htim, channel, resolution, port_a, port_b, pin_a, pin_b)
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ed0:	9303      	str	r3, [sp, #12]
 8001ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed6:	9302      	str	r3, [sp, #8]
 8001ed8:	4b8d      	ldr	r3, [pc, #564]	; (8002110 <_ZN5Robot4initEv+0x2c0>)
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	4b8c      	ldr	r3, [pc, #560]	; (8002110 <_ZN5Robot4initEv+0x2c0>)
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	f241 1393 	movw	r3, #4499	; 0x1193
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	498b      	ldr	r1, [pc, #556]	; (8002114 <_ZN5Robot4initEv+0x2c4>)
 8001ee8:	f003 fc80 	bl	80057ec <_ZN7VNH50194initEP17TIM_HandleTypeDefmmP12GPIO_TypeDefS3_tt>
	motor_[1].init(&htim12, TIM_CHANNEL_1, 4499, GPIOB, GPIOB, GPIO_PIN_12, GPIO_PIN_13);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef6:	9303      	str	r3, [sp, #12]
 8001ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	4b86      	ldr	r3, [pc, #536]	; (8002118 <_ZN5Robot4initEv+0x2c8>)
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	4b85      	ldr	r3, [pc, #532]	; (8002118 <_ZN5Robot4initEv+0x2c8>)
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	f241 1393 	movw	r3, #4499	; 0x1193
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	4981      	ldr	r1, [pc, #516]	; (8002114 <_ZN5Robot4initEv+0x2c4>)
 8001f0e:	f003 fc6d 	bl	80057ec <_ZN7VNH50194initEP17TIM_HandleTypeDefmmP12GPIO_TypeDefS3_tt>
	motor_[2].init(&htim9, TIM_CHANNEL_1, 4499, GPIOE, GPIOE, GPIO_PIN_2, GPIO_PIN_3);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8001f18:	2308      	movs	r3, #8
 8001f1a:	9303      	str	r3, [sp, #12]
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	9302      	str	r3, [sp, #8]
 8001f20:	4b7e      	ldr	r3, [pc, #504]	; (800211c <_ZN5Robot4initEv+0x2cc>)
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	4b7d      	ldr	r3, [pc, #500]	; (800211c <_ZN5Robot4initEv+0x2cc>)
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	f241 1393 	movw	r3, #4499	; 0x1193
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	497c      	ldr	r1, [pc, #496]	; (8002120 <_ZN5Robot4initEv+0x2d0>)
 8001f30:	f003 fc5c 	bl	80057ec <_ZN7VNH50194initEP17TIM_HandleTypeDefmmP12GPIO_TypeDefS3_tt>
	motor_[3].init(&htim9, TIM_CHANNEL_2, 4499, GPIOE, GPIOC, GPIO_PIN_4, GPIO_PIN_13);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8001f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3e:	9303      	str	r3, [sp, #12]
 8001f40:	2310      	movs	r3, #16
 8001f42:	9302      	str	r3, [sp, #8]
 8001f44:	4b77      	ldr	r3, [pc, #476]	; (8002124 <_ZN5Robot4initEv+0x2d4>)
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	4b74      	ldr	r3, [pc, #464]	; (800211c <_ZN5Robot4initEv+0x2cc>)
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	f241 1393 	movw	r3, #4499	; 0x1193
 8001f50:	2204      	movs	r2, #4
 8001f52:	4973      	ldr	r1, [pc, #460]	; (8002120 <_ZN5Robot4initEv+0x2d0>)
 8001f54:	f003 fc4a 	bl	80057ec <_ZN7VNH50194initEP17TIM_HandleTypeDefmmP12GPIO_TypeDefS3_tt>
	motor_[1].setInverted(true);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3328      	adds	r3, #40	; 0x28
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fc72 	bl	8005848 <_ZN7VNH501911setInvertedEb>
	motor_[3].setInverted(true);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3378      	adds	r3, #120	; 0x78
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fc6c 	bl	8005848 <_ZN7VNH501911setInvertedEb>

	encoder_[0].init(&htim2, 32, TIM_CHANNEL_1, TIM_CHANNEL_2); //(*htim, timer_bits, channel_1, channel_2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8001f76:	2304      	movs	r3, #4
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	496a      	ldr	r1, [pc, #424]	; (8002128 <_ZN5Robot4initEv+0x2d8>)
 8001f80:	f7ff f820 	bl	8000fc4 <_ZN7Encoder4initEP17TIM_HandleTypeDefhmm>
	encoder_[1].init(&htim5, 32, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2220      	movs	r2, #32
 8001f92:	4966      	ldr	r1, [pc, #408]	; (800212c <_ZN5Robot4initEv+0x2dc>)
 8001f94:	f7ff f816 	bl	8000fc4 <_ZN7Encoder4initEP17TIM_HandleTypeDefhmm>
	encoder_[2].init(&htim3, 16, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	4962      	ldr	r1, [pc, #392]	; (8002130 <_ZN5Robot4initEv+0x2e0>)
 8001fa8:	f7ff f80c 	bl	8000fc4 <_ZN7Encoder4initEP17TIM_HandleTypeDefhmm>
	encoder_[3].init(&htim4, 16, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2210      	movs	r2, #16
 8001fba:	495e      	ldr	r1, [pc, #376]	; (8002134 <_ZN5Robot4initEv+0x2e4>)
 8001fbc:	f7ff f802 	bl	8000fc4 <_ZN7Encoder4initEP17TIM_HandleTypeDefhmm>

	pid[0].init(dt_, 0.132, 15.47, 0.0, 0); //(dt, kp, ki, kd, kb)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8001fcc:	ed13 7b02 	vldr	d7, [r3, #-8]
 8001fd0:	ed9f 4b47 	vldr	d4, [pc, #284]	; 80020f0 <_ZN5Robot4initEv+0x2a0>
 8001fd4:	ed9f 3b46 	vldr	d3, [pc, #280]	; 80020f0 <_ZN5Robot4initEv+0x2a0>
 8001fd8:	ed9f 2b47 	vldr	d2, [pc, #284]	; 80020f8 <_ZN5Robot4initEv+0x2a8>
 8001fdc:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8002100 <_ZN5Robot4initEv+0x2b0>
 8001fe0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fe4:	eef0 0a67 	vmov.f32	s1, s15
 8001fe8:	4610      	mov	r0, r2
 8001fea:	f7ff fda2 	bl	8001b32 <_ZN3PID4initEddddd>
	pid[1].init(dt_, 0.132, 15.47, 0.0, 0);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f503 6295 	add.w	r2, r3, #1192	; 0x4a8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8001ffa:	ed13 7b02 	vldr	d7, [r3, #-8]
 8001ffe:	ed9f 4b3c 	vldr	d4, [pc, #240]	; 80020f0 <_ZN5Robot4initEv+0x2a0>
 8002002:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80020f0 <_ZN5Robot4initEv+0x2a0>
 8002006:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80020f8 <_ZN5Robot4initEv+0x2a8>
 800200a:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002100 <_ZN5Robot4initEv+0x2b0>
 800200e:	eeb0 0a47 	vmov.f32	s0, s14
 8002012:	eef0 0a67 	vmov.f32	s1, s15
 8002016:	4610      	mov	r0, r2
 8002018:	f7ff fd8b 	bl	8001b32 <_ZN3PID4initEddddd>
	pid[2].init(dt_, 0.132, 15.47, 0.0, 0);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f503 6203 	add.w	r2, r3, #2096	; 0x830
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8002028:	ed13 7b02 	vldr	d7, [r3, #-8]
 800202c:	ed9f 4b30 	vldr	d4, [pc, #192]	; 80020f0 <_ZN5Robot4initEv+0x2a0>
 8002030:	ed9f 3b2f 	vldr	d3, [pc, #188]	; 80020f0 <_ZN5Robot4initEv+0x2a0>
 8002034:	ed9f 2b30 	vldr	d2, [pc, #192]	; 80020f8 <_ZN5Robot4initEv+0x2a8>
 8002038:	ed9f 1b31 	vldr	d1, [pc, #196]	; 8002100 <_ZN5Robot4initEv+0x2b0>
 800203c:	eeb0 0a47 	vmov.f32	s0, s14
 8002040:	eef0 0a67 	vmov.f32	s1, s15
 8002044:	4610      	mov	r0, r2
 8002046:	f7ff fd74 	bl	8001b32 <_ZN3PID4initEddddd>
	pid[3].init(dt_, 0.132, 15.47, 0.0, 0);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f603 32b8 	addw	r2, r3, #3000	; 0xbb8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8002056:	ed13 7b02 	vldr	d7, [r3, #-8]
 800205a:	ed9f 4b25 	vldr	d4, [pc, #148]	; 80020f0 <_ZN5Robot4initEv+0x2a0>
 800205e:	ed9f 3b24 	vldr	d3, [pc, #144]	; 80020f0 <_ZN5Robot4initEv+0x2a0>
 8002062:	ed9f 2b25 	vldr	d2, [pc, #148]	; 80020f8 <_ZN5Robot4initEv+0x2a8>
 8002066:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8002100 <_ZN5Robot4initEv+0x2b0>
 800206a:	eeb0 0a47 	vmov.f32	s0, s14
 800206e:	eef0 0a67 	vmov.f32	s1, s15
 8002072:	4610      	mov	r0, r2
 8002074:	f7ff fd5d 	bl	8001b32 <_ZN3PID4initEddddd>

	kn_.init(wheel_radius_, l_x_, l_y_); //(wheel_radius, l_x, l_y)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f503 6274 	add.w	r2, r3, #3904	; 0xf40
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8002084:	ed93 7b00 	vldr	d7, [r3]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 800208e:	ed13 6b02 	vldr	d6, [r3, #-8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8002098:	ed93 5b00 	vldr	d5, [r3]
 800209c:	eeb0 2a45 	vmov.f32	s4, s10
 80020a0:	eef0 2a65 	vmov.f32	s5, s11
 80020a4:	eeb0 1a46 	vmov.f32	s2, s12
 80020a8:	eef0 1a66 	vmov.f32	s3, s13
 80020ac:	eeb0 0a47 	vmov.f32	s0, s14
 80020b0:	eef0 0a67 	vmov.f32	s1, s15
 80020b4:	4610      	mov	r0, r2
 80020b6:	f7ff f8d2 	bl	800125e <_ZN9Kinematic4initEddd>

	LPF_.init(1000, dt_); //(iCutOffFrequency, iDeltaTime)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f503 6279 	add.w	r2, r3, #3984	; 0xf90
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80020c6:	ed13 7b02 	vldr	d7, [r3, #-8]
 80020ca:	eeb0 1a47 	vmov.f32	s2, s14
 80020ce:	eef0 1a67 	vmov.f32	s3, s15
 80020d2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8002108 <_ZN5Robot4initEv+0x2b8>
 80020d6:	4610      	mov	r0, r2
 80020d8:	f7fe feda 	bl	8000e90 <_ZN13LowPassFilter4initEdd>

	HAL_TIM_Base_Start_IT (&htim7);
 80020dc:	4816      	ldr	r0, [pc, #88]	; (8002138 <_ZN5Robot4initEv+0x2e8>)
 80020de:	f005 f989 	bl	80073f4 <HAL_TIM_Base_Start_IT>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	f3af 8000 	nop.w
	...
 80020f8:	d70a3d71 	.word	0xd70a3d71
 80020fc:	402ef0a3 	.word	0x402ef0a3
 8002100:	4189374c 	.word	0x4189374c
 8002104:	3fc0e560 	.word	0x3fc0e560
 8002108:	00000000 	.word	0x00000000
 800210c:	408f4000 	.word	0x408f4000
 8002110:	40020c00 	.word	0x40020c00
 8002114:	20001d0c 	.word	0x20001d0c
 8002118:	40020400 	.word	0x40020400
 800211c:	40021000 	.word	0x40021000
 8002120:	20001cc4 	.word	0x20001cc4
 8002124:	40020800 	.word	0x40020800
 8002128:	20001b14 	.word	0x20001b14
 800212c:	20001bec 	.word	0x20001bec
 8002130:	20001b5c 	.word	0x20001b5c
 8002134:	20001ba4 	.word	0x20001ba4
 8002138:	20001c7c 	.word	0x20001c7c
 800213c:	33333333 	.word	0x33333333
 8002140:	3fa33333 	.word	0x3fa33333
 8002144:	1a9fbe77 	.word	0x1a9fbe77
 8002148:	3fb4dd2f 	.word	0x3fb4dd2f
 800214c:	df3b645a 	.word	0xdf3b645a
 8002150:	3fb78d4f 	.word	0x3fb78d4f
 8002154:	d2f1a9fc 	.word	0xd2f1a9fc
 8002158:	3f50624d 	.word	0x3f50624d
 800215c:	00000000 	.word	0x00000000

08002160 <_ZN5Robot13diff_to_omegaEl>:

double Robot::diff_to_omega(int32_t diff){
 8002160:	b5b0      	push	{r4, r5, r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
	omega_ = 2 * M_PI * diff / one_round_count_ /dt_;
 800216a:	6838      	ldr	r0, [r7, #0]
 800216c:	f7fe f99a 	bl	80004a4 <__aeabi_i2d>
 8002170:	a31b      	add	r3, pc, #108	; (adr r3, 80021e0 <_ZN5Robot13diff_to_omegaEl+0x80>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	f7fe f9ff 	bl	8000578 <__aeabi_dmul>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4614      	mov	r4, r2
 8002180:	461d      	mov	r5, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f98b 	bl	80004a4 <__aeabi_i2d>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4620      	mov	r0, r4
 8002194:	4629      	mov	r1, r5
 8002196:	f7fe fb19 	bl	80007cc <__aeabi_ddiv>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80021a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80021ac:	f7fe fb0e 	bl	80007cc <__aeabi_ddiv>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	f501 617d 	add.w	r1, r1, #4048	; 0xfd0
 80021ba:	e9c1 2300 	strd	r2, r3, [r1]
	return omega_;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f503 637d 	add.w	r3, r3, #4048	; 0xfd0
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	ec43 2b17 	vmov	d7, r2, r3
}
 80021cc:	eeb0 0a47 	vmov.f32	s0, s14
 80021d0:	eef0 0a67 	vmov.f32	s1, s15
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bdb0      	pop	{r4, r5, r7, pc}
 80021da:	bf00      	nop
 80021dc:	f3af 8000 	nop.w
 80021e0:	54442d18 	.word	0x54442d18
 80021e4:	401921fb 	.word	0x401921fb

080021e8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <_ZN3ros3MsgC1Ev+0x1c>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	0800a478 	.word	0x0800a478

08002208 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ffe8 	bl	80021e8 <_ZN3ros3MsgC1Ev>
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	0800a460 	.word	0x0800a460

08002258 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002258:	b480      	push	{r7}
 800225a:	b08b      	sub	sp, #44	; 0x2c
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800226c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002276:	6838      	ldr	r0, [r7, #0]
 8002278:	4401      	add	r1, r0
 800227a:	b2d3      	uxtb	r3, r2
 800227c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800227e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	0a02      	lsrs	r2, r0, #8
 800228c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002290:	0a0b      	lsrs	r3, r1, #8
 8002292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002294:	3101      	adds	r1, #1
 8002296:	6838      	ldr	r0, [r7, #0]
 8002298:	4401      	add	r1, r0
 800229a:	b2d3      	uxtb	r3, r2
 800229c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800229e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	0c02      	lsrs	r2, r0, #16
 80022ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80022b0:	0c0b      	lsrs	r3, r1, #16
 80022b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b4:	3102      	adds	r1, #2
 80022b6:	6838      	ldr	r0, [r7, #0]
 80022b8:	4401      	add	r1, r0
 80022ba:	b2d3      	uxtb	r3, r2
 80022bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80022be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	0e02      	lsrs	r2, r0, #24
 80022cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022d0:	0e0b      	lsrs	r3, r1, #24
 80022d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d4:	3103      	adds	r1, #3
 80022d6:	6838      	ldr	r0, [r7, #0]
 80022d8:	4401      	add	r1, r0
 80022da:	b2d3      	uxtb	r3, r2
 80022dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80022de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	000a      	movs	r2, r1
 80022ec:	2300      	movs	r3, #0
 80022ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f0:	3104      	adds	r1, #4
 80022f2:	6838      	ldr	r0, [r7, #0]
 80022f4:	4401      	add	r1, r0
 80022f6:	b2d3      	uxtb	r3, r2
 80022f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80022fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	0a0a      	lsrs	r2, r1, #8
 8002308:	2300      	movs	r3, #0
 800230a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800230c:	3105      	adds	r1, #5
 800230e:	6838      	ldr	r0, [r7, #0]
 8002310:	4401      	add	r1, r0
 8002312:	b2d3      	uxtb	r3, r2
 8002314:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002316:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	0c0a      	lsrs	r2, r1, #16
 8002324:	2300      	movs	r3, #0
 8002326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002328:	3106      	adds	r1, #6
 800232a:	6838      	ldr	r0, [r7, #0]
 800232c:	4401      	add	r1, r0
 800232e:	b2d3      	uxtb	r3, r2
 8002330:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002332:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	0e0a      	lsrs	r2, r1, #24
 8002340:	2300      	movs	r3, #0
 8002342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002344:	3107      	adds	r1, #7
 8002346:	6838      	ldr	r0, [r7, #0]
 8002348:	4401      	add	r1, r0
 800234a:	b2d3      	uxtb	r3, r2
 800234c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	3308      	adds	r3, #8
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800235a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800235e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002362:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002364:	6838      	ldr	r0, [r7, #0]
 8002366:	4401      	add	r1, r0
 8002368:	b2d3      	uxtb	r3, r2
 800236a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800236c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	0a02      	lsrs	r2, r0, #8
 800237a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800237e:	0a0b      	lsrs	r3, r1, #8
 8002380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002382:	3101      	adds	r1, #1
 8002384:	6838      	ldr	r0, [r7, #0]
 8002386:	4401      	add	r1, r0
 8002388:	b2d3      	uxtb	r3, r2
 800238a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800238c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	0c02      	lsrs	r2, r0, #16
 800239a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800239e:	0c0b      	lsrs	r3, r1, #16
 80023a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023a2:	3102      	adds	r1, #2
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	4401      	add	r1, r0
 80023a8:	b2d3      	uxtb	r3, r2
 80023aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80023ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	0e02      	lsrs	r2, r0, #24
 80023ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023be:	0e0b      	lsrs	r3, r1, #24
 80023c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c2:	3103      	adds	r1, #3
 80023c4:	6838      	ldr	r0, [r7, #0]
 80023c6:	4401      	add	r1, r0
 80023c8:	b2d3      	uxtb	r3, r2
 80023ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80023cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	000a      	movs	r2, r1
 80023da:	2300      	movs	r3, #0
 80023dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023de:	3104      	adds	r1, #4
 80023e0:	6838      	ldr	r0, [r7, #0]
 80023e2:	4401      	add	r1, r0
 80023e4:	b2d3      	uxtb	r3, r2
 80023e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80023e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	0a0a      	lsrs	r2, r1, #8
 80023f6:	2300      	movs	r3, #0
 80023f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023fa:	3105      	adds	r1, #5
 80023fc:	6838      	ldr	r0, [r7, #0]
 80023fe:	4401      	add	r1, r0
 8002400:	b2d3      	uxtb	r3, r2
 8002402:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002404:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	0c0a      	lsrs	r2, r1, #16
 8002412:	2300      	movs	r3, #0
 8002414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002416:	3106      	adds	r1, #6
 8002418:	6838      	ldr	r0, [r7, #0]
 800241a:	4401      	add	r1, r0
 800241c:	b2d3      	uxtb	r3, r2
 800241e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002420:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	0e0a      	lsrs	r2, r1, #24
 800242e:	2300      	movs	r3, #0
 8002430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002432:	3107      	adds	r1, #7
 8002434:	6838      	ldr	r0, [r7, #0]
 8002436:	4401      	add	r1, r0
 8002438:	b2d3      	uxtb	r3, r2
 800243a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	3308      	adds	r3, #8
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002448:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800244c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002452:	6838      	ldr	r0, [r7, #0]
 8002454:	4401      	add	r1, r0
 8002456:	b2d3      	uxtb	r3, r2
 8002458:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800245a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	0a02      	lsrs	r2, r0, #8
 8002468:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800246c:	0a0b      	lsrs	r3, r1, #8
 800246e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002470:	3101      	adds	r1, #1
 8002472:	6838      	ldr	r0, [r7, #0]
 8002474:	4401      	add	r1, r0
 8002476:	b2d3      	uxtb	r3, r2
 8002478:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800247a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	0c02      	lsrs	r2, r0, #16
 8002488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800248c:	0c0b      	lsrs	r3, r1, #16
 800248e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002490:	3102      	adds	r1, #2
 8002492:	6838      	ldr	r0, [r7, #0]
 8002494:	4401      	add	r1, r0
 8002496:	b2d3      	uxtb	r3, r2
 8002498:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800249a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	0e02      	lsrs	r2, r0, #24
 80024a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024ac:	0e0b      	lsrs	r3, r1, #24
 80024ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b0:	3103      	adds	r1, #3
 80024b2:	6838      	ldr	r0, [r7, #0]
 80024b4:	4401      	add	r1, r0
 80024b6:	b2d3      	uxtb	r3, r2
 80024b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80024ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	000a      	movs	r2, r1
 80024c8:	2300      	movs	r3, #0
 80024ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024cc:	3104      	adds	r1, #4
 80024ce:	6838      	ldr	r0, [r7, #0]
 80024d0:	4401      	add	r1, r0
 80024d2:	b2d3      	uxtb	r3, r2
 80024d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80024d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	0a0a      	lsrs	r2, r1, #8
 80024e4:	2300      	movs	r3, #0
 80024e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e8:	3105      	adds	r1, #5
 80024ea:	6838      	ldr	r0, [r7, #0]
 80024ec:	4401      	add	r1, r0
 80024ee:	b2d3      	uxtb	r3, r2
 80024f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80024f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	0c0a      	lsrs	r2, r1, #16
 8002500:	2300      	movs	r3, #0
 8002502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002504:	3106      	adds	r1, #6
 8002506:	6838      	ldr	r0, [r7, #0]
 8002508:	4401      	add	r1, r0
 800250a:	b2d3      	uxtb	r3, r2
 800250c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800250e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	0e0a      	lsrs	r2, r1, #24
 800251c:	2300      	movs	r3, #0
 800251e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002520:	3107      	adds	r1, #7
 8002522:	6838      	ldr	r0, [r7, #0]
 8002524:	4401      	add	r1, r0
 8002526:	b2d3      	uxtb	r3, r2
 8002528:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	3308      	adds	r3, #8
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002532:	4618      	mov	r0, r3
 8002534:	372c      	adds	r7, #44	; 0x2c
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800253e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002542:	b0eb      	sub	sp, #428	; 0x1ac
 8002544:	af00      	add	r7, sp, #0
 8002546:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800254a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002560:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002564:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002568:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800256c:	4413      	add	r3, r2
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2200      	movs	r2, #0
 8002574:	461c      	mov	r4, r3
 8002576:	4615      	mov	r5, r2
 8002578:	ea40 0804 	orr.w	r8, r0, r4
 800257c:	ea41 0905 	orr.w	r9, r1, r5
 8002580:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002584:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002588:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002592:	4413      	add	r3, r2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2200      	movs	r2, #0
 800259a:	469a      	mov	sl, r3
 800259c:	4693      	mov	fp, r2
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80025aa:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80025ae:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80025b2:	ea40 0402 	orr.w	r4, r0, r2
 80025b6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80025ba:	430b      	orrs	r3, r1
 80025bc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025c0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80025c4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025c8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80025cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025d0:	1c9a      	adds	r2, r3, #2
 80025d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025d6:	4413      	add	r3, r2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2200      	movs	r2, #0
 80025de:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80025e2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80025f2:	464c      	mov	r4, r9
 80025f4:	0423      	lsls	r3, r4, #16
 80025f6:	4644      	mov	r4, r8
 80025f8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80025fc:	4644      	mov	r4, r8
 80025fe:	0422      	lsls	r2, r4, #16
 8002600:	ea40 0402 	orr.w	r4, r0, r2
 8002604:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002608:	430b      	orrs	r3, r1
 800260a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800260e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002612:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002616:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800261a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800261e:	1cda      	adds	r2, r3, #3
 8002620:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002624:	4413      	add	r3, r2
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2200      	movs	r2, #0
 800262c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002630:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002634:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002638:	4623      	mov	r3, r4
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002640:	4623      	mov	r3, r4
 8002642:	061b      	lsls	r3, r3, #24
 8002644:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002648:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800264c:	4623      	mov	r3, r4
 800264e:	4303      	orrs	r3, r0
 8002650:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002654:	462b      	mov	r3, r5
 8002656:	430b      	orrs	r3, r1
 8002658:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800265c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002660:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002664:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002668:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800266c:	1d1a      	adds	r2, r3, #4
 800266e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002672:	4413      	add	r3, r2
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2200      	movs	r2, #0
 800267a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800267e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800268e:	0023      	movs	r3, r4
 8002690:	2200      	movs	r2, #0
 8002692:	ea40 0402 	orr.w	r4, r0, r2
 8002696:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800269a:	430b      	orrs	r3, r1
 800269c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80026a0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80026a4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80026a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80026ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026b0:	1d5a      	adds	r2, r3, #5
 80026b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026b6:	4413      	add	r3, r2
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2200      	movs	r2, #0
 80026be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80026c2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80026d2:	0223      	lsls	r3, r4, #8
 80026d4:	2200      	movs	r2, #0
 80026d6:	ea40 0402 	orr.w	r4, r0, r2
 80026da:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80026de:	430b      	orrs	r3, r1
 80026e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80026e4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80026e8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80026ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80026f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026f4:	1d9a      	adds	r2, r3, #6
 80026f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026fa:	4413      	add	r3, r2
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2200      	movs	r2, #0
 8002702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002706:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002716:	0423      	lsls	r3, r4, #16
 8002718:	2200      	movs	r2, #0
 800271a:	ea40 0402 	orr.w	r4, r0, r2
 800271e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002722:	430b      	orrs	r3, r1
 8002724:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002728:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800272c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002730:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002734:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002738:	1dda      	adds	r2, r3, #7
 800273a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800273e:	4413      	add	r3, r2
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2200      	movs	r2, #0
 8002746:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800274a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800275a:	0623      	lsls	r3, r4, #24
 800275c:	2200      	movs	r2, #0
 800275e:	ea40 0402 	orr.w	r4, r0, r2
 8002762:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002766:	430b      	orrs	r3, r1
 8002768:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800276c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002770:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002774:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002778:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800277c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002780:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002784:	3308      	adds	r3, #8
 8002786:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002796:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800279a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800279e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80027ae:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80027b2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80027b6:	4623      	mov	r3, r4
 80027b8:	4303      	orrs	r3, r0
 80027ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80027be:	462b      	mov	r3, r5
 80027c0:	430b      	orrs	r3, r1
 80027c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80027c6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80027ca:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027ce:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80027d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027dc:	4413      	add	r3, r2
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80027e8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80027f8:	464c      	mov	r4, r9
 80027fa:	0223      	lsls	r3, r4, #8
 80027fc:	4644      	mov	r4, r8
 80027fe:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002802:	4644      	mov	r4, r8
 8002804:	0222      	lsls	r2, r4, #8
 8002806:	ea40 0402 	orr.w	r4, r0, r2
 800280a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800280e:	430b      	orrs	r3, r1
 8002810:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002814:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002818:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800281c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002820:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002824:	1c9a      	adds	r2, r3, #2
 8002826:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800282a:	4413      	add	r3, r2
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2200      	movs	r2, #0
 8002832:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002836:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002846:	464c      	mov	r4, r9
 8002848:	0423      	lsls	r3, r4, #16
 800284a:	4644      	mov	r4, r8
 800284c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002850:	4644      	mov	r4, r8
 8002852:	0422      	lsls	r2, r4, #16
 8002854:	ea40 0402 	orr.w	r4, r0, r2
 8002858:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800285c:	430b      	orrs	r3, r1
 800285e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002862:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002866:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800286a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800286e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002872:	1cda      	adds	r2, r3, #3
 8002874:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002878:	4413      	add	r3, r2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2200      	movs	r2, #0
 8002880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002884:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002888:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800288c:	4623      	mov	r3, r4
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002894:	4623      	mov	r3, r4
 8002896:	061b      	lsls	r3, r3, #24
 8002898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800289c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80028a0:	4623      	mov	r3, r4
 80028a2:	4303      	orrs	r3, r0
 80028a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028a8:	462b      	mov	r3, r5
 80028aa:	430b      	orrs	r3, r1
 80028ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028b0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80028b4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80028b8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80028bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028c0:	1d1a      	adds	r2, r3, #4
 80028c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028c6:	4413      	add	r3, r2
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2200      	movs	r2, #0
 80028ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028d2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80028e2:	0023      	movs	r3, r4
 80028e4:	2200      	movs	r2, #0
 80028e6:	ea40 0402 	orr.w	r4, r0, r2
 80028ea:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80028ee:	430b      	orrs	r3, r1
 80028f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80028f4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80028f8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80028fc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002900:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002904:	1d5a      	adds	r2, r3, #5
 8002906:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800290a:	4413      	add	r3, r2
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2200      	movs	r2, #0
 8002912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002916:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002926:	0223      	lsls	r3, r4, #8
 8002928:	2200      	movs	r2, #0
 800292a:	ea40 0402 	orr.w	r4, r0, r2
 800292e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002932:	430b      	orrs	r3, r1
 8002934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002938:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800293c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002940:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002944:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002948:	1d9a      	adds	r2, r3, #6
 800294a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800294e:	4413      	add	r3, r2
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2200      	movs	r2, #0
 8002956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800295a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800296a:	0423      	lsls	r3, r4, #16
 800296c:	2200      	movs	r2, #0
 800296e:	ea40 0402 	orr.w	r4, r0, r2
 8002972:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002976:	430b      	orrs	r3, r1
 8002978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800297c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002980:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002984:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002988:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800298c:	1dda      	adds	r2, r3, #7
 800298e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002992:	4413      	add	r3, r2
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2200      	movs	r2, #0
 800299a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800299e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80029ae:	0623      	lsls	r3, r4, #24
 80029b0:	2200      	movs	r2, #0
 80029b2:	ea40 0402 	orr.w	r4, r0, r2
 80029b6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80029ba:	430b      	orrs	r3, r1
 80029bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029c0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80029c4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80029c8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80029cc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80029d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80029d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029d8:	3308      	adds	r3, #8
 80029da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029ea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80029ee:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80029f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029f6:	4413      	add	r3, r2
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a02:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002a06:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	4303      	orrs	r3, r0
 8002a0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a10:	462b      	mov	r3, r5
 8002a12:	430b      	orrs	r3, r1
 8002a14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a16:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002a1a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a1e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a2c:	4413      	add	r3, r2
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2200      	movs	r2, #0
 8002a34:	673b      	str	r3, [r7, #112]	; 0x70
 8002a36:	677a      	str	r2, [r7, #116]	; 0x74
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a44:	464c      	mov	r4, r9
 8002a46:	0223      	lsls	r3, r4, #8
 8002a48:	4644      	mov	r4, r8
 8002a4a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a4e:	4644      	mov	r4, r8
 8002a50:	0222      	lsls	r2, r4, #8
 8002a52:	ea40 0402 	orr.w	r4, r0, r2
 8002a56:	66bc      	str	r4, [r7, #104]	; 0x68
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a5c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002a60:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a64:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a6c:	1c9a      	adds	r2, r3, #2
 8002a6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a72:	4413      	add	r3, r2
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2200      	movs	r2, #0
 8002a7a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a7c:	667a      	str	r2, [r7, #100]	; 0x64
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a8a:	464c      	mov	r4, r9
 8002a8c:	0423      	lsls	r3, r4, #16
 8002a8e:	4644      	mov	r4, r8
 8002a90:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a94:	4644      	mov	r4, r8
 8002a96:	0422      	lsls	r2, r4, #16
 8002a98:	ea40 0402 	orr.w	r4, r0, r2
 8002a9c:	65bc      	str	r4, [r7, #88]	; 0x58
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aa2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002aa6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002aaa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002aae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ab2:	1cda      	adds	r2, r3, #3
 8002ab4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ab8:	4413      	add	r3, r2
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2200      	movs	r2, #0
 8002ac0:	653b      	str	r3, [r7, #80]	; 0x50
 8002ac2:	657a      	str	r2, [r7, #84]	; 0x54
 8002ac4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002ac8:	4623      	mov	r3, r4
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ace:	4623      	mov	r3, r4
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ad4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002ad8:	4623      	mov	r3, r4
 8002ada:	4303      	orrs	r3, r0
 8002adc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ade:	462b      	mov	r3, r5
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002ae8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002aec:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002af0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002af4:	1d1a      	adds	r2, r3, #4
 8002af6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002afa:	4413      	add	r3, r2
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2200      	movs	r2, #0
 8002b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002b10:	0023      	movs	r3, r4
 8002b12:	2200      	movs	r2, #0
 8002b14:	ea40 0402 	orr.w	r4, r0, r2
 8002b18:	633c      	str	r4, [r7, #48]	; 0x30
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b1e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002b22:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b26:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002b2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b2e:	1d5a      	adds	r2, r3, #5
 8002b30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002b4a:	0223      	lsls	r3, r4, #8
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	ea40 0402 	orr.w	r4, r0, r2
 8002b52:	623c      	str	r4, [r7, #32]
 8002b54:	430b      	orrs	r3, r1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002b5c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b60:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002b64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b68:	3306      	adds	r3, #6
 8002b6a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2200      	movs	r2, #0
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	61fa      	str	r2, [r7, #28]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	69bc      	ldr	r4, [r7, #24]
 8002b84:	0423      	lsls	r3, r4, #16
 8002b86:	2200      	movs	r2, #0
 8002b88:	ea40 0402 	orr.w	r4, r0, r2
 8002b8c:	613c      	str	r4, [r7, #16]
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b96:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002b9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ba2:	3307      	adds	r3, #7
 8002ba4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002ba8:	4413      	add	r3, r2
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	60fa      	str	r2, [r7, #12]
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	68bc      	ldr	r4, [r7, #8]
 8002bbe:	0623      	lsls	r3, r4, #24
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	ea40 0402 	orr.w	r4, r0, r2
 8002bc6:	603c      	str	r4, [r7, #0]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002bd0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002bd4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002bd8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002bdc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002be0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002be4:	3308      	adds	r3, #8
 8002be6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002bea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002bfa:	4770      	bx	lr

08002bfc <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	0800a1d0 	.word	0x0800a1d0

08002c18 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	0800a1e8 	.word	0x0800a1e8

08002c34 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fad2 	bl	80021e8 <_ZN3ros3MsgC1Ev>
 8002c44:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fada 	bl	8002208 <_ZN13geometry_msgs7Vector3C1Ev>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3328      	adds	r3, #40	; 0x28
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fad5 	bl	8002208 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	0800a448 	.word	0x0800a448

08002c6c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f103 0008 	add.w	r0, r3, #8
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	4413      	add	r3, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	f7ff fae6 	bl	8002258 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4413      	add	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f7ff fad9 	bl	8002258 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
      return offset;
 8002cae:	68fb      	ldr	r3, [r7, #12]
    }
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f103 0008 	add.w	r0, r3, #8
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f7ff fc33 	bl	800253e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4413      	add	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	f7ff fc26 	bl	800253e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
     return offset;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    }
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	0800a20c 	.word	0x0800a20c

08002d20 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	0800a220 	.word	0x0800a220

08002d3c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fa4e 	bl	80021e8 <_ZN3ros3MsgC1Ev>
 8002d4c:	4a06      	ldr	r2, [pc, #24]	; (8002d68 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	711a      	strb	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002d5c:	609a      	str	r2, [r3, #8]
    {
    }
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	0800a430 	.word	0x0800a430
 8002d6c:	0800a244 	.word	0x0800a244

08002d70 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	7912      	ldrb	r2, [r2, #4]
 8002d88:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fa2b 	bl	80001f0 <strlen>
 8002d9a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 ffed 	bl	8003d84 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3304      	adds	r3, #4
 8002dae:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	18d0      	adds	r0, r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f007 f861 	bl	8009e84 <memcpy>
      offset += length_msg;
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
      return offset;
 8002dca:	68fb      	ldr	r3, [r7, #12]
    }
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	4413      	add	r3, r2
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	3301      	adds	r3, #1
 8002df2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	441a      	add	r2, r3
 8002dfa:	f107 030c 	add.w	r3, r7, #12
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 ffdd 	bl	8003dc0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4413      	add	r3, r2
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d20c      	bcs.n	8002e36 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	441a      	add	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	6839      	ldr	r1, [r7, #0]
 8002e28:	440b      	add	r3, r1
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3301      	adds	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	e7ec      	b.n	8002e10 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	4413      	add	r3, r2
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	441a      	add	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
     return offset;
 8002e5a:	693b      	ldr	r3, [r7, #16]
    }
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	0800a248 	.word	0x0800a248

08002e80 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	0800a25c 	.word	0x0800a25c

08002e9c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff f99e 	bl	80021e8 <_ZN3ros3MsgC1Ev>
 8002eac:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	619a      	str	r2, [r3, #24]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	61da      	str	r2, [r3, #28]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	0800a418 	.word	0x0800a418

08002ee4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	b2ca      	uxtb	r2, r1
 8002efe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	0a19      	lsrs	r1, r3, #8
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	3301      	adds	r3, #1
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	b2ca      	uxtb	r2, r1
 8002f10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	0c19      	lsrs	r1, r3, #16
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	b2ca      	uxtb	r2, r1
 8002f22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	0e19      	lsrs	r1, r3, #24
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	3303      	adds	r3, #3
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	4413      	add	r3, r2
 8002f32:	b2ca      	uxtb	r2, r1
 8002f34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	3304      	adds	r3, #4
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	623b      	str	r3, [r7, #32]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	6a3a      	ldr	r2, [r7, #32]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d22b      	bcs.n	8002fa2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002f58:	6939      	ldr	r1, [r7, #16]
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	b2ca      	uxtb	r2, r1
 8002f62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	0a19      	lsrs	r1, r3, #8
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	b2ca      	uxtb	r2, r1
 8002f72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	0c19      	lsrs	r1, r3, #16
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	b2ca      	uxtb	r2, r1
 8002f82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	0e19      	lsrs	r1, r3, #24
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	3303      	adds	r3, #3
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	b2ca      	uxtb	r2, r1
 8002f92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	3304      	adds	r3, #4
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	e7ce      	b.n	8002f40 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6919      	ldr	r1, [r3, #16]
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	b2ca      	uxtb	r2, r1
 8002fae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	0a19      	lsrs	r1, r3, #8
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	3301      	adds	r3, #1
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	b2ca      	uxtb	r2, r1
 8002fc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	0c19      	lsrs	r1, r3, #16
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	3302      	adds	r3, #2
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	4413      	add	r3, r2
 8002fd0:	b2ca      	uxtb	r2, r1
 8002fd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	0e19      	lsrs	r1, r3, #24
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	3303      	adds	r3, #3
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	b2ca      	uxtb	r2, r1
 8002fe4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	3304      	adds	r3, #4
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002fec:	2300      	movs	r3, #0
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d22b      	bcs.n	8003052 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	4413      	add	r3, r2
 8003010:	b2ca      	uxtb	r2, r1
 8003012:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	0a19      	lsrs	r1, r3, #8
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	3301      	adds	r3, #1
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	4413      	add	r3, r2
 8003020:	b2ca      	uxtb	r2, r1
 8003022:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	0c19      	lsrs	r1, r3, #16
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	3302      	adds	r3, #2
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	4413      	add	r3, r2
 8003030:	b2ca      	uxtb	r2, r1
 8003032:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	0e19      	lsrs	r1, r3, #24
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	3303      	adds	r3, #3
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	4413      	add	r3, r2
 8003040:	b2ca      	uxtb	r2, r1
 8003042:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	3304      	adds	r3, #4
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3301      	adds	r3, #1
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	e7ce      	b.n	8002ff0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69d9      	ldr	r1, [r3, #28]
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	4413      	add	r3, r2
 800305c:	b2ca      	uxtb	r2, r1
 800305e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	0a19      	lsrs	r1, r3, #8
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	3301      	adds	r3, #1
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	4413      	add	r3, r2
 800306e:	b2ca      	uxtb	r2, r1
 8003070:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	0c19      	lsrs	r1, r3, #16
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	3302      	adds	r3, #2
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	4413      	add	r3, r2
 8003080:	b2ca      	uxtb	r2, r1
 8003082:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	0e19      	lsrs	r1, r3, #24
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	3303      	adds	r3, #3
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	4413      	add	r3, r2
 8003092:	b2ca      	uxtb	r2, r1
 8003094:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	3304      	adds	r3, #4
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d228      	bcs.n	80030fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd f89a 	bl	80001f0 <strlen>
 80030bc:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	6979      	ldr	r1, [r7, #20]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fe5c 	bl	8003d84 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	3304      	adds	r3, #4
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	18d0      	adds	r0, r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4619      	mov	r1, r3
 80030e8:	f006 fecc 	bl	8009e84 <memcpy>
      offset += length_stringsi;
 80030ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	4413      	add	r3, r2
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	3301      	adds	r3, #1
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	e7d1      	b.n	80030a0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80030fe:	4618      	mov	r0, r3
 8003100:	3728      	adds	r7, #40	; 0x28
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003106:	b580      	push	{r7, lr}
 8003108:	b08e      	sub	sp, #56	; 0x38
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	4413      	add	r3, r2
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003120:	3301      	adds	r3, #1
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	4413      	add	r3, r2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	6a3a      	ldr	r2, [r7, #32]
 800312c:	4313      	orrs	r3, r2
 800312e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003132:	3302      	adds	r3, #2
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	4413      	add	r3, r2
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	041b      	lsls	r3, r3, #16
 800313c:	6a3a      	ldr	r2, [r7, #32]
 800313e:	4313      	orrs	r3, r2
 8003140:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003144:	3303      	adds	r3, #3
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	4413      	add	r3, r2
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	061b      	lsls	r3, r3, #24
 800314e:	6a3a      	ldr	r2, [r7, #32]
 8003150:	4313      	orrs	r3, r2
 8003152:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003156:	3304      	adds	r3, #4
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	6a3a      	ldr	r2, [r7, #32]
 8003160:	429a      	cmp	r2, r3
 8003162:	d90a      	bls.n	800317a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f006 fe9e 	bl	8009eb0 <realloc>
 8003174:	4602      	mov	r2, r0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a3a      	ldr	r2, [r7, #32]
 800317e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003180:	2300      	movs	r3, #0
 8003182:	633b      	str	r3, [r7, #48]	; 0x30
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318a:	429a      	cmp	r2, r3
 800318c:	d236      	bcs.n	80031fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003196:	6839      	ldr	r1, [r7, #0]
 8003198:	440a      	add	r2, r1
 800319a:	7812      	ldrb	r2, [r2, #0]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a4:	3301      	adds	r3, #1
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	440b      	add	r3, r1
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b6:	3302      	adds	r3, #2
 80031b8:	6839      	ldr	r1, [r7, #0]
 80031ba:	440b      	add	r3, r1
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c8:	3303      	adds	r3, #3
 80031ca:	6839      	ldr	r1, [r7, #0]
 80031cc:	440b      	add	r3, r1
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80031dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031de:	3304      	adds	r3, #4
 80031e0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	3301      	adds	r3, #1
 80031f8:	633b      	str	r3, [r7, #48]	; 0x30
 80031fa:	e7c3      	b.n	8003184 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80031fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	4413      	add	r3, r2
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003208:	3301      	adds	r3, #1
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	4413      	add	r3, r2
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	4313      	orrs	r3, r2
 8003216:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321a:	3302      	adds	r3, #2
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	4413      	add	r3, r2
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	041b      	lsls	r3, r3, #16
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	4313      	orrs	r3, r2
 8003228:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800322a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322c:	3303      	adds	r3, #3
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	4413      	add	r3, r2
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	4313      	orrs	r3, r2
 800323a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800323c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323e:	3304      	adds	r3, #4
 8003240:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	429a      	cmp	r2, r3
 800324a:	d90a      	bls.n	8003262 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4619      	mov	r1, r3
 8003256:	4610      	mov	r0, r2
 8003258:	f006 fe2a 	bl	8009eb0 <realloc>
 800325c:	4602      	mov	r2, r0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003268:	2300      	movs	r3, #0
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003272:	429a      	cmp	r2, r3
 8003274:	d236      	bcs.n	80032e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800327e:	6839      	ldr	r1, [r7, #0]
 8003280:	440a      	add	r2, r1
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328c:	3301      	adds	r3, #1
 800328e:	6839      	ldr	r1, [r7, #0]
 8003290:	440b      	add	r3, r1
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329e:	3302      	adds	r3, #2
 80032a0:	6839      	ldr	r1, [r7, #0]
 80032a2:	440b      	add	r3, r1
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b0:	3303      	adds	r3, #3
 80032b2:	6839      	ldr	r1, [r7, #0]
 80032b4:	440b      	add	r3, r1
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80032c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c6:	3304      	adds	r3, #4
 80032c8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	3214      	adds	r2, #20
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	3301      	adds	r3, #1
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e2:	e7c3      	b.n	800326c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80032e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	4413      	add	r3, r2
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80032ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f0:	3301      	adds	r3, #1
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	4413      	add	r3, r2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003302:	3302      	adds	r3, #2
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	4413      	add	r3, r2
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003314:	3303      	adds	r3, #3
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4413      	add	r3, r2
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003326:	3304      	adds	r3, #4
 8003328:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	429a      	cmp	r2, r3
 8003332:	d90a      	bls.n	800334a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f006 fdb6 	bl	8009eb0 <realloc>
 8003344:	4602      	mov	r2, r0
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003350:	2300      	movs	r3, #0
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800335a:	429a      	cmp	r2, r3
 800335c:	d23f      	bcs.n	80033de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800335e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	441a      	add	r2, r3
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fd28 	bl	8003dc0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003372:	3304      	adds	r3, #4
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003382:	429a      	cmp	r2, r3
 8003384:	d20c      	bcs.n	80033a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	441a      	add	r2, r3
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	3b01      	subs	r3, #1
 8003390:	6839      	ldr	r1, [r7, #0]
 8003392:	440b      	add	r3, r1
 8003394:	7812      	ldrb	r2, [r2, #0]
 8003396:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	3301      	adds	r3, #1
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
 800339e:	e7ec      	b.n	800337a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80033a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	3b01      	subs	r3, #1
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80033b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b2:	3b01      	subs	r3, #1
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	441a      	add	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80033bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4413      	add	r3, r2
 80033c2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	3220      	adds	r2, #32
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80033d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d8:	3301      	adds	r3, #1
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
 80033dc:	e7ba      	b.n	8003354 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80033de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80033e0:	4618      	mov	r0, r3
 80033e2:	3738      	adds	r7, #56	; 0x38
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	0800a36c 	.word	0x0800a36c

08003404 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	0800a280 	.word	0x0800a280

08003420 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe fedc 	bl	80021e8 <_ZN3ros3MsgC1Ev>
 8003430:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	809a      	strh	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a07      	ldr	r2, [pc, #28]	; (8003464 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a06      	ldr	r2, [pc, #24]	; (8003464 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800344c:	611a      	str	r2, [r3, #16]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	615a      	str	r2, [r3, #20]
    {
    }
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	0800a400 	.word	0x0800a400
 8003464:	0800a244 	.word	0x0800a244

08003468 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8899      	ldrh	r1, [r3, #4]
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	4413      	add	r3, r2
 8003480:	b2ca      	uxtb	r2, r1
 8003482:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	889b      	ldrh	r3, [r3, #4]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	b299      	uxth	r1, r3
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	3301      	adds	r3, #1
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	4413      	add	r3, r2
 8003494:	b2ca      	uxtb	r2, r1
 8003496:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	3302      	adds	r3, #2
 800349c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fc fea4 	bl	80001f0 <strlen>
 80034a8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	69b9      	ldr	r1, [r7, #24]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fc66 	bl	8003d84 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	3304      	adds	r3, #4
 80034bc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	18d0      	adds	r0, r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4619      	mov	r1, r3
 80034cc:	f006 fcda 	bl	8009e84 <memcpy>
      offset += length_topic_name;
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	4413      	add	r3, r2
 80034d6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fc fe87 	bl	80001f0 <strlen>
 80034e2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	4413      	add	r3, r2
 80034ea:	6979      	ldr	r1, [r7, #20]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fc49 	bl	8003d84 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3304      	adds	r3, #4
 80034f6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	18d0      	adds	r0, r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4619      	mov	r1, r3
 8003506:	f006 fcbd 	bl	8009e84 <memcpy>
      offset += length_message_type;
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	4413      	add	r3, r2
 8003510:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fc fe6a 	bl	80001f0 <strlen>
 800351c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	4413      	add	r3, r2
 8003524:	6939      	ldr	r1, [r7, #16]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fc2c 	bl	8003d84 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	3304      	adds	r3, #4
 8003530:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	18d0      	adds	r0, r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4619      	mov	r1, r3
 8003540:	f006 fca0 	bl	8009e84 <memcpy>
      offset += length_md5sum;
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4413      	add	r3, r2
 800354a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	4413      	add	r3, r2
 800355a:	b2ca      	uxtb	r2, r1
 800355c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	0a19      	lsrs	r1, r3, #8
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3301      	adds	r3, #1
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	4413      	add	r3, r2
 800356a:	b2ca      	uxtb	r2, r1
 800356c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	0c19      	lsrs	r1, r3, #16
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3302      	adds	r3, #2
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	4413      	add	r3, r2
 800357a:	b2ca      	uxtb	r2, r1
 800357c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	0e19      	lsrs	r1, r3, #24
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3303      	adds	r3, #3
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	4413      	add	r3, r2
 800358a:	b2ca      	uxtb	r2, r1
 800358c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3304      	adds	r3, #4
 8003592:	61fb      	str	r3, [r7, #28]
      return offset;
 8003594:	69fb      	ldr	r3, [r7, #28]
    }
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800359e:	b580      	push	{r7, lr}
 80035a0:	b08a      	sub	sp, #40	; 0x28
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	4413      	add	r3, r2
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	889b      	ldrh	r3, [r3, #4]
 80035be:	b21a      	sxth	r2, r3
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	3301      	adds	r3, #1
 80035c4:	6839      	ldr	r1, [r7, #0]
 80035c6:	440b      	add	r3, r1
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	4313      	orrs	r3, r2
 80035d0:	b21b      	sxth	r3, r3
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	3302      	adds	r3, #2
 80035dc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	441a      	add	r2, r3
 80035e4:	f107 0314 	add.w	r3, r7, #20
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fbe8 	bl	8003dc0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	3304      	adds	r3, #4
 80035f4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	4413      	add	r3, r2
 8003600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003602:	429a      	cmp	r2, r3
 8003604:	d20c      	bcs.n	8003620 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	441a      	add	r2, r3
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	3b01      	subs	r3, #1
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	440b      	add	r3, r1
 8003614:	7812      	ldrb	r2, [r2, #0]
 8003616:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	3301      	adds	r3, #1
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
 800361e:	e7ec      	b.n	80035fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	4413      	add	r3, r2
 8003626:	3b01      	subs	r3, #1
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	4413      	add	r3, r2
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	3b01      	subs	r3, #1
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	441a      	add	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	4413      	add	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	441a      	add	r2, r3
 800364a:	f107 0310 	add.w	r3, r7, #16
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fbb5 	bl	8003dc0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	3304      	adds	r3, #4
 800365a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	623b      	str	r3, [r7, #32]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	6a3a      	ldr	r2, [r7, #32]
 8003668:	429a      	cmp	r2, r3
 800366a:	d20c      	bcs.n	8003686 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	441a      	add	r2, r3
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	3b01      	subs	r3, #1
 8003676:	6839      	ldr	r1, [r7, #0]
 8003678:	440b      	add	r3, r1
 800367a:	7812      	ldrb	r2, [r2, #0]
 800367c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	3301      	adds	r3, #1
 8003682:	623b      	str	r3, [r7, #32]
 8003684:	e7ec      	b.n	8003660 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4413      	add	r3, r2
 800368c:	3b01      	subs	r3, #1
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	4413      	add	r3, r2
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	3b01      	subs	r3, #1
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	441a      	add	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4413      	add	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	441a      	add	r2, r3
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fb82 	bl	8003dc0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	3304      	adds	r3, #4
 80036c0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d20c      	bcs.n	80036ec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	441a      	add	r2, r3
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	3b01      	subs	r3, #1
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	440b      	add	r3, r1
 80036e0:	7812      	ldrb	r2, [r2, #0]
 80036e2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	3301      	adds	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	e7ec      	b.n	80036c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4413      	add	r3, r2
 80036f2:	3b01      	subs	r3, #1
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	4413      	add	r3, r2
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	3b01      	subs	r3, #1
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	441a      	add	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4413      	add	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	6839      	ldr	r1, [r7, #0]
 800371a:	440a      	add	r2, r1
 800371c:	7812      	ldrb	r2, [r2, #0]
 800371e:	4313      	orrs	r3, r2
 8003720:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	3301      	adds	r3, #1
 8003728:	6839      	ldr	r1, [r7, #0]
 800372a:	440b      	add	r3, r1
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	4313      	orrs	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	3302      	adds	r3, #2
 800373a:	6839      	ldr	r1, [r7, #0]
 800373c:	440b      	add	r3, r1
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	4313      	orrs	r3, r2
 8003744:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	3303      	adds	r3, #3
 800374c:	6839      	ldr	r1, [r7, #0]
 800374e:	440b      	add	r3, r1
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	4313      	orrs	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	3304      	adds	r3, #4
 8003762:	61bb      	str	r3, [r7, #24]
     return offset;
 8003764:	69bb      	ldr	r3, [r7, #24]
    }
 8003766:	4618      	mov	r0, r3
 8003768:	3728      	adds	r7, #40	; 0x28
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	0800a2a4 	.word	0x0800a2a4

0800378c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	0800a2c0 	.word	0x0800a2c0

080037a8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
      data()
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fd06 	bl	80021e8 <_ZN3ros3MsgC1Ev>
 80037dc:	4a06      	ldr	r2, [pc, #24]	; (80037f8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ffde 	bl	80037a8 <_ZN3ros4TimeC1Ev>
    {
    }
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	0800a3e8 	.word	0x0800a3e8

080037fc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	4413      	add	r3, r2
 8003814:	b2ca      	uxtb	r2, r1
 8003816:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0a19      	lsrs	r1, r3, #8
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3301      	adds	r3, #1
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	b2ca      	uxtb	r2, r1
 8003828:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	0c19      	lsrs	r1, r3, #16
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3302      	adds	r3, #2
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	4413      	add	r3, r2
 8003838:	b2ca      	uxtb	r2, r1
 800383a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	0e19      	lsrs	r1, r3, #24
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3303      	adds	r3, #3
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	4413      	add	r3, r2
 800384a:	b2ca      	uxtb	r2, r1
 800384c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3304      	adds	r3, #4
 8003852:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6899      	ldr	r1, [r3, #8]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	4413      	add	r3, r2
 800385e:	b2ca      	uxtb	r2, r1
 8003860:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	0a19      	lsrs	r1, r3, #8
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3301      	adds	r3, #1
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	4413      	add	r3, r2
 8003870:	b2ca      	uxtb	r2, r1
 8003872:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	0c19      	lsrs	r1, r3, #16
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3302      	adds	r3, #2
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	4413      	add	r3, r2
 8003882:	b2ca      	uxtb	r2, r1
 8003884:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	0e19      	lsrs	r1, r3, #24
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	3303      	adds	r3, #3
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	4413      	add	r3, r2
 8003894:	b2ca      	uxtb	r2, r1
 8003896:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	3304      	adds	r3, #4
 800389c:	60fb      	str	r3, [r7, #12]
      return offset;
 800389e:	68fb      	ldr	r3, [r7, #12]
    }
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	4413      	add	r3, r2
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3301      	adds	r3, #1
 80038d0:	6839      	ldr	r1, [r7, #0]
 80038d2:	440b      	add	r3, r1
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3302      	adds	r3, #2
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	440b      	add	r3, r1
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3303      	adds	r3, #3
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	440b      	add	r3, r1
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3304      	adds	r3, #4
 800390e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	4413      	add	r3, r2
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3301      	adds	r3, #1
 8003926:	6839      	ldr	r1, [r7, #0]
 8003928:	440b      	add	r3, r1
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	3302      	adds	r3, #2
 800393c:	6839      	ldr	r1, [r7, #0]
 800393e:	440b      	add	r3, r1
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3303      	adds	r3, #3
 8003952:	6839      	ldr	r1, [r7, #0]
 8003954:	440b      	add	r3, r1
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3304      	adds	r3, #4
 8003964:	60fb      	str	r3, [r7, #12]
     return offset;
 8003966:	68fb      	ldr	r3, [r7, #12]
    }
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	0800a2e4 	.word	0x0800a2e4

08003990 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	0800a2f4 	.word	0x0800a2f4

080039ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	611a      	str	r2, [r3, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68d8      	ldr	r0, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6891      	ldr	r1, [r2, #8]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	4798      	blx	r3
 80039f8:	4603      	mov	r3, r0
  };
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
  }
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <_ZN13STM32HardwareC1Ev+0x34>)
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	20001d98 	.word	0x20001d98

08003a78 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f804 	bl	8003a8e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f004 fe92 	bl	80087cc <HAL_UART_Receive_DMA>
    }
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <_ZN13STM32Hardware4readEv>:

    int read(){
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
      int c = -1;
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8003abc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ffa8 	bl	8003a1a <_ZN13STM32Hardware10getRdmaIndEv>
 8003aca:	4603      	mov	r3, r0
 8003acc:	429c      	cmp	r4, r3
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d012      	beq.n	8003b00 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003ae0:	1c59      	adds	r1, r3, #1
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	791b      	ldrb	r3, [r3, #4]
 8003aee:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8003b00:	68fb      	ldr	r3, [r7, #12]
    }
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd90      	pop	{r4, r7, pc}
	...

08003b0c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d108      	bne.n	8003b34 <_ZN13STM32Hardware5flushEv+0x28>
 8003b22:	4b28      	ldr	r3, [pc, #160]	; (8003bc4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	f083 0301 	eor.w	r3, r3, #1
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <_ZN13STM32Hardware5flushEv+0x28>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <_ZN13STM32Hardware5flushEv+0x2a>
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d03f      	beq.n	8003bba <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d031      	beq.n	8003bb4 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d20a      	bcs.n	8003b76 <_ZN13STM32Hardware5flushEv+0x6a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	e006      	b.n	8003b84 <_ZN13STM32Hardware5flushEv+0x78>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003b90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	4413      	add	r3, r2
 8003b98:	89fa      	ldrh	r2, [r7, #14]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f004 fd98 	bl	80086d0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003ba6:	89fb      	ldrh	r3, [r7, #14]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
      }
    }
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20001110 	.word	0x20001110

08003bc8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
      int n = length;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bde:	bfa8      	it	ge
 8003be0:	f44f 7300 	movge.w	r3, #512	; 0x200
 8003be4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003bec:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	bf28      	it	cs
 8003bf6:	4613      	movcs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003c00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f006 f939 	bl	8009e84 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d00b      	beq.n	8003c46 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	18d1      	adds	r1, r2, r3
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	f006 f91f 	bl	8009e84 <memcpy>
      }

      flush();
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff ff60 	bl	8003b0c <_ZN13STM32Hardware5flushEv>
    }
 8003c4c:	bf00      	nop
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	f001 ff86 	bl	8005b6c <HAL_GetTick>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include <rosserial.h>
#include <Rosserial_STM32_Inc/geometry_msgs/Twist.h>
#include <Rosserial_STM32_Inc/ros.h>

void vel_callback(const geometry_msgs::Twist &msg)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	received_vel.vx = msg.linear.x;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c7a:	490a      	ldr	r1, [pc, #40]	; (8003ca4 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8003c7c:	e9c1 2300 	strd	r2, r3, [r1]
	received_vel.vy = msg.linear.y;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c86:	4907      	ldr	r1, [pc, #28]	; (8003ca4 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8003c88:	e9c1 2302 	strd	r2, r3, [r1, #8]
	received_vel.w 	= msg.angular.z;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003c92:	4904      	ldr	r1, [pc, #16]	; (8003ca4 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8003c94:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20001070 	.word	0x20001070

08003ca8 <HAL_UART_TxCpltCallback>:
ros::NodeHandle nh;
ros::Publisher pub("base_speed", &real_speed);
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003cb0:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <HAL_UART_TxCpltCallback+0x20>)
 8003cb2:	f000 f96f 	bl	8003f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff27 	bl	8003b0c <_ZN13STM32Hardware5flushEv>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20001160 	.word	0x20001160

08003ccc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003cd4:	4805      	ldr	r0, [pc, #20]	; (8003cec <HAL_UART_RxCpltCallback+0x20>)
 8003cd6:	f000 f95d 	bl	8003f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fed6 	bl	8003a8e <_ZN13STM32Hardware10reset_rbufEv>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20001160 	.word	0x20001160

08003cf0 <rosserial_setup>:

void rosserial_setup(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
    nh.initNode();
 8003cf4:	4807      	ldr	r0, [pc, #28]	; (8003d14 <rosserial_setup+0x24>)
 8003cf6:	f000 f959 	bl	8003fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.advertise(pub);
 8003cfa:	4907      	ldr	r1, [pc, #28]	; (8003d18 <rosserial_setup+0x28>)
 8003cfc:	4805      	ldr	r0, [pc, #20]	; (8003d14 <rosserial_setup+0x24>)
 8003cfe:	f000 f972 	bl	8003fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.subscribe(vel_sub);
 8003d02:	4906      	ldr	r1, [pc, #24]	; (8003d1c <rosserial_setup+0x2c>)
 8003d04:	4803      	ldr	r0, [pc, #12]	; (8003d14 <rosserial_setup+0x24>)
 8003d06:	f000 f99e 	bl	8004046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    HAL_TIM_Base_Start_IT (&htim6);
 8003d0a:	4805      	ldr	r0, [pc, #20]	; (8003d20 <rosserial_setup+0x30>)
 8003d0c:	f003 fb72 	bl	80073f4 <HAL_TIM_Base_Start_IT>
}
 8003d10:	bf00      	nop
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20001160 	.word	0x20001160
 8003d18:	20001a9c 	.word	0x20001a9c
 8003d1c:	20001ab0 	.word	0x20001ab0
 8003d20:	20001c34 	.word	0x20001c34

08003d24 <odom_store>:

void odom_store(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
	real_speed.linear.x  = odom_vel.vx;
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <odom_store+0x34>)
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	490b      	ldr	r1, [pc, #44]	; (8003d5c <odom_store+0x38>)
 8003d30:	e9c1 2304 	strd	r2, r3, [r1, #16]
	real_speed.linear.y  = odom_vel.vy;
 8003d34:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <odom_store+0x34>)
 8003d36:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d3a:	4908      	ldr	r1, [pc, #32]	; (8003d5c <odom_store+0x38>)
 8003d3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	real_speed.angular.z = odom_vel.w;
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <odom_store+0x34>)
 8003d42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d46:	4905      	ldr	r1, [pc, #20]	; (8003d5c <odom_store+0x38>)
 8003d48:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8003d4c:	bf00      	nop
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20001088 	.word	0x20001088
 8003d5c:	20001118 	.word	0x20001118

08003d60 <odom_pub>:

void odom_pub(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
	pub.publish(&real_speed);
 8003d64:	4904      	ldr	r1, [pc, #16]	; (8003d78 <odom_pub+0x18>)
 8003d66:	4805      	ldr	r0, [pc, #20]	; (8003d7c <odom_pub+0x1c>)
 8003d68:	f7ff fe37 	bl	80039da <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 8003d6c:	4804      	ldr	r0, [pc, #16]	; (8003d80 <odom_pub+0x20>)
 8003d6e:	f000 f995 	bl	800409c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20001118 	.word	0x20001118
 8003d7c:	20001a9c 	.word	0x20001a9c
 8003d80:	20001160 	.word	0x20001160

08003d84 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d80d      	bhi.n	8003db4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	fa22 f103 	lsr.w	r1, r2, r3
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	b2ca      	uxtb	r2, r1
 8003daa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3301      	adds	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	e7ee      	b.n	8003d92 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d811      	bhi.n	8003dfe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6839      	ldr	r1, [r7, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	440a      	add	r2, r1
 8003de4:	7812      	ldrb	r2, [r2, #0]
 8003de6:	4611      	mov	r1, r2
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	00d2      	lsls	r2, r2, #3
 8003dec:	fa01 f202 	lsl.w	r2, r1, r2
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	e7ea      	b.n	8003dd4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <_ZN3ros15NodeHandleBase_C1Ev>:


namespace ros
{

class NodeHandleBase_
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	0800a3d4 	.word	0x0800a3d4

08003e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff ffe8 	bl	8003e0c <_ZN3ros15NodeHandleBase_C1Ev>
 8003e3c:	4a3a      	ldr	r2, [pc, #232]	; (8003f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3304      	adds	r3, #4
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fdfa 	bl	8003a40 <_ZN13STM32HardwareC1Ev>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff f81e 	bl	8002e9c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b18      	cmp	r3, #24
 8003e68:	d80b      	bhi.n	8003e82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	2200      	movs	r2, #0
 8003e78:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	e7f0      	b.n	8003e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b18      	cmp	r3, #24
 8003e8a:	d80a      	bhi.n	8003ea2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e94:	2100      	movs	r1, #0
 8003e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	e7f1      	b.n	8003e86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eac:	d20a      	bcs.n	8003ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e7f0      	b.n	8003ea6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ece:	d20a      	bcs.n	8003ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003eda:	2200      	movs	r2, #0
 8003edc:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	e7f0      	b.n	8003ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	0800a3a8 	.word	0x0800a3a8

08003f2c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	0800a3bc 	.word	0x0800a3bc

08003f4c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ffe5 	bl	8003f2c <_ZN3ros11Subscriber_C1Ev>
 8003f62:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe fe61 	bl	8002c34 <_ZN13geometry_msgs5TwistC1Ev>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	659a      	str	r2, [r3, #88]	; 0x58
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	609a      	str	r2, [r3, #8]
  };
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	0800a390 	.word	0x0800a390

08003f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
  }
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fd5d 	bl	8003a78 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003fe6:	b480      	push	{r7}
 8003fe8:	b085      	sub	sp, #20
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b18      	cmp	r3, #24
 8003ff8:	dc1e      	bgt.n	8004038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d111      	bne.n	8004030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	60da      	str	r2, [r3, #12]
        return true;
 800402c:	2301      	movs	r3, #1
 800402e:	e004      	b.n	800403a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3301      	adds	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	e7dd      	b.n	8003ff4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8004038:	2300      	movs	r3, #0
  }
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b18      	cmp	r3, #24
 8004058:	dc19      	bgt.n	800408e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10d      	bne.n	8004086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800406a:	6839      	ldr	r1, [r7, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	605a      	str	r2, [r3, #4]
        return true;
 8004082:	2301      	movs	r3, #1
 8004084:	e004      	b.n	8004090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3301      	adds	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e7e2      	b.n	8004054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 800408e:	2300      	movs	r3, #0
  }
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fdd3 	bl	8003c54 <_ZN13STM32Hardware4timeEv>
 80040ae:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80040be:	4293      	cmp	r3, r2
 80040c0:	d903      	bls.n	80040ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d009      	beq.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d903      	bls.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d014      	beq.n	800411c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3304      	adds	r3, #4
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fdac 	bl	8003c54 <_ZN13STM32Hardware4timeEv>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad2      	subs	r2, r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004108:	429a      	cmp	r2, r3
 800410a:	bf8c      	ite	hi
 800410c:	2301      	movhi	r3, #1
 800410e:	2300      	movls	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8004116:	f06f 0301 	mvn.w	r3, #1
 800411a:	e194      	b.n	8004446 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fcc5 	bl	8003ab0 <_ZN13STM32Hardware4readEv>
 8004126:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f2c0 8174 	blt.w	8004418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	441a      	add	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004146:	2b07      	cmp	r3, #7
 8004148:	d11e      	bne.n	8004188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8004150:	1c59      	adds	r1, r3, #1
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	b2d1      	uxtb	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4413      	add	r3, r2
 8004160:	460a      	mov	r2, r1
 8004162:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800416c:	1e5a      	subs	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1b4      	bne.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2208      	movs	r2, #8
 8004182:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004186:	e7af      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800418e:	2b00      	cmp	r3, #0
 8004190:	d128      	bne.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2bff      	cmp	r3, #255	; 0xff
 8004196:	d10d      	bne.n	80041b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f103 0214 	add.w	r2, r3, #20
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80041b2:	e799      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fd4b 	bl	8003c54 <_ZN13STM32Hardware4timeEv>
 80041be:	4602      	mov	r2, r0
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c8:	4293      	cmp	r3, r2
 80041ca:	bf8c      	ite	hi
 80041cc:	2301      	movhi	r3, #1
 80041ce:	2300      	movls	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d088      	beq.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80041de:	f06f 0301 	mvn.w	r3, #1
 80041e2:	e130      	b.n	8004446 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d118      	bne.n	8004220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2bfe      	cmp	r3, #254	; 0xfe
 80041f2:	d107      	bne.n	8004204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004202:	e771      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004212:	2b00      	cmp	r3, #0
 8004214:	f47f af68 	bne.w	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f918 	bl	800444e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800421e:	e763      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004226:	2b02      	cmp	r3, #2
 8004228:	d113      	bne.n	8004252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004250:	e74a      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004258:	2b03      	cmp	r3, #3
 800425a:	d110      	bne.n	800427e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	441a      	add	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800427c:	e734      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004284:	2b04      	cmp	r3, #4
 8004286:	d116      	bne.n	80042b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800428e:	425a      	negs	r2, r3
 8004290:	b2db      	uxtb	r3, r3
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	bf58      	it	pl
 8004296:	4253      	negpl	r3, r2
 8004298:	2bff      	cmp	r3, #255	; 0xff
 800429a:	d107      	bne.n	80042ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80042aa:	e71d      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80042b4:	e718      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80042bc:	2b05      	cmp	r3, #5
 80042be:	d10f      	bne.n	80042e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80042de:	e703      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d117      	bne.n	800431a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	441a      	add	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2207      	movs	r2, #7
 8004300:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800430a:	2b00      	cmp	r3, #0
 800430c:	f47f aeec 	bne.w	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2208      	movs	r2, #8
 8004314:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004318:	e6e6      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004320:	2b08      	cmp	r3, #8
 8004322:	f47f aee1 	bne.w	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004334:	425a      	negs	r2, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	bf58      	it	pl
 800433c:	4253      	negpl	r3, r2
 800433e:	2bff      	cmp	r3, #255	; 0xff
 8004340:	f47f aed2 	bne.w	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d110      	bne.n	8004370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f87d 	bl	800444e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f898 	bl	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	e06a      	b.n	8004446 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004376:	2b0a      	cmp	r3, #10
 8004378:	d107      	bne.n	800438a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004380:	4619      	mov	r1, r3
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f960 	bl	8004648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004388:	e6ae      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004390:	2b06      	cmp	r3, #6
 8004392:	d10e      	bne.n	80043b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f7fe feaf 	bl	8003106 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80043b0:	e69a      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80043b8:	2b0b      	cmp	r3, #11
 80043ba:	d104      	bne.n	80043c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80043c4:	e690      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80043cc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80043d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f43f ae84 	beq.w	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80043e6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f202 2222 	addw	r2, r2, #546	; 0x222
 80043f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80043fa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8004412:	4611      	mov	r1, r2
 8004414:	4798      	blx	r3
    while (true)
 8004416:	e667      	b.n	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004418:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00f      	beq.n	8004444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004432:	4293      	cmp	r3, r2
 8004434:	d906      	bls.n	8004444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f809 	bl	800444e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8004444:	2300      	movs	r3, #0
  }
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004456:	f107 030c 	add.w	r3, r7, #12
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff f9b6 	bl	80037cc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f107 020c 	add.w	r2, r7, #12
 800446a:	210a      	movs	r1, #10
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
    rt_time = hardware_.time();
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fbed 	bl	8003c54 <_ZN13STM32Hardware4timeEv>
 800447a:	4602      	mov	r2, r0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800448a:	b590      	push	{r4, r7, lr}
 800448c:	b08b      	sub	sp, #44	; 0x2c
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004492:	f107 030c 	add.w	r3, r7, #12
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe ffc2 	bl	8003420 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800449c:	2300      	movs	r3, #0
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	2b18      	cmp	r3, #24
 80044a4:	dc63      	bgt.n	800456e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d056      	beq.n	8004566 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	6859      	ldr	r1, [r3, #4]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4608      	mov	r0, r1
 8004506:	4798      	blx	r3
 8004508:	4603      	mov	r3, r0
 800450a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	6859      	ldr	r1, [r3, #4]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4608      	mov	r0, r1
 8004534:	4798      	blx	r3
 8004536:	4603      	mov	r3, r0
 8004538:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800453a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800453e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681c      	ldr	r4, [r3, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fa54 	bl	8003a02 <_ZN3ros9Publisher15getEndpointTypeEv>
 800455a:	4601      	mov	r1, r0
 800455c:	f107 030c 	add.w	r3, r7, #12
 8004560:	461a      	mov	r2, r3
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	3301      	adds	r3, #1
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
 800456c:	e798      	b.n	80044a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	2b18      	cmp	r3, #24
 8004576:	dc5f      	bgt.n	8004638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d053      	beq.n	8004630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	b29b      	uxth	r3, r3
 8004598:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459e:	f202 2222 	addw	r2, r2, #546	; 0x222
 80045a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80045b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ba:	f202 2222 	addw	r2, r2, #546	; 0x222
 80045be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3308      	adds	r3, #8
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4608      	mov	r0, r1
 80045ca:	4798      	blx	r3
 80045cc:	4603      	mov	r3, r0
 80045ce:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80045d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80045e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	330c      	adds	r3, #12
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4608      	mov	r0, r1
 80045f0:	4798      	blx	r3
 80045f2:	4603      	mov	r3, r0
 80045f4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80045f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045fa:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681c      	ldr	r4, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004606:	f202 2222 	addw	r2, r2, #546	; 0x222
 800460a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004612:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3304      	adds	r3, #4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4608      	mov	r0, r1
 8004622:	4798      	blx	r3
 8004624:	4601      	mov	r1, r0
 8004626:	f107 030c 	add.w	r3, r7, #12
 800462a:	461a      	mov	r2, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	3301      	adds	r3, #1
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
 8004636:	e79c      	b.n	8004572 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004640:	bf00      	nop
 8004642:	372c      	adds	r7, #44	; 0x2c
 8004644:	46bd      	mov	sp, r7
 8004646:	bd90      	pop	{r4, r7, pc}

08004648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004652:	f107 0308 	add.w	r3, r7, #8
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff f8b8 	bl	80037cc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff faf7 	bl	8003c54 <_ZN13STM32Hardware4timeEv>
 8004666:	4602      	mov	r2, r0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004672:	f107 0308 	add.w	r3, r7, #8
 8004676:	6839      	ldr	r1, [r7, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff f917 	bl	80038ac <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	4915      	ldr	r1, [pc, #84]	; (80046d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004684:	fba1 1303 	umull	r1, r3, r1, r3
 8004688:	099b      	lsrs	r3, r3, #6
 800468a:	4413      	add	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800468e:	6939      	ldr	r1, [r7, #16]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004694:	fba3 0302 	umull	r0, r3, r3, r2
 8004698:	099b      	lsrs	r3, r3, #6
 800469a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800469e:	fb00 f303 	mul.w	r3, r0, r3
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	4a0d      	ldr	r2, [pc, #52]	; (80046dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	440b      	add	r3, r1
 80046ac:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80046ae:	f107 0308 	add.w	r3, r7, #8
 80046b2:	3304      	adds	r3, #4
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f8a6 	bl	8004808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fac7 	bl	8003c54 <_ZN13STM32Hardware4timeEv>
 80046c6:	4602      	mov	r2, r0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80046ce:	bf00      	nop
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	10624dd3 	.word	0x10624dd3
 80046dc:	000f4240 	.word	0x000f4240

080046e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b63      	cmp	r3, #99	; 0x63
 80046f0:	dd09      	ble.n	8004706 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80046f8:	f083 0301 	eor.w	r3, r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004702:	2300      	movs	r3, #0
 8004704:	e079      	b.n	80047fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004712:	3207      	adds	r2, #7
 8004714:	4611      	mov	r1, r2
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
 800471a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	22ff      	movs	r2, #255	; 0xff
 8004720:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	22fe      	movs	r2, #254	; 0xfe
 8004728:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	b2da      	uxtb	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	b29b      	uxth	r3, r3
 800473a:	0a1b      	lsrs	r3, r3, #8
 800473c:	b29b      	uxth	r3, r3
 800473e:	b2da      	uxtb	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8004752:	4413      	add	r3, r2
 8004754:	b2db      	uxtb	r3, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	b21b      	sxth	r3, r3
 800476e:	121b      	asrs	r3, r3, #8
 8004770:	b21b      	sxth	r3, r3
 8004772:	b2da      	uxtb	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800477e:	2305      	movs	r3, #5
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	3306      	adds	r3, #6
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	dc0d      	bgt.n	80047a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	4413      	add	r3, r2
 8004792:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	3301      	adds	r3, #1
 80047a4:	61bb      	str	r3, [r7, #24]
 80047a6:	e7ec      	b.n	8004782 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	3307      	adds	r3, #7
 80047ac:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	425a      	negs	r2, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	bf58      	it	pl
 80047b8:	4253      	negpl	r3, r2
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	1c59      	adds	r1, r3, #1
 80047c0:	6179      	str	r1, [r7, #20]
 80047c2:	43d2      	mvns	r2, r2
 80047c4:	b2d1      	uxtb	r1, r2
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	460a      	mov	r2, r1
 80047cc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d6:	dc0a      	bgt.n	80047ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	1d18      	adds	r0, r3, #4
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4619      	mov	r1, r3
 80047e6:	f7ff f9ef 	bl	8003bc8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	e005      	b.n	80047fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80047ee:	4905      	ldr	r1, [pc, #20]	; (8004804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f849 	bl	8004888 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80047f6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80047fa:	4618      	mov	r0, r3
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	0800a318 	.word	0x0800a318

08004808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3304      	adds	r3, #4
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fa1c 	bl	8003c54 <_ZN13STM32Hardware4timeEv>
 800481c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4915      	ldr	r1, [pc, #84]	; (800487c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004826:	fba1 1303 	umull	r1, r3, r1, r3
 800482a:	099b      	lsrs	r3, r3, #6
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	1e5a      	subs	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800483e:	fba3 0302 	umull	r0, r3, r3, r2
 8004842:	099b      	lsrs	r3, r3, #6
 8004844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004848:	fb00 f303 	mul.w	r3, r0, r3
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	4a0c      	ldr	r2, [pc, #48]	; (8004880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8004850:	fb02 f303 	mul.w	r3, r2, r3
 8004854:	1aca      	subs	r2, r1, r3
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004858:	4413      	add	r3, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7fc fac6 	bl	8000e00 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004874:	bf00      	nop
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	10624dd3 	.word	0x10624dd3
 8004880:	000f4240 	.word	0x000f4240
 8004884:	3b9aca00 	.word	0x3b9aca00

08004888 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	2103      	movs	r1, #3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f804 	bl	80048a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800489c:	bf00      	nop
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	460b      	mov	r3, r1
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80048b2:	f107 0314 	add.w	r3, r7, #20
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe fa40 	bl	8002d3c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80048bc:	7afb      	ldrb	r3, [r7, #11]
 80048be:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f107 0214 	add.w	r2, r7, #20
 80048ce:	2107      	movs	r1, #7
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	4798      	blx	r3
  }
 80048d4:	bf00      	nop
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <_Z41__static_initialization_and_destruction_0ii>:
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d116      	bne.n	800491a <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d111      	bne.n	800491a <_Z41__static_initialization_and_destruction_0ii+0x3e>
geometry_msgs::Twist real_speed;
 80048f6:	480b      	ldr	r0, [pc, #44]	; (8004924 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80048f8:	f7fe f99c 	bl	8002c34 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 80048fc:	480a      	ldr	r0, [pc, #40]	; (8004928 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80048fe:	f7ff fa95 	bl	8003e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Publisher pub("base_speed", &real_speed);
 8004902:	2300      	movs	r3, #0
 8004904:	4a07      	ldr	r2, [pc, #28]	; (8004924 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004906:	4909      	ldr	r1, [pc, #36]	; (800492c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004908:	4809      	ldr	r0, [pc, #36]	; (8004930 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800490a:	f7ff f84f 	bl	80039ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);
 800490e:	2301      	movs	r3, #1
 8004910:	4a08      	ldr	r2, [pc, #32]	; (8004934 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004912:	4909      	ldr	r1, [pc, #36]	; (8004938 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004914:	4809      	ldr	r0, [pc, #36]	; (800493c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004916:	f7ff fb19 	bl	8003f4c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20001118 	.word	0x20001118
 8004928:	20001160 	.word	0x20001160
 800492c:	0800a354 	.word	0x0800a354
 8004930:	20001a9c 	.word	0x20001a9c
 8004934:	08003c6d 	.word	0x08003c6d
 8004938:	0800a360 	.word	0x0800a360
 800493c:	20001ab0 	.word	0x20001ab0

08004940 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3310      	adds	r3, #16
 800494e:	6839      	ldr	r1, [r7, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe f9b1 	bl	8002cb8 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	3210      	adds	r2, #16
 800495e:	4610      	mov	r0, r2
 8004960:	4798      	blx	r3
  }
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3310      	adds	r3, #16
 800498e:	4618      	mov	r0, r3
 8004990:	f7fe f9b8 	bl	8002d04 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004994:	4603      	mov	r3, r0
  }
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3310      	adds	r3, #16
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe f9b8 	bl	8002d20 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80049b0:	4603      	mov	r3, r0
  }
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
    return configured_;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <_GLOBAL__sub_I__Z12vel_callbackRKN13geometry_msgs5TwistE>:
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049dc:	2001      	movs	r0, #1
 80049de:	f7ff ff7d 	bl	80048dc <_Z41__static_initialization_and_destruction_0ii>
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <HAL_MspInit+0x4c>)
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	4a0f      	ldr	r2, [pc, #60]	; (8004a30 <HAL_MspInit+0x4c>)
 80049f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049f8:	6453      	str	r3, [r2, #68]	; 0x44
 80049fa:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <HAL_MspInit+0x4c>)
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_MspInit+0x4c>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	4a08      	ldr	r2, [pc, #32]	; (8004a30 <HAL_MspInit+0x4c>)
 8004a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a14:	6413      	str	r3, [r2, #64]	; 0x40
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_MspInit+0x4c>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800

08004a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004a38:	f002 fc72 	bl	8007320 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a3c:	e7fe      	b.n	8004a3c <NMI_Handler+0x8>

08004a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a42:	e7fe      	b.n	8004a42 <HardFault_Handler+0x4>

08004a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a48:	e7fe      	b.n	8004a48 <MemManage_Handler+0x4>

08004a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a4e:	e7fe      	b.n	8004a4e <BusFault_Handler+0x4>

08004a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a54:	e7fe      	b.n	8004a54 <UsageFault_Handler+0x4>

08004a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a72:	b480      	push	{r7}
 8004a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a84:	f001 f85e 	bl	8005b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a88:	bf00      	nop
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004a90:	4802      	ldr	r0, [pc, #8]	; (8004a9c <DMA1_Stream1_IRQHandler+0x10>)
 8004a92:	f001 fb21 	bl	80060d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004a96:	bf00      	nop
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20001ddc 	.word	0x20001ddc

08004aa0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004aa4:	4802      	ldr	r0, [pc, #8]	; (8004ab0 <DMA1_Stream3_IRQHandler+0x10>)
 8004aa6:	f001 fb17 	bl	80060d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20001e3c 	.word	0x20001e3c

08004ab4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ab8:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <USART3_IRQHandler+0x10>)
 8004aba:	f003 feb7 	bl	800882c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20001d98 	.word	0x20001d98

08004ac8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004acc:	4802      	ldr	r0, [pc, #8]	; (8004ad8 <TIM6_DAC_IRQHandler+0x10>)
 8004ace:	f002 ff57 	bl	8007980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20001c34 	.word	0x20001c34

08004adc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004ae0:	4802      	ldr	r0, [pc, #8]	; (8004aec <TIM7_IRQHandler+0x10>)
 8004ae2:	f002 ff4d 	bl	8007980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20001c7c 	.word	0x20001c7c

08004af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
	return 1;
 8004af4:	2301      	movs	r3, #1
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <_kill>:

int _kill(int pid, int sig)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b0a:	f005 f991 	bl	8009e30 <__errno>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2216      	movs	r2, #22
 8004b12:	601a      	str	r2, [r3, #0]
	return -1;
 8004b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <_exit>:

void _exit (int status)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b28:	f04f 31ff 	mov.w	r1, #4294967295
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff ffe7 	bl	8004b00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b32:	e7fe      	b.n	8004b32 <_exit+0x12>

08004b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b3c:	4a14      	ldr	r2, [pc, #80]	; (8004b90 <_sbrk+0x5c>)
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <_sbrk+0x60>)
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b48:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <_sbrk+0x64>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b50:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <_sbrk+0x64>)
 8004b52:	4a12      	ldr	r2, [pc, #72]	; (8004b9c <_sbrk+0x68>)
 8004b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <_sbrk+0x64>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d207      	bcs.n	8004b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b64:	f005 f964 	bl	8009e30 <__errno>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	220c      	movs	r2, #12
 8004b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b72:	e009      	b.n	8004b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b74:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <_sbrk+0x64>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <_sbrk+0x64>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4413      	add	r3, r2
 8004b82:	4a05      	ldr	r2, [pc, #20]	; (8004b98 <_sbrk+0x64>)
 8004b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b86:	68fb      	ldr	r3, [r7, #12]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20030000 	.word	0x20030000
 8004b94:	00000400 	.word	0x00000400
 8004b98:	20001b10 	.word	0x20001b10
 8004b9c:	20001eb0 	.word	0x20001eb0

08004ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <SystemInit+0x20>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	4a05      	ldr	r2, [pc, #20]	; (8004bc0 <SystemInit+0x20>)
 8004bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08c      	sub	sp, #48	; 0x30
 8004bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004bca:	f107 030c 	add.w	r3, r7, #12
 8004bce:	2224      	movs	r2, #36	; 0x24
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f005 f964 	bl	8009ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bd8:	1d3b      	adds	r3, r7, #4
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004be0:	4b21      	ldr	r3, [pc, #132]	; (8004c68 <MX_TIM2_Init+0xa4>)
 8004be2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004be6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004be8:	4b1f      	ldr	r3, [pc, #124]	; (8004c68 <MX_TIM2_Init+0xa4>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bee:	4b1e      	ldr	r3, [pc, #120]	; (8004c68 <MX_TIM2_Init+0xa4>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004bf4:	4b1c      	ldr	r3, [pc, #112]	; (8004c68 <MX_TIM2_Init+0xa4>)
 8004bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <MX_TIM2_Init+0xa4>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c02:	4b19      	ldr	r3, [pc, #100]	; (8004c68 <MX_TIM2_Init+0xa4>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004c10:	2301      	movs	r3, #1
 8004c12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004c20:	2301      	movs	r3, #1
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004c24:	2300      	movs	r3, #0
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004c2c:	f107 030c 	add.w	r3, r7, #12
 8004c30:	4619      	mov	r1, r3
 8004c32:	480d      	ldr	r0, [pc, #52]	; (8004c68 <MX_TIM2_Init+0xa4>)
 8004c34:	f002 fd70 	bl	8007718 <HAL_TIM_Encoder_Init>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004c3e:	f7fc ff3f 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c42:	2300      	movs	r3, #0
 8004c44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4806      	ldr	r0, [pc, #24]	; (8004c68 <MX_TIM2_Init+0xa4>)
 8004c50:	f003 fc60 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004c5a:	f7fc ff31 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004c5e:	bf00      	nop
 8004c60:	3730      	adds	r7, #48	; 0x30
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20001b14 	.word	0x20001b14

08004c6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08c      	sub	sp, #48	; 0x30
 8004c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004c72:	f107 030c 	add.w	r3, r7, #12
 8004c76:	2224      	movs	r2, #36	; 0x24
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f005 f910 	bl	8009ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c80:	1d3b      	adds	r3, r7, #4
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c88:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <MX_TIM3_Init+0xa0>)
 8004c8a:	4a21      	ldr	r2, [pc, #132]	; (8004d10 <MX_TIM3_Init+0xa4>)
 8004c8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004c8e:	4b1f      	ldr	r3, [pc, #124]	; (8004d0c <MX_TIM3_Init+0xa0>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c94:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <MX_TIM3_Init+0xa0>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004c9a:	4b1c      	ldr	r3, [pc, #112]	; (8004d0c <MX_TIM3_Init+0xa0>)
 8004c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ca0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ca2:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <MX_TIM3_Init+0xa0>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ca8:	4b18      	ldr	r3, [pc, #96]	; (8004d0c <MX_TIM3_Init+0xa0>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004cd2:	f107 030c 	add.w	r3, r7, #12
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	480c      	ldr	r0, [pc, #48]	; (8004d0c <MX_TIM3_Init+0xa0>)
 8004cda:	f002 fd1d 	bl	8007718 <HAL_TIM_Encoder_Init>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004ce4:	f7fc feec 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004cf0:	1d3b      	adds	r3, r7, #4
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4805      	ldr	r0, [pc, #20]	; (8004d0c <MX_TIM3_Init+0xa0>)
 8004cf6:	f003 fc0d 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004d00:	f7fc fede 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004d04:	bf00      	nop
 8004d06:	3730      	adds	r7, #48	; 0x30
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20001b5c 	.word	0x20001b5c
 8004d10:	40000400 	.word	0x40000400

08004d14 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08c      	sub	sp, #48	; 0x30
 8004d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004d1a:	f107 030c 	add.w	r3, r7, #12
 8004d1e:	2224      	movs	r2, #36	; 0x24
 8004d20:	2100      	movs	r1, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f005 f8bc 	bl	8009ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d28:	1d3b      	adds	r3, r7, #4
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004d30:	4b20      	ldr	r3, [pc, #128]	; (8004db4 <MX_TIM4_Init+0xa0>)
 8004d32:	4a21      	ldr	r2, [pc, #132]	; (8004db8 <MX_TIM4_Init+0xa4>)
 8004d34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004d36:	4b1f      	ldr	r3, [pc, #124]	; (8004db4 <MX_TIM4_Init+0xa0>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d3c:	4b1d      	ldr	r3, [pc, #116]	; (8004db4 <MX_TIM4_Init+0xa0>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004d42:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <MX_TIM4_Init+0xa0>)
 8004d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d4a:	4b1a      	ldr	r3, [pc, #104]	; (8004db4 <MX_TIM4_Init+0xa0>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d50:	4b18      	ldr	r3, [pc, #96]	; (8004db4 <MX_TIM4_Init+0xa0>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004d56:	2303      	movs	r3, #3
 8004d58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004d72:	2300      	movs	r3, #0
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004d7a:	f107 030c 	add.w	r3, r7, #12
 8004d7e:	4619      	mov	r1, r3
 8004d80:	480c      	ldr	r0, [pc, #48]	; (8004db4 <MX_TIM4_Init+0xa0>)
 8004d82:	f002 fcc9 	bl	8007718 <HAL_TIM_Encoder_Init>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004d8c:	f7fc fe98 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d90:	2300      	movs	r3, #0
 8004d92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d98:	1d3b      	adds	r3, r7, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4805      	ldr	r0, [pc, #20]	; (8004db4 <MX_TIM4_Init+0xa0>)
 8004d9e:	f003 fbb9 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004da8:	f7fc fe8a 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004dac:	bf00      	nop
 8004dae:	3730      	adds	r7, #48	; 0x30
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20001ba4 	.word	0x20001ba4
 8004db8:	40000800 	.word	0x40000800

08004dbc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08c      	sub	sp, #48	; 0x30
 8004dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004dc2:	f107 030c 	add.w	r3, r7, #12
 8004dc6:	2224      	movs	r2, #36	; 0x24
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f005 f868 	bl	8009ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dd0:	1d3b      	adds	r3, r7, #4
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004dd8:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <MX_TIM5_Init+0xa0>)
 8004dda:	4a21      	ldr	r2, [pc, #132]	; (8004e60 <MX_TIM5_Init+0xa4>)
 8004ddc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004dde:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <MX_TIM5_Init+0xa0>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004de4:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <MX_TIM5_Init+0xa0>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004dea:	4b1c      	ldr	r3, [pc, #112]	; (8004e5c <MX_TIM5_Init+0xa0>)
 8004dec:	f04f 32ff 	mov.w	r2, #4294967295
 8004df0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004df2:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <MX_TIM5_Init+0xa0>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004df8:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <MX_TIM5_Init+0xa0>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e06:	2301      	movs	r3, #1
 8004e08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004e12:	2300      	movs	r3, #0
 8004e14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e16:	2301      	movs	r3, #1
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004e22:	f107 030c 	add.w	r3, r7, #12
 8004e26:	4619      	mov	r1, r3
 8004e28:	480c      	ldr	r0, [pc, #48]	; (8004e5c <MX_TIM5_Init+0xa0>)
 8004e2a:	f002 fc75 	bl	8007718 <HAL_TIM_Encoder_Init>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8004e34:	f7fc fe44 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004e40:	1d3b      	adds	r3, r7, #4
 8004e42:	4619      	mov	r1, r3
 8004e44:	4805      	ldr	r0, [pc, #20]	; (8004e5c <MX_TIM5_Init+0xa0>)
 8004e46:	f003 fb65 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8004e50:	f7fc fe36 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004e54:	bf00      	nop
 8004e56:	3730      	adds	r7, #48	; 0x30
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20001bec 	.word	0x20001bec
 8004e60:	40000c00 	.word	0x40000c00

08004e64 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <MX_TIM6_Init+0x64>)
 8004e74:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <MX_TIM6_Init+0x68>)
 8004e76:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8004e78:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <MX_TIM6_Init+0x64>)
 8004e7a:	2259      	movs	r2, #89	; 0x59
 8004e7c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <MX_TIM6_Init+0x64>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8004e84:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <MX_TIM6_Init+0x64>)
 8004e86:	f242 720f 	movw	r2, #9999	; 0x270f
 8004e8a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <MX_TIM6_Init+0x64>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004e92:	480d      	ldr	r0, [pc, #52]	; (8004ec8 <MX_TIM6_Init+0x64>)
 8004e94:	f002 fa5f 	bl	8007356 <HAL_TIM_Base_Init>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004e9e:	f7fc fe0f 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004eaa:	463b      	mov	r3, r7
 8004eac:	4619      	mov	r1, r3
 8004eae:	4806      	ldr	r0, [pc, #24]	; (8004ec8 <MX_TIM6_Init+0x64>)
 8004eb0:	f003 fb30 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004eba:	f7fc fe01 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20001c34 	.word	0x20001c34
 8004ecc:	40001000 	.word	0x40001000

08004ed0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ed6:	463b      	mov	r3, r7
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004ede:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <MX_TIM7_Init+0x64>)
 8004ee0:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <MX_TIM7_Init+0x68>)
 8004ee2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 90-1;
 8004ee4:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <MX_TIM7_Init+0x64>)
 8004ee6:	2259      	movs	r2, #89	; 0x59
 8004ee8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <MX_TIM7_Init+0x64>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8004ef0:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <MX_TIM7_Init+0x64>)
 8004ef2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ef6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ef8:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <MX_TIM7_Init+0x64>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004efe:	480d      	ldr	r0, [pc, #52]	; (8004f34 <MX_TIM7_Init+0x64>)
 8004f00:	f002 fa29 	bl	8007356 <HAL_TIM_Base_Init>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004f0a:	f7fc fdd9 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004f16:	463b      	mov	r3, r7
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4806      	ldr	r0, [pc, #24]	; (8004f34 <MX_TIM7_Init+0x64>)
 8004f1c:	f003 fafa 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004f26:	f7fc fdcb 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20001c7c 	.word	0x20001c7c
 8004f38:	40001400 	.word	0x40001400

08004f3c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	; 0x30
 8004f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f42:	f107 0320 	add.w	r3, r7, #32
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	605a      	str	r2, [r3, #4]
 8004f4c:	609a      	str	r2, [r3, #8]
 8004f4e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f50:	1d3b      	adds	r3, r7, #4
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	605a      	str	r2, [r3, #4]
 8004f58:	609a      	str	r2, [r3, #8]
 8004f5a:	60da      	str	r2, [r3, #12]
 8004f5c:	611a      	str	r2, [r3, #16]
 8004f5e:	615a      	str	r2, [r3, #20]
 8004f60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004f62:	4b2b      	ldr	r3, [pc, #172]	; (8005010 <MX_TIM9_Init+0xd4>)
 8004f64:	4a2b      	ldr	r2, [pc, #172]	; (8005014 <MX_TIM9_Init+0xd8>)
 8004f66:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1-1;
 8004f68:	4b29      	ldr	r3, [pc, #164]	; (8005010 <MX_TIM9_Init+0xd4>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f6e:	4b28      	ldr	r3, [pc, #160]	; (8005010 <MX_TIM9_Init+0xd4>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4500-1;
 8004f74:	4b26      	ldr	r3, [pc, #152]	; (8005010 <MX_TIM9_Init+0xd4>)
 8004f76:	f241 1293 	movw	r2, #4499	; 0x1193
 8004f7a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f7c:	4b24      	ldr	r3, [pc, #144]	; (8005010 <MX_TIM9_Init+0xd4>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f82:	4b23      	ldr	r3, [pc, #140]	; (8005010 <MX_TIM9_Init+0xd4>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004f88:	4821      	ldr	r0, [pc, #132]	; (8005010 <MX_TIM9_Init+0xd4>)
 8004f8a:	f002 f9e4 	bl	8007356 <HAL_TIM_Base_Init>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8004f94:	f7fc fd94 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004f9e:	f107 0320 	add.w	r3, r7, #32
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	481a      	ldr	r0, [pc, #104]	; (8005010 <MX_TIM9_Init+0xd4>)
 8004fa6:	f002 feb5 	bl	8007d14 <HAL_TIM_ConfigClockSource>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8004fb0:	f7fc fd86 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8004fb4:	4816      	ldr	r0, [pc, #88]	; (8005010 <MX_TIM9_Init+0xd4>)
 8004fb6:	f002 fa8d 	bl	80074d4 <HAL_TIM_PWM_Init>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8004fc0:	f7fc fd7e 	bl	8001ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fc4:	2360      	movs	r3, #96	; 0x60
 8004fc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004fd4:	1d3b      	adds	r3, r7, #4
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	4619      	mov	r1, r3
 8004fda:	480d      	ldr	r0, [pc, #52]	; (8005010 <MX_TIM9_Init+0xd4>)
 8004fdc:	f002 fdd8 	bl	8007b90 <HAL_TIM_PWM_ConfigChannel>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8004fe6:	f7fc fd6b 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004fea:	1d3b      	adds	r3, r7, #4
 8004fec:	2204      	movs	r2, #4
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4807      	ldr	r0, [pc, #28]	; (8005010 <MX_TIM9_Init+0xd4>)
 8004ff2:	f002 fdcd 	bl	8007b90 <HAL_TIM_PWM_ConfigChannel>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8004ffc:	f7fc fd60 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8005000:	4803      	ldr	r0, [pc, #12]	; (8005010 <MX_TIM9_Init+0xd4>)
 8005002:	f000 f9ef 	bl	80053e4 <HAL_TIM_MspPostInit>

}
 8005006:	bf00      	nop
 8005008:	3730      	adds	r7, #48	; 0x30
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20001cc4 	.word	0x20001cc4
 8005014:	40014000 	.word	0x40014000

08005018 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08c      	sub	sp, #48	; 0x30
 800501c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800501e:	f107 0320 	add.w	r3, r7, #32
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	605a      	str	r2, [r3, #4]
 8005028:	609a      	str	r2, [r3, #8]
 800502a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800502c:	1d3b      	adds	r3, r7, #4
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	605a      	str	r2, [r3, #4]
 8005034:	609a      	str	r2, [r3, #8]
 8005036:	60da      	str	r2, [r3, #12]
 8005038:	611a      	str	r2, [r3, #16]
 800503a:	615a      	str	r2, [r3, #20]
 800503c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800503e:	4b2b      	ldr	r3, [pc, #172]	; (80050ec <MX_TIM12_Init+0xd4>)
 8005040:	4a2b      	ldr	r2, [pc, #172]	; (80050f0 <MX_TIM12_Init+0xd8>)
 8005042:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1-1;
 8005044:	4b29      	ldr	r3, [pc, #164]	; (80050ec <MX_TIM12_Init+0xd4>)
 8005046:	2200      	movs	r2, #0
 8005048:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800504a:	4b28      	ldr	r3, [pc, #160]	; (80050ec <MX_TIM12_Init+0xd4>)
 800504c:	2200      	movs	r2, #0
 800504e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4500-1;
 8005050:	4b26      	ldr	r3, [pc, #152]	; (80050ec <MX_TIM12_Init+0xd4>)
 8005052:	f241 1293 	movw	r2, #4499	; 0x1193
 8005056:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005058:	4b24      	ldr	r3, [pc, #144]	; (80050ec <MX_TIM12_Init+0xd4>)
 800505a:	2200      	movs	r2, #0
 800505c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800505e:	4b23      	ldr	r3, [pc, #140]	; (80050ec <MX_TIM12_Init+0xd4>)
 8005060:	2200      	movs	r2, #0
 8005062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005064:	4821      	ldr	r0, [pc, #132]	; (80050ec <MX_TIM12_Init+0xd4>)
 8005066:	f002 f976 	bl	8007356 <HAL_TIM_Base_Init>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8005070:	f7fc fd26 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005078:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800507a:	f107 0320 	add.w	r3, r7, #32
 800507e:	4619      	mov	r1, r3
 8005080:	481a      	ldr	r0, [pc, #104]	; (80050ec <MX_TIM12_Init+0xd4>)
 8005082:	f002 fe47 	bl	8007d14 <HAL_TIM_ConfigClockSource>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800508c:	f7fc fd18 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8005090:	4816      	ldr	r0, [pc, #88]	; (80050ec <MX_TIM12_Init+0xd4>)
 8005092:	f002 fa1f 	bl	80074d4 <HAL_TIM_PWM_Init>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800509c:	f7fc fd10 	bl	8001ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050a0:	2360      	movs	r3, #96	; 0x60
 80050a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80050b0:	1d3b      	adds	r3, r7, #4
 80050b2:	2200      	movs	r2, #0
 80050b4:	4619      	mov	r1, r3
 80050b6:	480d      	ldr	r0, [pc, #52]	; (80050ec <MX_TIM12_Init+0xd4>)
 80050b8:	f002 fd6a 	bl	8007b90 <HAL_TIM_PWM_ConfigChannel>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80050c2:	f7fc fcfd 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80050c6:	1d3b      	adds	r3, r7, #4
 80050c8:	2204      	movs	r2, #4
 80050ca:	4619      	mov	r1, r3
 80050cc:	4807      	ldr	r0, [pc, #28]	; (80050ec <MX_TIM12_Init+0xd4>)
 80050ce:	f002 fd5f 	bl	8007b90 <HAL_TIM_PWM_ConfigChannel>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 80050d8:	f7fc fcf2 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80050dc:	4803      	ldr	r0, [pc, #12]	; (80050ec <MX_TIM12_Init+0xd4>)
 80050de:	f000 f981 	bl	80053e4 <HAL_TIM_MspPostInit>

}
 80050e2:	bf00      	nop
 80050e4:	3730      	adds	r7, #48	; 0x30
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20001d0c 	.word	0x20001d0c
 80050f0:	40001800 	.word	0x40001800

080050f4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b090      	sub	sp, #64	; 0x40
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	609a      	str	r2, [r3, #8]
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005114:	d14b      	bne.n	80051ae <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005116:	2300      	movs	r3, #0
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
 800511a:	4b72      	ldr	r3, [pc, #456]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	4a71      	ldr	r2, [pc, #452]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	6413      	str	r3, [r2, #64]	; 0x40
 8005126:	4b6f      	ldr	r3, [pc, #444]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
 8005136:	4b6b      	ldr	r3, [pc, #428]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	4a6a      	ldr	r2, [pc, #424]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	6313      	str	r3, [r2, #48]	; 0x30
 8005142:	4b68      	ldr	r3, [pc, #416]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	623b      	str	r3, [r7, #32]
 8005152:	4b64      	ldr	r3, [pc, #400]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	4a63      	ldr	r2, [pc, #396]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	6313      	str	r3, [r2, #48]	; 0x30
 800515e:	4b61      	ldr	r3, [pc, #388]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	623b      	str	r3, [r7, #32]
 8005168:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800516a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005170:	2302      	movs	r3, #2
 8005172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005174:	2300      	movs	r3, #0
 8005176:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005178:	2300      	movs	r3, #0
 800517a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800517c:	2301      	movs	r3, #1
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005184:	4619      	mov	r1, r3
 8005186:	4858      	ldr	r0, [pc, #352]	; (80052e8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8005188:	f001 fa10 	bl	80065ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800518c:	2308      	movs	r3, #8
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005190:	2302      	movs	r3, #2
 8005192:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005194:	2300      	movs	r3, #0
 8005196:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005198:	2300      	movs	r3, #0
 800519a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800519c:	2301      	movs	r3, #1
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051a4:	4619      	mov	r1, r3
 80051a6:	4851      	ldr	r0, [pc, #324]	; (80052ec <HAL_TIM_Encoder_MspInit+0x1f8>)
 80051a8:	f001 fa00 	bl	80065ac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80051ac:	e095      	b.n	80052da <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM3)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a4f      	ldr	r2, [pc, #316]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1fc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d12c      	bne.n	8005212 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051b8:	2300      	movs	r3, #0
 80051ba:	61fb      	str	r3, [r7, #28]
 80051bc:	4b49      	ldr	r3, [pc, #292]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	4a48      	ldr	r2, [pc, #288]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80051c2:	f043 0302 	orr.w	r3, r3, #2
 80051c6:	6413      	str	r3, [r2, #64]	; 0x40
 80051c8:	4b46      	ldr	r3, [pc, #280]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051d4:	2300      	movs	r3, #0
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	4a41      	ldr	r2, [pc, #260]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80051de:	f043 0302 	orr.w	r3, r3, #2
 80051e2:	6313      	str	r3, [r2, #48]	; 0x30
 80051e4:	4b3f      	ldr	r3, [pc, #252]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80051f0:	2330      	movs	r3, #48	; 0x30
 80051f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f4:	2302      	movs	r3, #2
 80051f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051fc:	2300      	movs	r3, #0
 80051fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005200:	2302      	movs	r3, #2
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005208:	4619      	mov	r1, r3
 800520a:	4838      	ldr	r0, [pc, #224]	; (80052ec <HAL_TIM_Encoder_MspInit+0x1f8>)
 800520c:	f001 f9ce 	bl	80065ac <HAL_GPIO_Init>
}
 8005210:	e063      	b.n	80052da <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM4)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a37      	ldr	r2, [pc, #220]	; (80052f4 <HAL_TIM_Encoder_MspInit+0x200>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d12d      	bne.n	8005278 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	4a2f      	ldr	r2, [pc, #188]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005226:	f043 0304 	orr.w	r3, r3, #4
 800522a:	6413      	str	r3, [r2, #64]	; 0x40
 800522c:	4b2d      	ldr	r3, [pc, #180]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005238:	2300      	movs	r3, #0
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	4b29      	ldr	r3, [pc, #164]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	4a28      	ldr	r2, [pc, #160]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005242:	f043 0308 	orr.w	r3, r3, #8
 8005246:	6313      	str	r3, [r2, #48]	; 0x30
 8005248:	4b26      	ldr	r3, [pc, #152]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005254:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525a:	2302      	movs	r3, #2
 800525c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525e:	2300      	movs	r3, #0
 8005260:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005262:	2300      	movs	r3, #0
 8005264:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005266:	2302      	movs	r3, #2
 8005268:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800526a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800526e:	4619      	mov	r1, r3
 8005270:	4821      	ldr	r0, [pc, #132]	; (80052f8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005272:	f001 f99b 	bl	80065ac <HAL_GPIO_Init>
}
 8005276:	e030      	b.n	80052da <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM5)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <HAL_TIM_Encoder_MspInit+0x208>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d12b      	bne.n	80052da <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	4a16      	ldr	r2, [pc, #88]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800528c:	f043 0308 	orr.w	r3, r3, #8
 8005290:	6413      	str	r3, [r2, #64]	; 0x40
 8005292:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	60bb      	str	r3, [r7, #8]
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	4a0f      	ldr	r2, [pc, #60]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80052a8:	f043 0301 	orr.w	r3, r3, #1
 80052ac:	6313      	str	r3, [r2, #48]	; 0x30
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	60bb      	str	r3, [r7, #8]
 80052b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80052ba:	2303      	movs	r3, #3
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052be:	2302      	movs	r3, #2
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c6:	2300      	movs	r3, #0
 80052c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80052ca:	2302      	movs	r3, #2
 80052cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052d2:	4619      	mov	r1, r3
 80052d4:	4804      	ldr	r0, [pc, #16]	; (80052e8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80052d6:	f001 f969 	bl	80065ac <HAL_GPIO_Init>
}
 80052da:	bf00      	nop
 80052dc:	3740      	adds	r7, #64	; 0x40
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40020000 	.word	0x40020000
 80052ec:	40020400 	.word	0x40020400
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40020c00 	.word	0x40020c00
 80052fc:	40000c00 	.word	0x40000c00

08005300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a30      	ldr	r2, [pc, #192]	; (80053d0 <HAL_TIM_Base_MspInit+0xd0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d116      	bne.n	8005340 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <HAL_TIM_Base_MspInit+0xd4>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	4a2e      	ldr	r2, [pc, #184]	; (80053d4 <HAL_TIM_Base_MspInit+0xd4>)
 800531c:	f043 0310 	orr.w	r3, r3, #16
 8005320:	6413      	str	r3, [r2, #64]	; 0x40
 8005322:	4b2c      	ldr	r3, [pc, #176]	; (80053d4 <HAL_TIM_Base_MspInit+0xd4>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800532e:	2200      	movs	r2, #0
 8005330:	2100      	movs	r1, #0
 8005332:	2036      	movs	r0, #54	; 0x36
 8005334:	f000 fd01 	bl	8005d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005338:	2036      	movs	r0, #54	; 0x36
 800533a:	f000 fd1a 	bl	8005d72 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800533e:	e042      	b.n	80053c6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a24      	ldr	r2, [pc, #144]	; (80053d8 <HAL_TIM_Base_MspInit+0xd8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d116      	bne.n	8005378 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800534a:	2300      	movs	r3, #0
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	4b21      	ldr	r3, [pc, #132]	; (80053d4 <HAL_TIM_Base_MspInit+0xd4>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	4a20      	ldr	r2, [pc, #128]	; (80053d4 <HAL_TIM_Base_MspInit+0xd4>)
 8005354:	f043 0320 	orr.w	r3, r3, #32
 8005358:	6413      	str	r3, [r2, #64]	; 0x40
 800535a:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <HAL_TIM_Base_MspInit+0xd4>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005366:	2200      	movs	r2, #0
 8005368:	2100      	movs	r1, #0
 800536a:	2037      	movs	r0, #55	; 0x37
 800536c:	f000 fce5 	bl	8005d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005370:	2037      	movs	r0, #55	; 0x37
 8005372:	f000 fcfe 	bl	8005d72 <HAL_NVIC_EnableIRQ>
}
 8005376:	e026      	b.n	80053c6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM9)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a17      	ldr	r2, [pc, #92]	; (80053dc <HAL_TIM_Base_MspInit+0xdc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d10e      	bne.n	80053a0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <HAL_TIM_Base_MspInit+0xd4>)
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	4a12      	ldr	r2, [pc, #72]	; (80053d4 <HAL_TIM_Base_MspInit+0xd4>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005390:	6453      	str	r3, [r2, #68]	; 0x44
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <HAL_TIM_Base_MspInit+0xd4>)
 8005394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
}
 800539e:	e012      	b.n	80053c6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM12)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a0e      	ldr	r2, [pc, #56]	; (80053e0 <HAL_TIM_Base_MspInit+0xe0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d10d      	bne.n	80053c6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80053aa:	2300      	movs	r3, #0
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <HAL_TIM_Base_MspInit+0xd4>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <HAL_TIM_Base_MspInit+0xd4>)
 80053b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ba:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_TIM_Base_MspInit+0xd4>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	68bb      	ldr	r3, [r7, #8]
}
 80053c6:	bf00      	nop
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40001000 	.word	0x40001000
 80053d4:	40023800 	.word	0x40023800
 80053d8:	40001400 	.word	0x40001400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40001800 	.word	0x40001800

080053e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	; 0x28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ec:	f107 0314 	add.w	r3, r7, #20
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a24      	ldr	r2, [pc, #144]	; (8005494 <HAL_TIM_MspPostInit+0xb0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d11e      	bne.n	8005444 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	4b23      	ldr	r3, [pc, #140]	; (8005498 <HAL_TIM_MspPostInit+0xb4>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	4a22      	ldr	r2, [pc, #136]	; (8005498 <HAL_TIM_MspPostInit+0xb4>)
 8005410:	f043 0310 	orr.w	r3, r3, #16
 8005414:	6313      	str	r3, [r2, #48]	; 0x30
 8005416:	4b20      	ldr	r3, [pc, #128]	; (8005498 <HAL_TIM_MspPostInit+0xb4>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005422:	2360      	movs	r3, #96	; 0x60
 8005424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005426:	2302      	movs	r3, #2
 8005428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800542e:	2300      	movs	r3, #0
 8005430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8005432:	2303      	movs	r3, #3
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005436:	f107 0314 	add.w	r3, r7, #20
 800543a:	4619      	mov	r1, r3
 800543c:	4817      	ldr	r0, [pc, #92]	; (800549c <HAL_TIM_MspPostInit+0xb8>)
 800543e:	f001 f8b5 	bl	80065ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8005442:	e023      	b.n	800548c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <HAL_TIM_MspPostInit+0xbc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d11e      	bne.n	800548c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	4b11      	ldr	r3, [pc, #68]	; (8005498 <HAL_TIM_MspPostInit+0xb4>)
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	4a10      	ldr	r2, [pc, #64]	; (8005498 <HAL_TIM_MspPostInit+0xb4>)
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	6313      	str	r3, [r2, #48]	; 0x30
 800545e:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <HAL_TIM_MspPostInit+0xb4>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800546a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800546e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005470:	2302      	movs	r3, #2
 8005472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005474:	2300      	movs	r3, #0
 8005476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005478:	2300      	movs	r3, #0
 800547a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800547c:	2309      	movs	r3, #9
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005480:	f107 0314 	add.w	r3, r7, #20
 8005484:	4619      	mov	r1, r3
 8005486:	4807      	ldr	r0, [pc, #28]	; (80054a4 <HAL_TIM_MspPostInit+0xc0>)
 8005488:	f001 f890 	bl	80065ac <HAL_GPIO_Init>
}
 800548c:	bf00      	nop
 800548e:	3728      	adds	r7, #40	; 0x28
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40014000 	.word	0x40014000
 8005498:	40023800 	.word	0x40023800
 800549c:	40021000 	.word	0x40021000
 80054a0:	40001800 	.word	0x40001800
 80054a4:	40020400 	.word	0x40020400

080054a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <MX_USART1_UART_Init+0x4c>)
 80054ae:	4a12      	ldr	r2, [pc, #72]	; (80054f8 <MX_USART1_UART_Init+0x50>)
 80054b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <MX_USART1_UART_Init+0x4c>)
 80054b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054ba:	4b0e      	ldr	r3, [pc, #56]	; (80054f4 <MX_USART1_UART_Init+0x4c>)
 80054bc:	2200      	movs	r2, #0
 80054be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <MX_USART1_UART_Init+0x4c>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80054c6:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <MX_USART1_UART_Init+0x4c>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054cc:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <MX_USART1_UART_Init+0x4c>)
 80054ce:	220c      	movs	r2, #12
 80054d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054d2:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <MX_USART1_UART_Init+0x4c>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054d8:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <MX_USART1_UART_Init+0x4c>)
 80054da:	2200      	movs	r2, #0
 80054dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80054de:	4805      	ldr	r0, [pc, #20]	; (80054f4 <MX_USART1_UART_Init+0x4c>)
 80054e0:	f003 f8a8 	bl	8008634 <HAL_UART_Init>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80054ea:	f7fc fae9 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80054ee:	bf00      	nop
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20001d54 	.word	0x20001d54
 80054f8:	40011000 	.word	0x40011000

080054fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005500:	4b11      	ldr	r3, [pc, #68]	; (8005548 <MX_USART3_UART_Init+0x4c>)
 8005502:	4a12      	ldr	r2, [pc, #72]	; (800554c <MX_USART3_UART_Init+0x50>)
 8005504:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005506:	4b10      	ldr	r3, [pc, #64]	; (8005548 <MX_USART3_UART_Init+0x4c>)
 8005508:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800550c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800550e:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <MX_USART3_UART_Init+0x4c>)
 8005510:	2200      	movs	r2, #0
 8005512:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005514:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <MX_USART3_UART_Init+0x4c>)
 8005516:	2200      	movs	r2, #0
 8005518:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <MX_USART3_UART_Init+0x4c>)
 800551c:	2200      	movs	r2, #0
 800551e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005520:	4b09      	ldr	r3, [pc, #36]	; (8005548 <MX_USART3_UART_Init+0x4c>)
 8005522:	220c      	movs	r2, #12
 8005524:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005526:	4b08      	ldr	r3, [pc, #32]	; (8005548 <MX_USART3_UART_Init+0x4c>)
 8005528:	2200      	movs	r2, #0
 800552a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <MX_USART3_UART_Init+0x4c>)
 800552e:	2200      	movs	r2, #0
 8005530:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005532:	4805      	ldr	r0, [pc, #20]	; (8005548 <MX_USART3_UART_Init+0x4c>)
 8005534:	f003 f87e 	bl	8008634 <HAL_UART_Init>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800553e:	f7fc fabf 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005542:	bf00      	nop
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20001d98 	.word	0x20001d98
 800554c:	40004800 	.word	0x40004800

08005550 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08c      	sub	sp, #48	; 0x30
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005558:	f107 031c 	add.w	r3, r7, #28
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	609a      	str	r2, [r3, #8]
 8005564:	60da      	str	r2, [r3, #12]
 8005566:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a76      	ldr	r2, [pc, #472]	; (8005748 <HAL_UART_MspInit+0x1f8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d12d      	bne.n	80055ce <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005572:	2300      	movs	r3, #0
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	4b75      	ldr	r3, [pc, #468]	; (800574c <HAL_UART_MspInit+0x1fc>)
 8005578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557a:	4a74      	ldr	r2, [pc, #464]	; (800574c <HAL_UART_MspInit+0x1fc>)
 800557c:	f043 0310 	orr.w	r3, r3, #16
 8005580:	6453      	str	r3, [r2, #68]	; 0x44
 8005582:	4b72      	ldr	r3, [pc, #456]	; (800574c <HAL_UART_MspInit+0x1fc>)
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	4b6e      	ldr	r3, [pc, #440]	; (800574c <HAL_UART_MspInit+0x1fc>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	4a6d      	ldr	r2, [pc, #436]	; (800574c <HAL_UART_MspInit+0x1fc>)
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	6313      	str	r3, [r2, #48]	; 0x30
 800559e:	4b6b      	ldr	r3, [pc, #428]	; (800574c <HAL_UART_MspInit+0x1fc>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80055aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80055ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b0:	2302      	movs	r3, #2
 80055b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055b8:	2303      	movs	r3, #3
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80055bc:	2307      	movs	r3, #7
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c0:	f107 031c 	add.w	r3, r7, #28
 80055c4:	4619      	mov	r1, r3
 80055c6:	4862      	ldr	r0, [pc, #392]	; (8005750 <HAL_UART_MspInit+0x200>)
 80055c8:	f000 fff0 	bl	80065ac <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80055cc:	e0b7      	b.n	800573e <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART3)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a60      	ldr	r2, [pc, #384]	; (8005754 <HAL_UART_MspInit+0x204>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	f040 80b2 	bne.w	800573e <HAL_UART_MspInit+0x1ee>
    __HAL_RCC_USART3_CLK_ENABLE();
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	4b5b      	ldr	r3, [pc, #364]	; (800574c <HAL_UART_MspInit+0x1fc>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	4a5a      	ldr	r2, [pc, #360]	; (800574c <HAL_UART_MspInit+0x1fc>)
 80055e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055e8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ea:	4b58      	ldr	r3, [pc, #352]	; (800574c <HAL_UART_MspInit+0x1fc>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	4b54      	ldr	r3, [pc, #336]	; (800574c <HAL_UART_MspInit+0x1fc>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	4a53      	ldr	r2, [pc, #332]	; (800574c <HAL_UART_MspInit+0x1fc>)
 8005600:	f043 0302 	orr.w	r3, r3, #2
 8005604:	6313      	str	r3, [r2, #48]	; 0x30
 8005606:	4b51      	ldr	r3, [pc, #324]	; (800574c <HAL_UART_MspInit+0x1fc>)
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	4b4d      	ldr	r3, [pc, #308]	; (800574c <HAL_UART_MspInit+0x1fc>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	4a4c      	ldr	r2, [pc, #304]	; (800574c <HAL_UART_MspInit+0x1fc>)
 800561c:	f043 0308 	orr.w	r3, r3, #8
 8005620:	6313      	str	r3, [r2, #48]	; 0x30
 8005622:	4b4a      	ldr	r3, [pc, #296]	; (800574c <HAL_UART_MspInit+0x1fc>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800562e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005634:	2302      	movs	r3, #2
 8005636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005638:	2300      	movs	r3, #0
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800563c:	2303      	movs	r3, #3
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005640:	2307      	movs	r3, #7
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005644:	f107 031c 	add.w	r3, r7, #28
 8005648:	4619      	mov	r1, r3
 800564a:	4843      	ldr	r0, [pc, #268]	; (8005758 <HAL_UART_MspInit+0x208>)
 800564c:	f000 ffae 	bl	80065ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005656:	2302      	movs	r3, #2
 8005658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565a:	2300      	movs	r3, #0
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800565e:	2303      	movs	r3, #3
 8005660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005662:	2307      	movs	r3, #7
 8005664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005666:	f107 031c 	add.w	r3, r7, #28
 800566a:	4619      	mov	r1, r3
 800566c:	483b      	ldr	r0, [pc, #236]	; (800575c <HAL_UART_MspInit+0x20c>)
 800566e:	f000 ff9d 	bl	80065ac <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005672:	4b3b      	ldr	r3, [pc, #236]	; (8005760 <HAL_UART_MspInit+0x210>)
 8005674:	4a3b      	ldr	r2, [pc, #236]	; (8005764 <HAL_UART_MspInit+0x214>)
 8005676:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005678:	4b39      	ldr	r3, [pc, #228]	; (8005760 <HAL_UART_MspInit+0x210>)
 800567a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800567e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005680:	4b37      	ldr	r3, [pc, #220]	; (8005760 <HAL_UART_MspInit+0x210>)
 8005682:	2200      	movs	r2, #0
 8005684:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005686:	4b36      	ldr	r3, [pc, #216]	; (8005760 <HAL_UART_MspInit+0x210>)
 8005688:	2200      	movs	r2, #0
 800568a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800568c:	4b34      	ldr	r3, [pc, #208]	; (8005760 <HAL_UART_MspInit+0x210>)
 800568e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005692:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005694:	4b32      	ldr	r3, [pc, #200]	; (8005760 <HAL_UART_MspInit+0x210>)
 8005696:	2200      	movs	r2, #0
 8005698:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800569a:	4b31      	ldr	r3, [pc, #196]	; (8005760 <HAL_UART_MspInit+0x210>)
 800569c:	2200      	movs	r2, #0
 800569e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80056a0:	4b2f      	ldr	r3, [pc, #188]	; (8005760 <HAL_UART_MspInit+0x210>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80056a6:	4b2e      	ldr	r3, [pc, #184]	; (8005760 <HAL_UART_MspInit+0x210>)
 80056a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056ac:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056ae:	4b2c      	ldr	r3, [pc, #176]	; (8005760 <HAL_UART_MspInit+0x210>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80056b4:	482a      	ldr	r0, [pc, #168]	; (8005760 <HAL_UART_MspInit+0x210>)
 80056b6:	f000 fb77 	bl	8005da8 <HAL_DMA_Init>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_UART_MspInit+0x174>
      Error_Handler();
 80056c0:	f7fc f9fe 	bl	8001ac0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a26      	ldr	r2, [pc, #152]	; (8005760 <HAL_UART_MspInit+0x210>)
 80056c8:	639a      	str	r2, [r3, #56]	; 0x38
 80056ca:	4a25      	ldr	r2, [pc, #148]	; (8005760 <HAL_UART_MspInit+0x210>)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80056d0:	4b25      	ldr	r3, [pc, #148]	; (8005768 <HAL_UART_MspInit+0x218>)
 80056d2:	4a26      	ldr	r2, [pc, #152]	; (800576c <HAL_UART_MspInit+0x21c>)
 80056d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80056d6:	4b24      	ldr	r3, [pc, #144]	; (8005768 <HAL_UART_MspInit+0x218>)
 80056d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056dc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056de:	4b22      	ldr	r3, [pc, #136]	; (8005768 <HAL_UART_MspInit+0x218>)
 80056e0:	2240      	movs	r2, #64	; 0x40
 80056e2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056e4:	4b20      	ldr	r3, [pc, #128]	; (8005768 <HAL_UART_MspInit+0x218>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056ea:	4b1f      	ldr	r3, [pc, #124]	; (8005768 <HAL_UART_MspInit+0x218>)
 80056ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056f0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056f2:	4b1d      	ldr	r3, [pc, #116]	; (8005768 <HAL_UART_MspInit+0x218>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056f8:	4b1b      	ldr	r3, [pc, #108]	; (8005768 <HAL_UART_MspInit+0x218>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80056fe:	4b1a      	ldr	r3, [pc, #104]	; (8005768 <HAL_UART_MspInit+0x218>)
 8005700:	2200      	movs	r2, #0
 8005702:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005704:	4b18      	ldr	r3, [pc, #96]	; (8005768 <HAL_UART_MspInit+0x218>)
 8005706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800570a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800570c:	4b16      	ldr	r3, [pc, #88]	; (8005768 <HAL_UART_MspInit+0x218>)
 800570e:	2200      	movs	r2, #0
 8005710:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005712:	4815      	ldr	r0, [pc, #84]	; (8005768 <HAL_UART_MspInit+0x218>)
 8005714:	f000 fb48 	bl	8005da8 <HAL_DMA_Init>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 800571e:	f7fc f9cf 	bl	8001ac0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a10      	ldr	r2, [pc, #64]	; (8005768 <HAL_UART_MspInit+0x218>)
 8005726:	635a      	str	r2, [r3, #52]	; 0x34
 8005728:	4a0f      	ldr	r2, [pc, #60]	; (8005768 <HAL_UART_MspInit+0x218>)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800572e:	2200      	movs	r2, #0
 8005730:	2100      	movs	r1, #0
 8005732:	2027      	movs	r0, #39	; 0x27
 8005734:	f000 fb01 	bl	8005d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005738:	2027      	movs	r0, #39	; 0x27
 800573a:	f000 fb1a 	bl	8005d72 <HAL_NVIC_EnableIRQ>
}
 800573e:	bf00      	nop
 8005740:	3730      	adds	r7, #48	; 0x30
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	40011000 	.word	0x40011000
 800574c:	40023800 	.word	0x40023800
 8005750:	40020000 	.word	0x40020000
 8005754:	40004800 	.word	0x40004800
 8005758:	40020400 	.word	0x40020400
 800575c:	40020c00 	.word	0x40020c00
 8005760:	20001ddc 	.word	0x20001ddc
 8005764:	40026028 	.word	0x40026028
 8005768:	20001e3c 	.word	0x20001e3c
 800576c:	40026058 	.word	0x40026058

08005770 <_ZN7VNH5019C1Ev>:
 *
 */

#include <vnh5019.h>

VNH5019::VNH5019()
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
{
}
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4618      	mov	r0, r3
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <_ZN7VNH50194initEv>:
  , pin{ pin_a, pin_b }
{
}

void VNH5019::init()
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(htim_, timer_channel_, 0);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	7d1b      	ldrb	r3, [r3, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d105      	bne.n	80057a2 <_ZN7VNH50194initEv+0x1c>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2200      	movs	r2, #0
 800579e:	635a      	str	r2, [r3, #52]	; 0x34
 80057a0:	e018      	b.n	80057d4 <_ZN7VNH50194initEv+0x4e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	7d1b      	ldrb	r3, [r3, #20]
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d105      	bne.n	80057b6 <_ZN7VNH50194initEv+0x30>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2200      	movs	r2, #0
 80057b2:	639a      	str	r2, [r3, #56]	; 0x38
 80057b4:	e00e      	b.n	80057d4 <_ZN7VNH50194initEv+0x4e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	7d1b      	ldrb	r3, [r3, #20]
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d105      	bne.n	80057ca <_ZN7VNH50194initEv+0x44>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2200      	movs	r2, #0
 80057c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80057c8:	e004      	b.n	80057d4 <_ZN7VNH50194initEv+0x4e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2200      	movs	r2, #0
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(htim_, timer_channel_);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	7d1b      	ldrb	r3, [r3, #20]
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f001 fed2 	bl	8007588 <HAL_TIM_PWM_Start>
}
 80057e4:	bf00      	nop
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <_ZN7VNH50194initEP17TIM_HandleTypeDefmmP12GPIO_TypeDefS3_tt>:

void VNH5019::init(TIM_HandleTypeDef* htim, uint32_t channel, uint32_t resolution, GPIO_TypeDef* port_a,
                   GPIO_TypeDef* port_b, uint16_t pin_a, uint16_t pin_b)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
	inverted_ = false;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
	duty_ = 0.0;
 8005800:	68f9      	ldr	r1, [r7, #12]
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	htim_ = htim;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	611a      	str	r2, [r3, #16]
	timer_channel_ = channel;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	b2da      	uxtb	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	751a      	strb	r2, [r3, #20]
	timer_resolution_ = resolution;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	619a      	str	r2, [r3, #24]
	port.a_ = port_a;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	61da      	str	r2, [r3, #28]
	port.b_ = port_b;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	621a      	str	r2, [r3, #32]
	pin.a_ = pin_a;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8c3a      	ldrh	r2, [r7, #32]
 8005832:	849a      	strh	r2, [r3, #36]	; 0x24
	pin.b_ = pin_b;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005838:	84da      	strh	r2, [r3, #38]	; 0x26
	init();
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff ffa3 	bl	8005786 <_ZN7VNH50194initEv>
}
 8005840:	bf00      	nop
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <_ZN7VNH501911setInvertedEb>:

void VNH5019::setInverted(bool inverted)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
	inverted_ = inverted;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	701a      	strb	r2, [r3, #0]
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <_ZN7VNH50199writeDutyEd>:

void VNH5019::writeDuty(double duty)
{
 8005868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800586c:	b086      	sub	sp, #24
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	ed87 0b00 	vstr	d0, [r7]
  if (inverted_)
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	7809      	ldrb	r1, [r1, #0]
 800587a:	2900      	cmp	r1, #0
 800587c:	d005      	beq.n	800588a <_ZN7VNH50199writeDutyEd+0x22>
  {
    duty = -duty;
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8005886:	e9c7 2300 	strd	r2, r3, [r7]
  }
  duty_ = SATURATION(duty, -1, 1);
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	4b6d      	ldr	r3, [pc, #436]	; (8005a44 <_ZN7VNH50199writeDutyEd+0x1dc>)
 8005890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005894:	f7fb f8e2 	bl	8000a5c <__aeabi_dcmplt>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <_ZN7VNH50199writeDutyEd+0x3e>
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	4b68      	ldr	r3, [pc, #416]	; (8005a44 <_ZN7VNH50199writeDutyEd+0x1dc>)
 80058a4:	e00f      	b.n	80058c6 <_ZN7VNH50199writeDutyEd+0x5e>
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	4b67      	ldr	r3, [pc, #412]	; (8005a48 <_ZN7VNH50199writeDutyEd+0x1e0>)
 80058ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058b0:	f7fb f8f2 	bl	8000a98 <__aeabi_dcmpgt>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <_ZN7VNH50199writeDutyEd+0x5a>
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	4b62      	ldr	r3, [pc, #392]	; (8005a48 <_ZN7VNH50199writeDutyEd+0x1e0>)
 80058c0:	e001      	b.n	80058c6 <_ZN7VNH50199writeDutyEd+0x5e>
 80058c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  int32_t counterPeriod = ABS(duty_ * timer_resolution_);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fa fdd4 	bl	8000484 <__aeabi_ui2d>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4640      	mov	r0, r8
 80058e2:	4649      	mov	r1, r9
 80058e4:	f7fa fe48 	bl	8000578 <__aeabi_dmul>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4610      	mov	r0, r2
 80058ee:	4619      	mov	r1, r3
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	f7fb f8ce 	bl	8000a98 <__aeabi_dcmpgt>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d015      	beq.n	800592e <_ZN7VNH50199writeDutyEd+0xc6>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	4618      	mov	r0, r3
 800590e:	f7fa fdb9 	bl	8000484 <__aeabi_ui2d>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4620      	mov	r0, r4
 8005918:	4629      	mov	r1, r5
 800591a:	f7fa fe2d 	bl	8000578 <__aeabi_dmul>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4610      	mov	r0, r2
 8005924:	4619      	mov	r1, r3
 8005926:	f7fb f8c1 	bl	8000aac <__aeabi_d2iz>
 800592a:	4603      	mov	r3, r0
 800592c:	e017      	b.n	800595e <_ZN7VNH50199writeDutyEd+0xf6>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	4618      	mov	r0, r3
 800593a:	f7fa fda3 	bl	8000484 <__aeabi_ui2d>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	4640      	mov	r0, r8
 8005944:	4649      	mov	r1, r9
 8005946:	f7fa fe17 	bl	8000578 <__aeabi_dmul>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4614      	mov	r4, r2
 8005950:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005954:	4620      	mov	r0, r4
 8005956:	4629      	mov	r1, r5
 8005958:	f7fb f8a8 	bl	8000aac <__aeabi_d2iz>
 800595c:	4603      	mov	r3, r0
 800595e:	617b      	str	r3, [r7, #20]

  if (duty_ > 0)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	f7fb f893 	bl	8000a98 <__aeabi_dcmpgt>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d010      	beq.n	800599a <_ZN7VNH50199writeDutyEd+0x132>
  {
    HAL_GPIO_WritePin(port.a_, pin.a_, GPIO_PIN_SET);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	69d8      	ldr	r0, [r3, #28]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005980:	2201      	movs	r2, #1
 8005982:	4619      	mov	r1, r3
 8005984:	f000 ffbe 	bl	8006904 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(port.b_, pin.b_, GPIO_PIN_RESET);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a18      	ldr	r0, [r3, #32]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005990:	2200      	movs	r2, #0
 8005992:	4619      	mov	r1, r3
 8005994:	f000 ffb6 	bl	8006904 <HAL_GPIO_WritePin>
 8005998:	e02c      	b.n	80059f4 <_ZN7VNH50199writeDutyEd+0x18c>
  }
  else if (duty_ < 0)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	f7fb f858 	bl	8000a5c <__aeabi_dcmplt>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d010      	beq.n	80059d4 <_ZN7VNH50199writeDutyEd+0x16c>
  {
    HAL_GPIO_WritePin(port.a_, pin.a_, GPIO_PIN_RESET);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	69d8      	ldr	r0, [r3, #28]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059ba:	2200      	movs	r2, #0
 80059bc:	4619      	mov	r1, r3
 80059be:	f000 ffa1 	bl	8006904 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(port.b_, pin.b_, GPIO_PIN_SET);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a18      	ldr	r0, [r3, #32]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059ca:	2201      	movs	r2, #1
 80059cc:	4619      	mov	r1, r3
 80059ce:	f000 ff99 	bl	8006904 <HAL_GPIO_WritePin>
 80059d2:	e00f      	b.n	80059f4 <_ZN7VNH50199writeDutyEd+0x18c>
  }
  else
  {
    HAL_GPIO_WritePin(port.a_, pin.a_, GPIO_PIN_RESET);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	69d8      	ldr	r0, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059dc:	2200      	movs	r2, #0
 80059de:	4619      	mov	r1, r3
 80059e0:	f000 ff90 	bl	8006904 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(port.b_, pin.b_, GPIO_PIN_RESET);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a18      	ldr	r0, [r3, #32]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059ec:	2200      	movs	r2, #0
 80059ee:	4619      	mov	r1, r3
 80059f0:	f000 ff88 	bl	8006904 <HAL_GPIO_WritePin>
  }
  __HAL_TIM_SetCompare(htim_, timer_channel_, counterPeriod);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	7d1b      	ldrb	r3, [r3, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <_ZN7VNH50199writeDutyEd+0x1a0>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005a06:	e018      	b.n	8005a3a <_ZN7VNH50199writeDutyEd+0x1d2>
  __HAL_TIM_SetCompare(htim_, timer_channel_, counterPeriod);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	7d1b      	ldrb	r3, [r3, #20]
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d105      	bne.n	8005a1c <_ZN7VNH50199writeDutyEd+0x1b4>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005a1a:	e00e      	b.n	8005a3a <_ZN7VNH50199writeDutyEd+0x1d2>
  __HAL_TIM_SetCompare(htim_, timer_channel_, counterPeriod);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	7d1b      	ldrb	r3, [r3, #20]
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d105      	bne.n	8005a30 <_ZN7VNH50199writeDutyEd+0x1c8>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005a2e:	e004      	b.n	8005a3a <_ZN7VNH50199writeDutyEd+0x1d2>
  __HAL_TIM_SetCompare(htim_, timer_channel_, counterPeriod);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005a3a:	bf00      	nop
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a44:	bff00000 	.word	0xbff00000
 8005a48:	3ff00000 	.word	0x3ff00000

08005a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a84 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a50:	480d      	ldr	r0, [pc, #52]	; (8005a88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005a52:	490e      	ldr	r1, [pc, #56]	; (8005a8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005a54:	4a0e      	ldr	r2, [pc, #56]	; (8005a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a58:	e002      	b.n	8005a60 <LoopCopyDataInit>

08005a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a5e:	3304      	adds	r3, #4

08005a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a64:	d3f9      	bcc.n	8005a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a66:	4a0b      	ldr	r2, [pc, #44]	; (8005a94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005a68:	4c0b      	ldr	r4, [pc, #44]	; (8005a98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a6c:	e001      	b.n	8005a72 <LoopFillZerobss>

08005a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a70:	3204      	adds	r2, #4

08005a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a74:	d3fb      	bcc.n	8005a6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a76:	f7ff f893 	bl	8004ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a7a:	f004 f9df 	bl	8009e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a7e:	f7fb ff75 	bl	800196c <main>
  bx  lr    
 8005a82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005a84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a8c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8005a90:	0800a4f0 	.word	0x0800a4f0
  ldr r2, =_sbss
 8005a94:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8005a98:	20001eb0 	.word	0x20001eb0

08005a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a9c:	e7fe      	b.n	8005a9c <ADC_IRQHandler>
	...

08005aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <HAL_Init+0x40>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a0d      	ldr	r2, [pc, #52]	; (8005ae0 <HAL_Init+0x40>)
 8005aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <HAL_Init+0x40>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <HAL_Init+0x40>)
 8005ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005abc:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <HAL_Init+0x40>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a07      	ldr	r2, [pc, #28]	; (8005ae0 <HAL_Init+0x40>)
 8005ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ac8:	2003      	movs	r0, #3
 8005aca:	f000 f92b 	bl	8005d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ace:	200f      	movs	r0, #15
 8005ad0:	f000 f808 	bl	8005ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ad4:	f7fe ff86 	bl	80049e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40023c00 	.word	0x40023c00

08005ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005aec:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <HAL_InitTick+0x54>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <HAL_InitTick+0x58>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	4619      	mov	r1, r3
 8005af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f943 	bl	8005d8e <HAL_SYSTICK_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e00e      	b.n	8005b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b0f      	cmp	r3, #15
 8005b16:	d80a      	bhi.n	8005b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b18:	2200      	movs	r2, #0
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	f000 f90b 	bl	8005d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b24:	4a06      	ldr	r2, [pc, #24]	; (8005b40 <HAL_InitTick+0x5c>)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e000      	b.n	8005b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000000 	.word	0x20000000
 8005b3c:	20000008 	.word	0x20000008
 8005b40:	20000004 	.word	0x20000004

08005b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <HAL_IncTick+0x20>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <HAL_IncTick+0x24>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4413      	add	r3, r2
 8005b54:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <HAL_IncTick+0x24>)
 8005b56:	6013      	str	r3, [r2, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20000008 	.word	0x20000008
 8005b68:	20001e9c 	.word	0x20001e9c

08005b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b70:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <HAL_GetTick+0x14>)
 8005b72:	681b      	ldr	r3, [r3, #0]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	20001e9c 	.word	0x20001e9c

08005b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b94:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bb6:	4a04      	ldr	r2, [pc, #16]	; (8005bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	60d3      	str	r3, [r2, #12]
}
 8005bbc:	bf00      	nop
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	e000ed00 	.word	0xe000ed00

08005bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bd0:	4b04      	ldr	r3, [pc, #16]	; (8005be4 <__NVIC_GetPriorityGrouping+0x18>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	0a1b      	lsrs	r3, r3, #8
 8005bd6:	f003 0307 	and.w	r3, r3, #7
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	e000ed00 	.word	0xe000ed00

08005be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	db0b      	blt.n	8005c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	f003 021f 	and.w	r2, r3, #31
 8005c00:	4907      	ldr	r1, [pc, #28]	; (8005c20 <__NVIC_EnableIRQ+0x38>)
 8005c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	2001      	movs	r0, #1
 8005c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	e000e100 	.word	0xe000e100

08005c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	6039      	str	r1, [r7, #0]
 8005c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	db0a      	blt.n	8005c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	490c      	ldr	r1, [pc, #48]	; (8005c70 <__NVIC_SetPriority+0x4c>)
 8005c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c42:	0112      	lsls	r2, r2, #4
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	440b      	add	r3, r1
 8005c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c4c:	e00a      	b.n	8005c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	4908      	ldr	r1, [pc, #32]	; (8005c74 <__NVIC_SetPriority+0x50>)
 8005c54:	79fb      	ldrb	r3, [r7, #7]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	3b04      	subs	r3, #4
 8005c5c:	0112      	lsls	r2, r2, #4
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	440b      	add	r3, r1
 8005c62:	761a      	strb	r2, [r3, #24]
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	e000e100 	.word	0xe000e100
 8005c74:	e000ed00 	.word	0xe000ed00

08005c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b089      	sub	sp, #36	; 0x24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f1c3 0307 	rsb	r3, r3, #7
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	bf28      	it	cs
 8005c96:	2304      	movcs	r3, #4
 8005c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	2b06      	cmp	r3, #6
 8005ca0:	d902      	bls.n	8005ca8 <NVIC_EncodePriority+0x30>
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	3b03      	subs	r3, #3
 8005ca6:	e000      	b.n	8005caa <NVIC_EncodePriority+0x32>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cac:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	43da      	mvns	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	401a      	ands	r2, r3
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cca:	43d9      	mvns	r1, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cd0:	4313      	orrs	r3, r2
         );
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3724      	adds	r7, #36	; 0x24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
	...

08005ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cf0:	d301      	bcc.n	8005cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e00f      	b.n	8005d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cf6:	4a0a      	ldr	r2, [pc, #40]	; (8005d20 <SysTick_Config+0x40>)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cfe:	210f      	movs	r1, #15
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	f7ff ff8e 	bl	8005c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <SysTick_Config+0x40>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d0e:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <SysTick_Config+0x40>)
 8005d10:	2207      	movs	r2, #7
 8005d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	e000e010 	.word	0xe000e010

08005d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff ff29 	bl	8005b84 <__NVIC_SetPriorityGrouping>
}
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b086      	sub	sp, #24
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	4603      	mov	r3, r0
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d4c:	f7ff ff3e 	bl	8005bcc <__NVIC_GetPriorityGrouping>
 8005d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	6978      	ldr	r0, [r7, #20]
 8005d58:	f7ff ff8e 	bl	8005c78 <NVIC_EncodePriority>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d62:	4611      	mov	r1, r2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff ff5d 	bl	8005c24 <__NVIC_SetPriority>
}
 8005d6a:	bf00      	nop
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	4603      	mov	r3, r0
 8005d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff ff31 	bl	8005be8 <__NVIC_EnableIRQ>
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff ffa2 	bl	8005ce0 <SysTick_Config>
 8005d9c:	4603      	mov	r3, r0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005db4:	f7ff feda 	bl	8005b6c <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e099      	b.n	8005ef8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0201 	bic.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005de4:	e00f      	b.n	8005e06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005de6:	f7ff fec1 	bl	8005b6c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b05      	cmp	r3, #5
 8005df2:	d908      	bls.n	8005e06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2220      	movs	r2, #32
 8005df8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e078      	b.n	8005ef8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e8      	bne.n	8005de6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4b38      	ldr	r3, [pc, #224]	; (8005f00 <HAL_DMA_Init+0x158>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d107      	bne.n	8005e70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0307 	bic.w	r3, r3, #7
 8005e86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d117      	bne.n	8005eca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00e      	beq.n	8005eca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fb01 	bl	80064b4 <DMA_CheckFifoParam>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2240      	movs	r2, #64	; 0x40
 8005ebc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e016      	b.n	8005ef8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fab8 	bl	8006448 <DMA_CalcBaseAndBitshift>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee0:	223f      	movs	r2, #63	; 0x3f
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	f010803f 	.word	0xf010803f

08005f04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_DMA_Start_IT+0x26>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e040      	b.n	8005fac <HAL_DMA_Start_IT+0xa8>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d12f      	bne.n	8005f9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2202      	movs	r2, #2
 8005f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fa4a 	bl	80063ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5c:	223f      	movs	r2, #63	; 0x3f
 8005f5e:	409a      	lsls	r2, r3
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0216 	orr.w	r2, r2, #22
 8005f72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0208 	orr.w	r2, r2, #8
 8005f8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0201 	orr.w	r2, r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	e005      	b.n	8005faa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005fc2:	f7ff fdd3 	bl	8005b6c <HAL_GetTick>
 8005fc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d008      	beq.n	8005fe6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2280      	movs	r2, #128	; 0x80
 8005fd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e052      	b.n	800608c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0216 	bic.w	r2, r2, #22
 8005ff4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006004:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <HAL_DMA_Abort+0x62>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0208 	bic.w	r2, r2, #8
 8006024:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0201 	bic.w	r2, r2, #1
 8006034:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006036:	e013      	b.n	8006060 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006038:	f7ff fd98 	bl	8005b6c <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b05      	cmp	r3, #5
 8006044:	d90c      	bls.n	8006060 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2203      	movs	r2, #3
 8006050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e015      	b.n	800608c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e4      	bne.n	8006038 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006072:	223f      	movs	r2, #63	; 0x3f
 8006074:	409a      	lsls	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d004      	beq.n	80060b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2280      	movs	r2, #128	; 0x80
 80060ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e00c      	b.n	80060cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2205      	movs	r2, #5
 80060b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060e4:	4b8e      	ldr	r3, [pc, #568]	; (8006320 <HAL_DMA_IRQHandler+0x248>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a8e      	ldr	r2, [pc, #568]	; (8006324 <HAL_DMA_IRQHandler+0x24c>)
 80060ea:	fba2 2303 	umull	r2, r3, r2, r3
 80060ee:	0a9b      	lsrs	r3, r3, #10
 80060f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006102:	2208      	movs	r2, #8
 8006104:	409a      	lsls	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4013      	ands	r3, r2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01a      	beq.n	8006144 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d013      	beq.n	8006144 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0204 	bic.w	r2, r2, #4
 800612a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006130:	2208      	movs	r2, #8
 8006132:	409a      	lsls	r2, r3
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613c:	f043 0201 	orr.w	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006148:	2201      	movs	r2, #1
 800614a:	409a      	lsls	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d012      	beq.n	800617a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006166:	2201      	movs	r2, #1
 8006168:	409a      	lsls	r2, r3
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006172:	f043 0202 	orr.w	r2, r3, #2
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617e:	2204      	movs	r2, #4
 8006180:	409a      	lsls	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4013      	ands	r3, r2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d012      	beq.n	80061b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00b      	beq.n	80061b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619c:	2204      	movs	r2, #4
 800619e:	409a      	lsls	r2, r3
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	f043 0204 	orr.w	r2, r3, #4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b4:	2210      	movs	r2, #16
 80061b6:	409a      	lsls	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d043      	beq.n	8006248 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d03c      	beq.n	8006248 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d2:	2210      	movs	r2, #16
 80061d4:	409a      	lsls	r2, r3
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d018      	beq.n	800621a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d108      	bne.n	8006208 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d024      	beq.n	8006248 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
 8006206:	e01f      	b.n	8006248 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
 8006218:	e016      	b.n	8006248 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006224:	2b00      	cmp	r3, #0
 8006226:	d107      	bne.n	8006238 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0208 	bic.w	r2, r2, #8
 8006236:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624c:	2220      	movs	r2, #32
 800624e:	409a      	lsls	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4013      	ands	r3, r2
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 808f 	beq.w	8006378 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8087 	beq.w	8006378 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626e:	2220      	movs	r2, #32
 8006270:	409a      	lsls	r2, r3
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b05      	cmp	r3, #5
 8006280:	d136      	bne.n	80062f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0216 	bic.w	r2, r2, #22
 8006290:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695a      	ldr	r2, [r3, #20]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <HAL_DMA_IRQHandler+0x1da>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d007      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0208 	bic.w	r2, r2, #8
 80062c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c6:	223f      	movs	r2, #63	; 0x3f
 80062c8:	409a      	lsls	r2, r3
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d07e      	beq.n	80063e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
        }
        return;
 80062ee:	e079      	b.n	80063e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d01d      	beq.n	800633a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10d      	bne.n	8006328 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006310:	2b00      	cmp	r3, #0
 8006312:	d031      	beq.n	8006378 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4798      	blx	r3
 800631c:	e02c      	b.n	8006378 <HAL_DMA_IRQHandler+0x2a0>
 800631e:	bf00      	nop
 8006320:	20000000 	.word	0x20000000
 8006324:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d023      	beq.n	8006378 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
 8006338:	e01e      	b.n	8006378 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10f      	bne.n	8006368 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0210 	bic.w	r2, r2, #16
 8006356:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637c:	2b00      	cmp	r3, #0
 800637e:	d032      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d022      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2205      	movs	r2, #5
 8006390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60bb      	str	r3, [r7, #8]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d307      	bcc.n	80063c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f2      	bne.n	80063a4 <HAL_DMA_IRQHandler+0x2cc>
 80063be:	e000      	b.n	80063c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80063c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	4798      	blx	r3
 80063e2:	e000      	b.n	80063e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80063e4:	bf00      	nop
    }
  }
}
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006408:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d108      	bne.n	800642c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800642a:	e007      	b.n	800643c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	60da      	str	r2, [r3, #12]
}
 800643c:	bf00      	nop
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	3b10      	subs	r3, #16
 8006458:	4a14      	ldr	r2, [pc, #80]	; (80064ac <DMA_CalcBaseAndBitshift+0x64>)
 800645a:	fba2 2303 	umull	r2, r3, r2, r3
 800645e:	091b      	lsrs	r3, r3, #4
 8006460:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006462:	4a13      	ldr	r2, [pc, #76]	; (80064b0 <DMA_CalcBaseAndBitshift+0x68>)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b03      	cmp	r3, #3
 8006474:	d909      	bls.n	800648a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	1d1a      	adds	r2, r3, #4
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	659a      	str	r2, [r3, #88]	; 0x58
 8006488:	e007      	b.n	800649a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	aaaaaaab 	.word	0xaaaaaaab
 80064b0:	0800a4a0 	.word	0x0800a4a0

080064b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d11f      	bne.n	800650e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d856      	bhi.n	8006582 <DMA_CheckFifoParam+0xce>
 80064d4:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <DMA_CheckFifoParam+0x28>)
 80064d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064da:	bf00      	nop
 80064dc:	080064ed 	.word	0x080064ed
 80064e0:	080064ff 	.word	0x080064ff
 80064e4:	080064ed 	.word	0x080064ed
 80064e8:	08006583 	.word	0x08006583
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d046      	beq.n	8006586 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064fc:	e043      	b.n	8006586 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006506:	d140      	bne.n	800658a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800650c:	e03d      	b.n	800658a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006516:	d121      	bne.n	800655c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b03      	cmp	r3, #3
 800651c:	d837      	bhi.n	800658e <DMA_CheckFifoParam+0xda>
 800651e:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <DMA_CheckFifoParam+0x70>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	08006535 	.word	0x08006535
 8006528:	0800653b 	.word	0x0800653b
 800652c:	08006535 	.word	0x08006535
 8006530:	0800654d 	.word	0x0800654d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	73fb      	strb	r3, [r7, #15]
      break;
 8006538:	e030      	b.n	800659c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d025      	beq.n	8006592 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800654a:	e022      	b.n	8006592 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006554:	d11f      	bne.n	8006596 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800655a:	e01c      	b.n	8006596 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d903      	bls.n	800656a <DMA_CheckFifoParam+0xb6>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b03      	cmp	r3, #3
 8006566:	d003      	beq.n	8006570 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006568:	e018      	b.n	800659c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	73fb      	strb	r3, [r7, #15]
      break;
 800656e:	e015      	b.n	800659c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00e      	beq.n	800659a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
      break;
 8006580:	e00b      	b.n	800659a <DMA_CheckFifoParam+0xe6>
      break;
 8006582:	bf00      	nop
 8006584:	e00a      	b.n	800659c <DMA_CheckFifoParam+0xe8>
      break;
 8006586:	bf00      	nop
 8006588:	e008      	b.n	800659c <DMA_CheckFifoParam+0xe8>
      break;
 800658a:	bf00      	nop
 800658c:	e006      	b.n	800659c <DMA_CheckFifoParam+0xe8>
      break;
 800658e:	bf00      	nop
 8006590:	e004      	b.n	800659c <DMA_CheckFifoParam+0xe8>
      break;
 8006592:	bf00      	nop
 8006594:	e002      	b.n	800659c <DMA_CheckFifoParam+0xe8>
      break;   
 8006596:	bf00      	nop
 8006598:	e000      	b.n	800659c <DMA_CheckFifoParam+0xe8>
      break;
 800659a:	bf00      	nop
    }
  } 
  
  return status; 
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop

080065ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b089      	sub	sp, #36	; 0x24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065be:	2300      	movs	r3, #0
 80065c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	e177      	b.n	80068b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065c8:	2201      	movs	r2, #1
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4013      	ands	r3, r2
 80065da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	f040 8166 	bne.w	80068b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d005      	beq.n	80065fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d130      	bne.n	8006660 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	2203      	movs	r2, #3
 800660a:	fa02 f303 	lsl.w	r3, r2, r3
 800660e:	43db      	mvns	r3, r3
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	4013      	ands	r3, r2
 8006614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	fa02 f303 	lsl.w	r3, r2, r3
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	4313      	orrs	r3, r2
 8006626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006634:	2201      	movs	r2, #1
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	43db      	mvns	r3, r3
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	4013      	ands	r3, r2
 8006642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	091b      	lsrs	r3, r3, #4
 800664a:	f003 0201 	and.w	r2, r3, #1
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	fa02 f303 	lsl.w	r3, r2, r3
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	4313      	orrs	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f003 0303 	and.w	r3, r3, #3
 8006668:	2b03      	cmp	r3, #3
 800666a:	d017      	beq.n	800669c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	2203      	movs	r2, #3
 8006678:	fa02 f303 	lsl.w	r3, r2, r3
 800667c:	43db      	mvns	r3, r3
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	4013      	ands	r3, r2
 8006682:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	fa02 f303 	lsl.w	r3, r2, r3
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	4313      	orrs	r3, r2
 8006694:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d123      	bne.n	80066f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	08da      	lsrs	r2, r3, #3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3208      	adds	r2, #8
 80066b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	220f      	movs	r2, #15
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	43db      	mvns	r3, r3
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	4013      	ands	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	4313      	orrs	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	08da      	lsrs	r2, r3, #3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3208      	adds	r2, #8
 80066ea:	69b9      	ldr	r1, [r7, #24]
 80066ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	2203      	movs	r2, #3
 80066fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006700:	43db      	mvns	r3, r3
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	4013      	ands	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f003 0203 	and.w	r2, r3, #3
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	4313      	orrs	r3, r2
 800671c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 80c0 	beq.w	80068b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	4b66      	ldr	r3, [pc, #408]	; (80068d0 <HAL_GPIO_Init+0x324>)
 8006738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673a:	4a65      	ldr	r2, [pc, #404]	; (80068d0 <HAL_GPIO_Init+0x324>)
 800673c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006740:	6453      	str	r3, [r2, #68]	; 0x44
 8006742:	4b63      	ldr	r3, [pc, #396]	; (80068d0 <HAL_GPIO_Init+0x324>)
 8006744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800674e:	4a61      	ldr	r2, [pc, #388]	; (80068d4 <HAL_GPIO_Init+0x328>)
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	089b      	lsrs	r3, r3, #2
 8006754:	3302      	adds	r3, #2
 8006756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800675a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	220f      	movs	r2, #15
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	43db      	mvns	r3, r3
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	4013      	ands	r3, r2
 8006770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a58      	ldr	r2, [pc, #352]	; (80068d8 <HAL_GPIO_Init+0x32c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d037      	beq.n	80067ea <HAL_GPIO_Init+0x23e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a57      	ldr	r2, [pc, #348]	; (80068dc <HAL_GPIO_Init+0x330>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d031      	beq.n	80067e6 <HAL_GPIO_Init+0x23a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a56      	ldr	r2, [pc, #344]	; (80068e0 <HAL_GPIO_Init+0x334>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d02b      	beq.n	80067e2 <HAL_GPIO_Init+0x236>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a55      	ldr	r2, [pc, #340]	; (80068e4 <HAL_GPIO_Init+0x338>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d025      	beq.n	80067de <HAL_GPIO_Init+0x232>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a54      	ldr	r2, [pc, #336]	; (80068e8 <HAL_GPIO_Init+0x33c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d01f      	beq.n	80067da <HAL_GPIO_Init+0x22e>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a53      	ldr	r2, [pc, #332]	; (80068ec <HAL_GPIO_Init+0x340>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d019      	beq.n	80067d6 <HAL_GPIO_Init+0x22a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a52      	ldr	r2, [pc, #328]	; (80068f0 <HAL_GPIO_Init+0x344>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d013      	beq.n	80067d2 <HAL_GPIO_Init+0x226>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a51      	ldr	r2, [pc, #324]	; (80068f4 <HAL_GPIO_Init+0x348>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00d      	beq.n	80067ce <HAL_GPIO_Init+0x222>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a50      	ldr	r2, [pc, #320]	; (80068f8 <HAL_GPIO_Init+0x34c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d007      	beq.n	80067ca <HAL_GPIO_Init+0x21e>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a4f      	ldr	r2, [pc, #316]	; (80068fc <HAL_GPIO_Init+0x350>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d101      	bne.n	80067c6 <HAL_GPIO_Init+0x21a>
 80067c2:	2309      	movs	r3, #9
 80067c4:	e012      	b.n	80067ec <HAL_GPIO_Init+0x240>
 80067c6:	230a      	movs	r3, #10
 80067c8:	e010      	b.n	80067ec <HAL_GPIO_Init+0x240>
 80067ca:	2308      	movs	r3, #8
 80067cc:	e00e      	b.n	80067ec <HAL_GPIO_Init+0x240>
 80067ce:	2307      	movs	r3, #7
 80067d0:	e00c      	b.n	80067ec <HAL_GPIO_Init+0x240>
 80067d2:	2306      	movs	r3, #6
 80067d4:	e00a      	b.n	80067ec <HAL_GPIO_Init+0x240>
 80067d6:	2305      	movs	r3, #5
 80067d8:	e008      	b.n	80067ec <HAL_GPIO_Init+0x240>
 80067da:	2304      	movs	r3, #4
 80067dc:	e006      	b.n	80067ec <HAL_GPIO_Init+0x240>
 80067de:	2303      	movs	r3, #3
 80067e0:	e004      	b.n	80067ec <HAL_GPIO_Init+0x240>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e002      	b.n	80067ec <HAL_GPIO_Init+0x240>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <HAL_GPIO_Init+0x240>
 80067ea:	2300      	movs	r3, #0
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	f002 0203 	and.w	r2, r2, #3
 80067f2:	0092      	lsls	r2, r2, #2
 80067f4:	4093      	lsls	r3, r2
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067fc:	4935      	ldr	r1, [pc, #212]	; (80068d4 <HAL_GPIO_Init+0x328>)
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	089b      	lsrs	r3, r3, #2
 8006802:	3302      	adds	r3, #2
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800680a:	4b3d      	ldr	r3, [pc, #244]	; (8006900 <HAL_GPIO_Init+0x354>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	43db      	mvns	r3, r3
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	4013      	ands	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800682e:	4a34      	ldr	r2, [pc, #208]	; (8006900 <HAL_GPIO_Init+0x354>)
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006834:	4b32      	ldr	r3, [pc, #200]	; (8006900 <HAL_GPIO_Init+0x354>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	43db      	mvns	r3, r3
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	4013      	ands	r3, r2
 8006842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006858:	4a29      	ldr	r2, [pc, #164]	; (8006900 <HAL_GPIO_Init+0x354>)
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800685e:	4b28      	ldr	r3, [pc, #160]	; (8006900 <HAL_GPIO_Init+0x354>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	43db      	mvns	r3, r3
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	4013      	ands	r3, r2
 800686c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006882:	4a1f      	ldr	r2, [pc, #124]	; (8006900 <HAL_GPIO_Init+0x354>)
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006888:	4b1d      	ldr	r3, [pc, #116]	; (8006900 <HAL_GPIO_Init+0x354>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	43db      	mvns	r3, r3
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	4013      	ands	r3, r2
 8006896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068ac:	4a14      	ldr	r2, [pc, #80]	; (8006900 <HAL_GPIO_Init+0x354>)
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	3301      	adds	r3, #1
 80068b6:	61fb      	str	r3, [r7, #28]
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	2b0f      	cmp	r3, #15
 80068bc:	f67f ae84 	bls.w	80065c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	3724      	adds	r7, #36	; 0x24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40023800 	.word	0x40023800
 80068d4:	40013800 	.word	0x40013800
 80068d8:	40020000 	.word	0x40020000
 80068dc:	40020400 	.word	0x40020400
 80068e0:	40020800 	.word	0x40020800
 80068e4:	40020c00 	.word	0x40020c00
 80068e8:	40021000 	.word	0x40021000
 80068ec:	40021400 	.word	0x40021400
 80068f0:	40021800 	.word	0x40021800
 80068f4:	40021c00 	.word	0x40021c00
 80068f8:	40022000 	.word	0x40022000
 80068fc:	40022400 	.word	0x40022400
 8006900:	40013c00 	.word	0x40013c00

08006904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	807b      	strh	r3, [r7, #2]
 8006910:	4613      	mov	r3, r2
 8006912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006914:	787b      	ldrb	r3, [r7, #1]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800691a:	887a      	ldrh	r2, [r7, #2]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006920:	e003      	b.n	800692a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006922:	887b      	ldrh	r3, [r7, #2]
 8006924:	041a      	lsls	r2, r3, #16
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	619a      	str	r2, [r3, #24]
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006942:	2300      	movs	r3, #0
 8006944:	603b      	str	r3, [r7, #0]
 8006946:	4b20      	ldr	r3, [pc, #128]	; (80069c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	4a1f      	ldr	r2, [pc, #124]	; (80069c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800694c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006950:	6413      	str	r3, [r2, #64]	; 0x40
 8006952:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800695e:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <HAL_PWREx_EnableOverDrive+0x94>)
 8006960:	2201      	movs	r2, #1
 8006962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006964:	f7ff f902 	bl	8005b6c <HAL_GetTick>
 8006968:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800696a:	e009      	b.n	8006980 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800696c:	f7ff f8fe 	bl	8005b6c <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800697a:	d901      	bls.n	8006980 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e01f      	b.n	80069c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006980:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800698c:	d1ee      	bne.n	800696c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800698e:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006990:	2201      	movs	r2, #1
 8006992:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006994:	f7ff f8ea 	bl	8005b6c <HAL_GetTick>
 8006998:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800699a:	e009      	b.n	80069b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800699c:	f7ff f8e6 	bl	8005b6c <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069aa:	d901      	bls.n	80069b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e007      	b.n	80069c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069bc:	d1ee      	bne.n	800699c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	40023800 	.word	0x40023800
 80069cc:	420e0040 	.word	0x420e0040
 80069d0:	40007000 	.word	0x40007000
 80069d4:	420e0044 	.word	0x420e0044

080069d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e267      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d075      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069f6:	4b88      	ldr	r3, [pc, #544]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 030c 	and.w	r3, r3, #12
 80069fe:	2b04      	cmp	r3, #4
 8006a00:	d00c      	beq.n	8006a1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a02:	4b85      	ldr	r3, [pc, #532]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d112      	bne.n	8006a34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a0e:	4b82      	ldr	r3, [pc, #520]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a1a:	d10b      	bne.n	8006a34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a1c:	4b7e      	ldr	r3, [pc, #504]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d05b      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x108>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d157      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e242      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a3c:	d106      	bne.n	8006a4c <HAL_RCC_OscConfig+0x74>
 8006a3e:	4b76      	ldr	r3, [pc, #472]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a75      	ldr	r2, [pc, #468]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	e01d      	b.n	8006a88 <HAL_RCC_OscConfig+0xb0>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a54:	d10c      	bne.n	8006a70 <HAL_RCC_OscConfig+0x98>
 8006a56:	4b70      	ldr	r3, [pc, #448]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a6f      	ldr	r2, [pc, #444]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	4b6d      	ldr	r3, [pc, #436]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a6c      	ldr	r2, [pc, #432]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	e00b      	b.n	8006a88 <HAL_RCC_OscConfig+0xb0>
 8006a70:	4b69      	ldr	r3, [pc, #420]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a68      	ldr	r2, [pc, #416]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	4b66      	ldr	r3, [pc, #408]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a65      	ldr	r2, [pc, #404]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d013      	beq.n	8006ab8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a90:	f7ff f86c 	bl	8005b6c <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a98:	f7ff f868 	bl	8005b6c <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b64      	cmp	r3, #100	; 0x64
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e207      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aaa:	4b5b      	ldr	r3, [pc, #364]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCC_OscConfig+0xc0>
 8006ab6:	e014      	b.n	8006ae2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab8:	f7ff f858 	bl	8005b6c <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ac0:	f7ff f854 	bl	8005b6c <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b64      	cmp	r3, #100	; 0x64
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e1f3      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ad2:	4b51      	ldr	r3, [pc, #324]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f0      	bne.n	8006ac0 <HAL_RCC_OscConfig+0xe8>
 8006ade:	e000      	b.n	8006ae2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d063      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006aee:	4b4a      	ldr	r3, [pc, #296]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00b      	beq.n	8006b12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006afa:	4b47      	ldr	r3, [pc, #284]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d11c      	bne.n	8006b40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b06:	4b44      	ldr	r3, [pc, #272]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d116      	bne.n	8006b40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b12:	4b41      	ldr	r3, [pc, #260]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_RCC_OscConfig+0x152>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d001      	beq.n	8006b2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e1c7      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b2a:	4b3b      	ldr	r3, [pc, #236]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	4937      	ldr	r1, [pc, #220]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b3e:	e03a      	b.n	8006bb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d020      	beq.n	8006b8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b48:	4b34      	ldr	r3, [pc, #208]	; (8006c1c <HAL_RCC_OscConfig+0x244>)
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4e:	f7ff f80d 	bl	8005b6c <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b54:	e008      	b.n	8006b68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b56:	f7ff f809 	bl	8005b6c <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d901      	bls.n	8006b68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e1a8      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b68:	4b2b      	ldr	r3, [pc, #172]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0f0      	beq.n	8006b56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b74:	4b28      	ldr	r3, [pc, #160]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	4925      	ldr	r1, [pc, #148]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	600b      	str	r3, [r1, #0]
 8006b88:	e015      	b.n	8006bb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b8a:	4b24      	ldr	r3, [pc, #144]	; (8006c1c <HAL_RCC_OscConfig+0x244>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b90:	f7fe ffec 	bl	8005b6c <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b98:	f7fe ffe8 	bl	8005b6c <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e187      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006baa:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f0      	bne.n	8006b98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d036      	beq.n	8006c30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bca:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <HAL_RCC_OscConfig+0x248>)
 8006bcc:	2201      	movs	r2, #1
 8006bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd0:	f7fe ffcc 	bl	8005b6c <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bd8:	f7fe ffc8 	bl	8005b6c <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e167      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bea:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <HAL_RCC_OscConfig+0x240>)
 8006bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0f0      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x200>
 8006bf6:	e01b      	b.n	8006c30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bf8:	4b09      	ldr	r3, [pc, #36]	; (8006c20 <HAL_RCC_OscConfig+0x248>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bfe:	f7fe ffb5 	bl	8005b6c <HAL_GetTick>
 8006c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c04:	e00e      	b.n	8006c24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c06:	f7fe ffb1 	bl	8005b6c <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d907      	bls.n	8006c24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e150      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	42470000 	.word	0x42470000
 8006c20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c24:	4b88      	ldr	r3, [pc, #544]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1ea      	bne.n	8006c06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 8097 	beq.w	8006d6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c42:	4b81      	ldr	r3, [pc, #516]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10f      	bne.n	8006c6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60bb      	str	r3, [r7, #8]
 8006c52:	4b7d      	ldr	r3, [pc, #500]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	4a7c      	ldr	r2, [pc, #496]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c5e:	4b7a      	ldr	r3, [pc, #488]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c66:	60bb      	str	r3, [r7, #8]
 8006c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c6e:	4b77      	ldr	r3, [pc, #476]	; (8006e4c <HAL_RCC_OscConfig+0x474>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d118      	bne.n	8006cac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c7a:	4b74      	ldr	r3, [pc, #464]	; (8006e4c <HAL_RCC_OscConfig+0x474>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a73      	ldr	r2, [pc, #460]	; (8006e4c <HAL_RCC_OscConfig+0x474>)
 8006c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c86:	f7fe ff71 	bl	8005b6c <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c8e:	f7fe ff6d 	bl	8005b6c <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e10c      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca0:	4b6a      	ldr	r3, [pc, #424]	; (8006e4c <HAL_RCC_OscConfig+0x474>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0f0      	beq.n	8006c8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d106      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x2ea>
 8006cb4:	4b64      	ldr	r3, [pc, #400]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb8:	4a63      	ldr	r2, [pc, #396]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc0:	e01c      	b.n	8006cfc <HAL_RCC_OscConfig+0x324>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	2b05      	cmp	r3, #5
 8006cc8:	d10c      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x30c>
 8006cca:	4b5f      	ldr	r3, [pc, #380]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	4a5e      	ldr	r2, [pc, #376]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006cd0:	f043 0304 	orr.w	r3, r3, #4
 8006cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd6:	4b5c      	ldr	r3, [pc, #368]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cda:	4a5b      	ldr	r2, [pc, #364]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006cdc:	f043 0301 	orr.w	r3, r3, #1
 8006ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ce2:	e00b      	b.n	8006cfc <HAL_RCC_OscConfig+0x324>
 8006ce4:	4b58      	ldr	r3, [pc, #352]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce8:	4a57      	ldr	r2, [pc, #348]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf0:	4b55      	ldr	r3, [pc, #340]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf4:	4a54      	ldr	r2, [pc, #336]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006cf6:	f023 0304 	bic.w	r3, r3, #4
 8006cfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d015      	beq.n	8006d30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d04:	f7fe ff32 	bl	8005b6c <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d0a:	e00a      	b.n	8006d22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d0c:	f7fe ff2e 	bl	8005b6c <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e0cb      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d22:	4b49      	ldr	r3, [pc, #292]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0ee      	beq.n	8006d0c <HAL_RCC_OscConfig+0x334>
 8006d2e:	e014      	b.n	8006d5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d30:	f7fe ff1c 	bl	8005b6c <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d36:	e00a      	b.n	8006d4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d38:	f7fe ff18 	bl	8005b6c <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e0b5      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d4e:	4b3e      	ldr	r3, [pc, #248]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1ee      	bne.n	8006d38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d105      	bne.n	8006d6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d60:	4b39      	ldr	r3, [pc, #228]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	4a38      	ldr	r2, [pc, #224]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80a1 	beq.w	8006eb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d76:	4b34      	ldr	r3, [pc, #208]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 030c 	and.w	r3, r3, #12
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	d05c      	beq.n	8006e3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d141      	bne.n	8006e0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d8a:	4b31      	ldr	r3, [pc, #196]	; (8006e50 <HAL_RCC_OscConfig+0x478>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d90:	f7fe feec 	bl	8005b6c <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d98:	f7fe fee8 	bl	8005b6c <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e087      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006daa:	4b27      	ldr	r3, [pc, #156]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69da      	ldr	r2, [r3, #28]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	019b      	lsls	r3, r3, #6
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	085b      	lsrs	r3, r3, #1
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	041b      	lsls	r3, r3, #16
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	061b      	lsls	r3, r3, #24
 8006dda:	491b      	ldr	r1, [pc, #108]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006de0:	4b1b      	ldr	r3, [pc, #108]	; (8006e50 <HAL_RCC_OscConfig+0x478>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de6:	f7fe fec1 	bl	8005b6c <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dec:	e008      	b.n	8006e00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dee:	f7fe febd 	bl	8005b6c <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e05c      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e00:	4b11      	ldr	r3, [pc, #68]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0f0      	beq.n	8006dee <HAL_RCC_OscConfig+0x416>
 8006e0c:	e054      	b.n	8006eb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e0e:	4b10      	ldr	r3, [pc, #64]	; (8006e50 <HAL_RCC_OscConfig+0x478>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e14:	f7fe feaa 	bl	8005b6c <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e1c:	f7fe fea6 	bl	8005b6c <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e045      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e2e:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <HAL_RCC_OscConfig+0x470>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f0      	bne.n	8006e1c <HAL_RCC_OscConfig+0x444>
 8006e3a:	e03d      	b.n	8006eb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d107      	bne.n	8006e54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e038      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
 8006e48:	40023800 	.word	0x40023800
 8006e4c:	40007000 	.word	0x40007000
 8006e50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e54:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <HAL_RCC_OscConfig+0x4ec>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d028      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d121      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d11a      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e84:	4013      	ands	r3, r2
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d111      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d107      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d001      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e000      	b.n	8006eba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40023800 	.word	0x40023800

08006ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e0cc      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006edc:	4b68      	ldr	r3, [pc, #416]	; (8007080 <HAL_RCC_ClockConfig+0x1b8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d90c      	bls.n	8006f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eea:	4b65      	ldr	r3, [pc, #404]	; (8007080 <HAL_RCC_ClockConfig+0x1b8>)
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ef2:	4b63      	ldr	r3, [pc, #396]	; (8007080 <HAL_RCC_ClockConfig+0x1b8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d001      	beq.n	8006f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e0b8      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d020      	beq.n	8006f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f1c:	4b59      	ldr	r3, [pc, #356]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	4a58      	ldr	r2, [pc, #352]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f34:	4b53      	ldr	r3, [pc, #332]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	4a52      	ldr	r2, [pc, #328]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f40:	4b50      	ldr	r3, [pc, #320]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	494d      	ldr	r1, [pc, #308]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d044      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d107      	bne.n	8006f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f66:	4b47      	ldr	r3, [pc, #284]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d119      	bne.n	8006fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e07f      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d003      	beq.n	8006f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d107      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f86:	4b3f      	ldr	r3, [pc, #252]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e06f      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f96:	4b3b      	ldr	r3, [pc, #236]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e067      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fa6:	4b37      	ldr	r3, [pc, #220]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f023 0203 	bic.w	r2, r3, #3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	4934      	ldr	r1, [pc, #208]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fb8:	f7fe fdd8 	bl	8005b6c <HAL_GetTick>
 8006fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fbe:	e00a      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fc0:	f7fe fdd4 	bl	8005b6c <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e04f      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd6:	4b2b      	ldr	r3, [pc, #172]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 020c 	and.w	r2, r3, #12
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d1eb      	bne.n	8006fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fe8:	4b25      	ldr	r3, [pc, #148]	; (8007080 <HAL_RCC_ClockConfig+0x1b8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d20c      	bcs.n	8007010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ff6:	4b22      	ldr	r3, [pc, #136]	; (8007080 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ffe:	4b20      	ldr	r3, [pc, #128]	; (8007080 <HAL_RCC_ClockConfig+0x1b8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d001      	beq.n	8007010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e032      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d008      	beq.n	800702e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800701c:	4b19      	ldr	r3, [pc, #100]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	4916      	ldr	r1, [pc, #88]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 800702a:	4313      	orrs	r3, r2
 800702c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d009      	beq.n	800704e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800703a:	4b12      	ldr	r3, [pc, #72]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	490e      	ldr	r1, [pc, #56]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	4313      	orrs	r3, r2
 800704c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800704e:	f000 f82d 	bl	80070ac <HAL_RCC_GetSysClockFreq>
 8007052:	4602      	mov	r2, r0
 8007054:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	091b      	lsrs	r3, r3, #4
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	490a      	ldr	r1, [pc, #40]	; (8007088 <HAL_RCC_ClockConfig+0x1c0>)
 8007060:	5ccb      	ldrb	r3, [r1, r3]
 8007062:	fa22 f303 	lsr.w	r3, r2, r3
 8007066:	4a09      	ldr	r2, [pc, #36]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8007068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800706a:	4b09      	ldr	r3, [pc, #36]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fd38 	bl	8005ae4 <HAL_InitTick>

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40023c00 	.word	0x40023c00
 8007084:	40023800 	.word	0x40023800
 8007088:	0800a488 	.word	0x0800a488
 800708c:	20000000 	.word	0x20000000
 8007090:	20000004 	.word	0x20000004

08007094 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007098:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <HAL_RCC_EnableCSS+0x14>)
 800709a:	2201      	movs	r2, #1
 800709c:	601a      	str	r2, [r3, #0]
}
 800709e:	bf00      	nop
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	4247004c 	.word	0x4247004c

080070ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070b0:	b094      	sub	sp, #80	; 0x50
 80070b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	647b      	str	r3, [r7, #68]	; 0x44
 80070b8:	2300      	movs	r3, #0
 80070ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070bc:	2300      	movs	r3, #0
 80070be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070c4:	4b79      	ldr	r3, [pc, #484]	; (80072ac <HAL_RCC_GetSysClockFreq+0x200>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 030c 	and.w	r3, r3, #12
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d00d      	beq.n	80070ec <HAL_RCC_GetSysClockFreq+0x40>
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	f200 80e1 	bhi.w	8007298 <HAL_RCC_GetSysClockFreq+0x1ec>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <HAL_RCC_GetSysClockFreq+0x34>
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d003      	beq.n	80070e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80070de:	e0db      	b.n	8007298 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070e0:	4b73      	ldr	r3, [pc, #460]	; (80072b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80070e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80070e4:	e0db      	b.n	800729e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070e6:	4b73      	ldr	r3, [pc, #460]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80070e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070ea:	e0d8      	b.n	800729e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070ec:	4b6f      	ldr	r3, [pc, #444]	; (80072ac <HAL_RCC_GetSysClockFreq+0x200>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070f6:	4b6d      	ldr	r3, [pc, #436]	; (80072ac <HAL_RCC_GetSysClockFreq+0x200>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d063      	beq.n	80071ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007102:	4b6a      	ldr	r3, [pc, #424]	; (80072ac <HAL_RCC_GetSysClockFreq+0x200>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	099b      	lsrs	r3, r3, #6
 8007108:	2200      	movs	r2, #0
 800710a:	63bb      	str	r3, [r7, #56]	; 0x38
 800710c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007114:	633b      	str	r3, [r7, #48]	; 0x30
 8007116:	2300      	movs	r3, #0
 8007118:	637b      	str	r3, [r7, #52]	; 0x34
 800711a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800711e:	4622      	mov	r2, r4
 8007120:	462b      	mov	r3, r5
 8007122:	f04f 0000 	mov.w	r0, #0
 8007126:	f04f 0100 	mov.w	r1, #0
 800712a:	0159      	lsls	r1, r3, #5
 800712c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007130:	0150      	lsls	r0, r2, #5
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	4621      	mov	r1, r4
 8007138:	1a51      	subs	r1, r2, r1
 800713a:	6139      	str	r1, [r7, #16]
 800713c:	4629      	mov	r1, r5
 800713e:	eb63 0301 	sbc.w	r3, r3, r1
 8007142:	617b      	str	r3, [r7, #20]
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007150:	4659      	mov	r1, fp
 8007152:	018b      	lsls	r3, r1, #6
 8007154:	4651      	mov	r1, sl
 8007156:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800715a:	4651      	mov	r1, sl
 800715c:	018a      	lsls	r2, r1, #6
 800715e:	4651      	mov	r1, sl
 8007160:	ebb2 0801 	subs.w	r8, r2, r1
 8007164:	4659      	mov	r1, fp
 8007166:	eb63 0901 	sbc.w	r9, r3, r1
 800716a:	f04f 0200 	mov.w	r2, #0
 800716e:	f04f 0300 	mov.w	r3, #0
 8007172:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007176:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800717a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800717e:	4690      	mov	r8, r2
 8007180:	4699      	mov	r9, r3
 8007182:	4623      	mov	r3, r4
 8007184:	eb18 0303 	adds.w	r3, r8, r3
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	462b      	mov	r3, r5
 800718c:	eb49 0303 	adc.w	r3, r9, r3
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	f04f 0300 	mov.w	r3, #0
 800719a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800719e:	4629      	mov	r1, r5
 80071a0:	024b      	lsls	r3, r1, #9
 80071a2:	4621      	mov	r1, r4
 80071a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80071a8:	4621      	mov	r1, r4
 80071aa:	024a      	lsls	r2, r1, #9
 80071ac:	4610      	mov	r0, r2
 80071ae:	4619      	mov	r1, r3
 80071b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b2:	2200      	movs	r2, #0
 80071b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80071b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071bc:	f7f9 fc9e 	bl	8000afc <__aeabi_uldivmod>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4613      	mov	r3, r2
 80071c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071c8:	e058      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071ca:	4b38      	ldr	r3, [pc, #224]	; (80072ac <HAL_RCC_GetSysClockFreq+0x200>)
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	099b      	lsrs	r3, r3, #6
 80071d0:	2200      	movs	r2, #0
 80071d2:	4618      	mov	r0, r3
 80071d4:	4611      	mov	r1, r2
 80071d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80071da:	623b      	str	r3, [r7, #32]
 80071dc:	2300      	movs	r3, #0
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
 80071e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80071e4:	4642      	mov	r2, r8
 80071e6:	464b      	mov	r3, r9
 80071e8:	f04f 0000 	mov.w	r0, #0
 80071ec:	f04f 0100 	mov.w	r1, #0
 80071f0:	0159      	lsls	r1, r3, #5
 80071f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071f6:	0150      	lsls	r0, r2, #5
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	4641      	mov	r1, r8
 80071fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8007202:	4649      	mov	r1, r9
 8007204:	eb63 0b01 	sbc.w	fp, r3, r1
 8007208:	f04f 0200 	mov.w	r2, #0
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007214:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007218:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800721c:	ebb2 040a 	subs.w	r4, r2, sl
 8007220:	eb63 050b 	sbc.w	r5, r3, fp
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	00eb      	lsls	r3, r5, #3
 800722e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007232:	00e2      	lsls	r2, r4, #3
 8007234:	4614      	mov	r4, r2
 8007236:	461d      	mov	r5, r3
 8007238:	4643      	mov	r3, r8
 800723a:	18e3      	adds	r3, r4, r3
 800723c:	603b      	str	r3, [r7, #0]
 800723e:	464b      	mov	r3, r9
 8007240:	eb45 0303 	adc.w	r3, r5, r3
 8007244:	607b      	str	r3, [r7, #4]
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007252:	4629      	mov	r1, r5
 8007254:	028b      	lsls	r3, r1, #10
 8007256:	4621      	mov	r1, r4
 8007258:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800725c:	4621      	mov	r1, r4
 800725e:	028a      	lsls	r2, r1, #10
 8007260:	4610      	mov	r0, r2
 8007262:	4619      	mov	r1, r3
 8007264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007266:	2200      	movs	r2, #0
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	61fa      	str	r2, [r7, #28]
 800726c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007270:	f7f9 fc44 	bl	8000afc <__aeabi_uldivmod>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4613      	mov	r3, r2
 800727a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800727c:	4b0b      	ldr	r3, [pc, #44]	; (80072ac <HAL_RCC_GetSysClockFreq+0x200>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	0c1b      	lsrs	r3, r3, #16
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	3301      	adds	r3, #1
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800728c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800728e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007290:	fbb2 f3f3 	udiv	r3, r2, r3
 8007294:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007296:	e002      	b.n	800729e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007298:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800729a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800729c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800729e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3750      	adds	r7, #80	; 0x50
 80072a4:	46bd      	mov	sp, r7
 80072a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072aa:	bf00      	nop
 80072ac:	40023800 	.word	0x40023800
 80072b0:	00f42400 	.word	0x00f42400
 80072b4:	007a1200 	.word	0x007a1200

080072b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072bc:	4b03      	ldr	r3, [pc, #12]	; (80072cc <HAL_RCC_GetHCLKFreq+0x14>)
 80072be:	681b      	ldr	r3, [r3, #0]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	20000000 	.word	0x20000000

080072d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072d4:	f7ff fff0 	bl	80072b8 <HAL_RCC_GetHCLKFreq>
 80072d8:	4602      	mov	r2, r0
 80072da:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	0a9b      	lsrs	r3, r3, #10
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	4903      	ldr	r1, [pc, #12]	; (80072f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072e6:	5ccb      	ldrb	r3, [r1, r3]
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	40023800 	.word	0x40023800
 80072f4:	0800a498 	.word	0x0800a498

080072f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80072fc:	f7ff ffdc 	bl	80072b8 <HAL_RCC_GetHCLKFreq>
 8007300:	4602      	mov	r2, r0
 8007302:	4b05      	ldr	r3, [pc, #20]	; (8007318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	0b5b      	lsrs	r3, r3, #13
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	4903      	ldr	r1, [pc, #12]	; (800731c <HAL_RCC_GetPCLK2Freq+0x24>)
 800730e:	5ccb      	ldrb	r3, [r1, r3]
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007314:	4618      	mov	r0, r3
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40023800 	.word	0x40023800
 800731c:	0800a498 	.word	0x0800a498

08007320 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007324:	4b06      	ldr	r3, [pc, #24]	; (8007340 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732c:	2b80      	cmp	r3, #128	; 0x80
 800732e:	d104      	bne.n	800733a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007330:	f000 f80a 	bl	8007348 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007334:	4b03      	ldr	r3, [pc, #12]	; (8007344 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007336:	2280      	movs	r2, #128	; 0x80
 8007338:	701a      	strb	r2, [r3, #0]
  }
}
 800733a:	bf00      	nop
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	40023800 	.word	0x40023800
 8007344:	4002380e 	.word	0x4002380e

08007348 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b082      	sub	sp, #8
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e041      	b.n	80073ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d106      	bne.n	8007382 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7fd ffbf 	bl	8005300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2202      	movs	r2, #2
 8007386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3304      	adds	r3, #4
 8007392:	4619      	mov	r1, r3
 8007394:	4610      	mov	r0, r2
 8007396:	f000 fdad 	bl	8007ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b01      	cmp	r3, #1
 8007406:	d001      	beq.n	800740c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e04e      	b.n	80074aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0201 	orr.w	r2, r2, #1
 8007422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a23      	ldr	r2, [pc, #140]	; (80074b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d022      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x80>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007436:	d01d      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x80>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a1f      	ldr	r2, [pc, #124]	; (80074bc <HAL_TIM_Base_Start_IT+0xc8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d018      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x80>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a1e      	ldr	r2, [pc, #120]	; (80074c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d013      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x80>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a1c      	ldr	r2, [pc, #112]	; (80074c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00e      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x80>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1b      	ldr	r2, [pc, #108]	; (80074c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d009      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x80>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a19      	ldr	r2, [pc, #100]	; (80074cc <HAL_TIM_Base_Start_IT+0xd8>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x80>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a18      	ldr	r2, [pc, #96]	; (80074d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d111      	bne.n	8007498 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b06      	cmp	r3, #6
 8007484:	d010      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 0201 	orr.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007496:	e007      	b.n	80074a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0201 	orr.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	40010000 	.word	0x40010000
 80074bc:	40000400 	.word	0x40000400
 80074c0:	40000800 	.word	0x40000800
 80074c4:	40000c00 	.word	0x40000c00
 80074c8:	40010400 	.word	0x40010400
 80074cc:	40014000 	.word	0x40014000
 80074d0:	40001800 	.word	0x40001800

080074d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e041      	b.n	800756a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f839 	bl	8007572 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	3304      	adds	r3, #4
 8007510:	4619      	mov	r1, r3
 8007512:	4610      	mov	r0, r2
 8007514:	f000 fcee 	bl	8007ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
	...

08007588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d109      	bne.n	80075ac <HAL_TIM_PWM_Start+0x24>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	bf14      	ite	ne
 80075a4:	2301      	movne	r3, #1
 80075a6:	2300      	moveq	r3, #0
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	e022      	b.n	80075f2 <HAL_TIM_PWM_Start+0x6a>
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d109      	bne.n	80075c6 <HAL_TIM_PWM_Start+0x3e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	bf14      	ite	ne
 80075be:	2301      	movne	r3, #1
 80075c0:	2300      	moveq	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	e015      	b.n	80075f2 <HAL_TIM_PWM_Start+0x6a>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d109      	bne.n	80075e0 <HAL_TIM_PWM_Start+0x58>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	bf14      	ite	ne
 80075d8:	2301      	movne	r3, #1
 80075da:	2300      	moveq	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	e008      	b.n	80075f2 <HAL_TIM_PWM_Start+0x6a>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	bf14      	ite	ne
 80075ec:	2301      	movne	r3, #1
 80075ee:	2300      	moveq	r3, #0
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e07c      	b.n	80076f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d104      	bne.n	800760a <HAL_TIM_PWM_Start+0x82>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007608:	e013      	b.n	8007632 <HAL_TIM_PWM_Start+0xaa>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b04      	cmp	r3, #4
 800760e:	d104      	bne.n	800761a <HAL_TIM_PWM_Start+0x92>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007618:	e00b      	b.n	8007632 <HAL_TIM_PWM_Start+0xaa>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b08      	cmp	r3, #8
 800761e:	d104      	bne.n	800762a <HAL_TIM_PWM_Start+0xa2>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007628:	e003      	b.n	8007632 <HAL_TIM_PWM_Start+0xaa>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2202      	movs	r2, #2
 800762e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2201      	movs	r2, #1
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 ff44 	bl	80084c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a2d      	ldr	r2, [pc, #180]	; (80076fc <HAL_TIM_PWM_Start+0x174>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d004      	beq.n	8007654 <HAL_TIM_PWM_Start+0xcc>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a2c      	ldr	r2, [pc, #176]	; (8007700 <HAL_TIM_PWM_Start+0x178>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d101      	bne.n	8007658 <HAL_TIM_PWM_Start+0xd0>
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <HAL_TIM_PWM_Start+0xd2>
 8007658:	2300      	movs	r3, #0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800766c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a22      	ldr	r2, [pc, #136]	; (80076fc <HAL_TIM_PWM_Start+0x174>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d022      	beq.n	80076be <HAL_TIM_PWM_Start+0x136>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007680:	d01d      	beq.n	80076be <HAL_TIM_PWM_Start+0x136>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a1f      	ldr	r2, [pc, #124]	; (8007704 <HAL_TIM_PWM_Start+0x17c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d018      	beq.n	80076be <HAL_TIM_PWM_Start+0x136>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a1d      	ldr	r2, [pc, #116]	; (8007708 <HAL_TIM_PWM_Start+0x180>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d013      	beq.n	80076be <HAL_TIM_PWM_Start+0x136>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a1c      	ldr	r2, [pc, #112]	; (800770c <HAL_TIM_PWM_Start+0x184>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00e      	beq.n	80076be <HAL_TIM_PWM_Start+0x136>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a16      	ldr	r2, [pc, #88]	; (8007700 <HAL_TIM_PWM_Start+0x178>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d009      	beq.n	80076be <HAL_TIM_PWM_Start+0x136>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a18      	ldr	r2, [pc, #96]	; (8007710 <HAL_TIM_PWM_Start+0x188>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d004      	beq.n	80076be <HAL_TIM_PWM_Start+0x136>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a16      	ldr	r2, [pc, #88]	; (8007714 <HAL_TIM_PWM_Start+0x18c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d111      	bne.n	80076e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b06      	cmp	r3, #6
 80076ce:	d010      	beq.n	80076f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0201 	orr.w	r2, r2, #1
 80076de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e0:	e007      	b.n	80076f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f042 0201 	orr.w	r2, r2, #1
 80076f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40010000 	.word	0x40010000
 8007700:	40010400 	.word	0x40010400
 8007704:	40000400 	.word	0x40000400
 8007708:	40000800 	.word	0x40000800
 800770c:	40000c00 	.word	0x40000c00
 8007710:	40014000 	.word	0x40014000
 8007714:	40001800 	.word	0x40001800

08007718 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e097      	b.n	800785c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d106      	bne.n	8007746 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7fd fcd7 	bl	80050f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800775c:	f023 0307 	bic.w	r3, r3, #7
 8007760:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	3304      	adds	r3, #4
 800776a:	4619      	mov	r1, r3
 800776c:	4610      	mov	r0, r2
 800776e:	f000 fbc1 	bl	8007ef4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800779a:	f023 0303 	bic.w	r3, r3, #3
 800779e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	021b      	lsls	r3, r3, #8
 80077aa:	4313      	orrs	r3, r2
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80077b8:	f023 030c 	bic.w	r3, r3, #12
 80077bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	021b      	lsls	r3, r3, #8
 80077d4:	4313      	orrs	r3, r2
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	011a      	lsls	r2, r3, #4
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	031b      	lsls	r3, r3, #12
 80077e8:	4313      	orrs	r3, r2
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80077f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80077fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	4313      	orrs	r3, r2
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007874:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800787c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007884:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800788c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d110      	bne.n	80078b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d102      	bne.n	80078a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800789a:	7b7b      	ldrb	r3, [r7, #13]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d001      	beq.n	80078a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e069      	b.n	8007978 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078b4:	e031      	b.n	800791a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d110      	bne.n	80078de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d102      	bne.n	80078c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078c2:	7b3b      	ldrb	r3, [r7, #12]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d001      	beq.n	80078cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e055      	b.n	8007978 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078dc:	e01d      	b.n	800791a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d108      	bne.n	80078f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d105      	bne.n	80078f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078ea:	7b7b      	ldrb	r3, [r7, #13]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d102      	bne.n	80078f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078f0:	7b3b      	ldrb	r3, [r7, #12]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d001      	beq.n	80078fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e03e      	b.n	8007978 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2202      	movs	r2, #2
 800790e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2202      	movs	r2, #2
 8007916:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <HAL_TIM_Encoder_Start+0xc4>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b04      	cmp	r3, #4
 8007924:	d008      	beq.n	8007938 <HAL_TIM_Encoder_Start+0xd4>
 8007926:	e00f      	b.n	8007948 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2201      	movs	r2, #1
 800792e:	2100      	movs	r1, #0
 8007930:	4618      	mov	r0, r3
 8007932:	f000 fdc9 	bl	80084c8 <TIM_CCxChannelCmd>
      break;
 8007936:	e016      	b.n	8007966 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2201      	movs	r2, #1
 800793e:	2104      	movs	r1, #4
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fdc1 	bl	80084c8 <TIM_CCxChannelCmd>
      break;
 8007946:	e00e      	b.n	8007966 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2201      	movs	r2, #1
 800794e:	2100      	movs	r1, #0
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fdb9 	bl	80084c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2201      	movs	r2, #1
 800795c:	2104      	movs	r1, #4
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fdb2 	bl	80084c8 <TIM_CCxChannelCmd>
      break;
 8007964:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f042 0201 	orr.w	r2, r2, #1
 8007974:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b02      	cmp	r3, #2
 8007994:	d122      	bne.n	80079dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d11b      	bne.n	80079dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f06f 0202 	mvn.w	r2, #2
 80079ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa77 	bl	8007eb6 <HAL_TIM_IC_CaptureCallback>
 80079c8:	e005      	b.n	80079d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa69 	bl	8007ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fa7a 	bl	8007eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d122      	bne.n	8007a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d11b      	bne.n	8007a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f06f 0204 	mvn.w	r2, #4
 8007a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2202      	movs	r2, #2
 8007a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fa4d 	bl	8007eb6 <HAL_TIM_IC_CaptureCallback>
 8007a1c:	e005      	b.n	8007a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fa3f 	bl	8007ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fa50 	bl	8007eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	f003 0308 	and.w	r3, r3, #8
 8007a3a:	2b08      	cmp	r3, #8
 8007a3c:	d122      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d11b      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f06f 0208 	mvn.w	r2, #8
 8007a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2204      	movs	r2, #4
 8007a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa23 	bl	8007eb6 <HAL_TIM_IC_CaptureCallback>
 8007a70:	e005      	b.n	8007a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fa15 	bl	8007ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fa26 	bl	8007eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 0310 	and.w	r3, r3, #16
 8007a8e:	2b10      	cmp	r3, #16
 8007a90:	d122      	bne.n	8007ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f003 0310 	and.w	r3, r3, #16
 8007a9c:	2b10      	cmp	r3, #16
 8007a9e:	d11b      	bne.n	8007ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0210 	mvn.w	r2, #16
 8007aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2208      	movs	r2, #8
 8007aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f9f9 	bl	8007eb6 <HAL_TIM_IC_CaptureCallback>
 8007ac4:	e005      	b.n	8007ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f9eb 	bl	8007ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f9fc 	bl	8007eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d10e      	bne.n	8007b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d107      	bne.n	8007b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f06f 0201 	mvn.w	r2, #1
 8007afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7f9 fe44 	bl	800178c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0e:	2b80      	cmp	r3, #128	; 0x80
 8007b10:	d10e      	bne.n	8007b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1c:	2b80      	cmp	r3, #128	; 0x80
 8007b1e:	d107      	bne.n	8007b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fd78 	bl	8008620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3a:	2b40      	cmp	r3, #64	; 0x40
 8007b3c:	d10e      	bne.n	8007b5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b48:	2b40      	cmp	r3, #64	; 0x40
 8007b4a:	d107      	bne.n	8007b5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f9c1 	bl	8007ede <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b20      	cmp	r3, #32
 8007b68:	d10e      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d107      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f06f 0220 	mvn.w	r2, #32
 8007b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fd42 	bl	800860c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b88:	bf00      	nop
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d101      	bne.n	8007bae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007baa:	2302      	movs	r3, #2
 8007bac:	e0ae      	b.n	8007d0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b0c      	cmp	r3, #12
 8007bba:	f200 809f 	bhi.w	8007cfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007bbe:	a201      	add	r2, pc, #4	; (adr r2, 8007bc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc4:	08007bf9 	.word	0x08007bf9
 8007bc8:	08007cfd 	.word	0x08007cfd
 8007bcc:	08007cfd 	.word	0x08007cfd
 8007bd0:	08007cfd 	.word	0x08007cfd
 8007bd4:	08007c39 	.word	0x08007c39
 8007bd8:	08007cfd 	.word	0x08007cfd
 8007bdc:	08007cfd 	.word	0x08007cfd
 8007be0:	08007cfd 	.word	0x08007cfd
 8007be4:	08007c7b 	.word	0x08007c7b
 8007be8:	08007cfd 	.word	0x08007cfd
 8007bec:	08007cfd 	.word	0x08007cfd
 8007bf0:	08007cfd 	.word	0x08007cfd
 8007bf4:	08007cbb 	.word	0x08007cbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fa18 	bl	8008034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0208 	orr.w	r2, r2, #8
 8007c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699a      	ldr	r2, [r3, #24]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0204 	bic.w	r2, r2, #4
 8007c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6999      	ldr	r1, [r3, #24]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	691a      	ldr	r2, [r3, #16]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	619a      	str	r2, [r3, #24]
      break;
 8007c36:	e064      	b.n	8007d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fa68 	bl	8008114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699a      	ldr	r2, [r3, #24]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6999      	ldr	r1, [r3, #24]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	021a      	lsls	r2, r3, #8
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	619a      	str	r2, [r3, #24]
      break;
 8007c78:	e043      	b.n	8007d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68b9      	ldr	r1, [r7, #8]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fabd 	bl	8008200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 0208 	orr.w	r2, r2, #8
 8007c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69da      	ldr	r2, [r3, #28]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0204 	bic.w	r2, r2, #4
 8007ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69d9      	ldr	r1, [r3, #28]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	61da      	str	r2, [r3, #28]
      break;
 8007cb8:	e023      	b.n	8007d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fb11 	bl	80082e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69da      	ldr	r2, [r3, #28]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69d9      	ldr	r1, [r3, #28]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	021a      	lsls	r2, r3, #8
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	61da      	str	r2, [r3, #28]
      break;
 8007cfa:	e002      	b.n	8007d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8007d00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d101      	bne.n	8007d30 <HAL_TIM_ConfigClockSource+0x1c>
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e0b4      	b.n	8007e9a <HAL_TIM_ConfigClockSource+0x186>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d68:	d03e      	beq.n	8007de8 <HAL_TIM_ConfigClockSource+0xd4>
 8007d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d6e:	f200 8087 	bhi.w	8007e80 <HAL_TIM_ConfigClockSource+0x16c>
 8007d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d76:	f000 8086 	beq.w	8007e86 <HAL_TIM_ConfigClockSource+0x172>
 8007d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7e:	d87f      	bhi.n	8007e80 <HAL_TIM_ConfigClockSource+0x16c>
 8007d80:	2b70      	cmp	r3, #112	; 0x70
 8007d82:	d01a      	beq.n	8007dba <HAL_TIM_ConfigClockSource+0xa6>
 8007d84:	2b70      	cmp	r3, #112	; 0x70
 8007d86:	d87b      	bhi.n	8007e80 <HAL_TIM_ConfigClockSource+0x16c>
 8007d88:	2b60      	cmp	r3, #96	; 0x60
 8007d8a:	d050      	beq.n	8007e2e <HAL_TIM_ConfigClockSource+0x11a>
 8007d8c:	2b60      	cmp	r3, #96	; 0x60
 8007d8e:	d877      	bhi.n	8007e80 <HAL_TIM_ConfigClockSource+0x16c>
 8007d90:	2b50      	cmp	r3, #80	; 0x50
 8007d92:	d03c      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0xfa>
 8007d94:	2b50      	cmp	r3, #80	; 0x50
 8007d96:	d873      	bhi.n	8007e80 <HAL_TIM_ConfigClockSource+0x16c>
 8007d98:	2b40      	cmp	r3, #64	; 0x40
 8007d9a:	d058      	beq.n	8007e4e <HAL_TIM_ConfigClockSource+0x13a>
 8007d9c:	2b40      	cmp	r3, #64	; 0x40
 8007d9e:	d86f      	bhi.n	8007e80 <HAL_TIM_ConfigClockSource+0x16c>
 8007da0:	2b30      	cmp	r3, #48	; 0x30
 8007da2:	d064      	beq.n	8007e6e <HAL_TIM_ConfigClockSource+0x15a>
 8007da4:	2b30      	cmp	r3, #48	; 0x30
 8007da6:	d86b      	bhi.n	8007e80 <HAL_TIM_ConfigClockSource+0x16c>
 8007da8:	2b20      	cmp	r3, #32
 8007daa:	d060      	beq.n	8007e6e <HAL_TIM_ConfigClockSource+0x15a>
 8007dac:	2b20      	cmp	r3, #32
 8007dae:	d867      	bhi.n	8007e80 <HAL_TIM_ConfigClockSource+0x16c>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d05c      	beq.n	8007e6e <HAL_TIM_ConfigClockSource+0x15a>
 8007db4:	2b10      	cmp	r3, #16
 8007db6:	d05a      	beq.n	8007e6e <HAL_TIM_ConfigClockSource+0x15a>
 8007db8:	e062      	b.n	8007e80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	6899      	ldr	r1, [r3, #8]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f000 fb5d 	bl	8008488 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ddc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	609a      	str	r2, [r3, #8]
      break;
 8007de6:	e04f      	b.n	8007e88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6818      	ldr	r0, [r3, #0]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	6899      	ldr	r1, [r3, #8]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f000 fb46 	bl	8008488 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689a      	ldr	r2, [r3, #8]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e0a:	609a      	str	r2, [r3, #8]
      break;
 8007e0c:	e03c      	b.n	8007e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6818      	ldr	r0, [r3, #0]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	6859      	ldr	r1, [r3, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f000 faba 	bl	8008394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2150      	movs	r1, #80	; 0x50
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fb13 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8007e2c:	e02c      	b.n	8007e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	6859      	ldr	r1, [r3, #4]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f000 fad9 	bl	80083f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2160      	movs	r1, #96	; 0x60
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fb03 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8007e4c:	e01c      	b.n	8007e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	6859      	ldr	r1, [r3, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f000 fa9a 	bl	8008394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2140      	movs	r1, #64	; 0x40
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 faf3 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8007e6c:	e00c      	b.n	8007e88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4619      	mov	r1, r3
 8007e78:	4610      	mov	r0, r2
 8007e7a:	f000 faea 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8007e7e:	e003      	b.n	8007e88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	73fb      	strb	r3, [r7, #15]
      break;
 8007e84:	e000      	b.n	8007e88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
	...

08007ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a40      	ldr	r2, [pc, #256]	; (8008008 <TIM_Base_SetConfig+0x114>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d013      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f12:	d00f      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a3d      	ldr	r2, [pc, #244]	; (800800c <TIM_Base_SetConfig+0x118>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00b      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a3c      	ldr	r2, [pc, #240]	; (8008010 <TIM_Base_SetConfig+0x11c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d007      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a3b      	ldr	r2, [pc, #236]	; (8008014 <TIM_Base_SetConfig+0x120>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a3a      	ldr	r2, [pc, #232]	; (8008018 <TIM_Base_SetConfig+0x124>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d108      	bne.n	8007f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a2f      	ldr	r2, [pc, #188]	; (8008008 <TIM_Base_SetConfig+0x114>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d02b      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f54:	d027      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a2c      	ldr	r2, [pc, #176]	; (800800c <TIM_Base_SetConfig+0x118>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d023      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2b      	ldr	r2, [pc, #172]	; (8008010 <TIM_Base_SetConfig+0x11c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01f      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2a      	ldr	r2, [pc, #168]	; (8008014 <TIM_Base_SetConfig+0x120>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d01b      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a29      	ldr	r2, [pc, #164]	; (8008018 <TIM_Base_SetConfig+0x124>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d017      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a28      	ldr	r2, [pc, #160]	; (800801c <TIM_Base_SetConfig+0x128>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d013      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a27      	ldr	r2, [pc, #156]	; (8008020 <TIM_Base_SetConfig+0x12c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00f      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a26      	ldr	r2, [pc, #152]	; (8008024 <TIM_Base_SetConfig+0x130>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d00b      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a25      	ldr	r2, [pc, #148]	; (8008028 <TIM_Base_SetConfig+0x134>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d007      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a24      	ldr	r2, [pc, #144]	; (800802c <TIM_Base_SetConfig+0x138>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d003      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a23      	ldr	r2, [pc, #140]	; (8008030 <TIM_Base_SetConfig+0x13c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d108      	bne.n	8007fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a0a      	ldr	r2, [pc, #40]	; (8008008 <TIM_Base_SetConfig+0x114>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d003      	beq.n	8007fec <TIM_Base_SetConfig+0xf8>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a0c      	ldr	r2, [pc, #48]	; (8008018 <TIM_Base_SetConfig+0x124>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d103      	bne.n	8007ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	615a      	str	r2, [r3, #20]
}
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	40010000 	.word	0x40010000
 800800c:	40000400 	.word	0x40000400
 8008010:	40000800 	.word	0x40000800
 8008014:	40000c00 	.word	0x40000c00
 8008018:	40010400 	.word	0x40010400
 800801c:	40014000 	.word	0x40014000
 8008020:	40014400 	.word	0x40014400
 8008024:	40014800 	.word	0x40014800
 8008028:	40001800 	.word	0x40001800
 800802c:	40001c00 	.word	0x40001c00
 8008030:	40002000 	.word	0x40002000

08008034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	f023 0201 	bic.w	r2, r3, #1
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0303 	bic.w	r3, r3, #3
 800806a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f023 0302 	bic.w	r3, r3, #2
 800807c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	4313      	orrs	r3, r2
 8008086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a20      	ldr	r2, [pc, #128]	; (800810c <TIM_OC1_SetConfig+0xd8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_OC1_SetConfig+0x64>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a1f      	ldr	r2, [pc, #124]	; (8008110 <TIM_OC1_SetConfig+0xdc>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d10c      	bne.n	80080b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f023 0308 	bic.w	r3, r3, #8
 800809e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f023 0304 	bic.w	r3, r3, #4
 80080b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a15      	ldr	r2, [pc, #84]	; (800810c <TIM_OC1_SetConfig+0xd8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d003      	beq.n	80080c2 <TIM_OC1_SetConfig+0x8e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a14      	ldr	r2, [pc, #80]	; (8008110 <TIM_OC1_SetConfig+0xdc>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d111      	bne.n	80080e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	4313      	orrs	r3, r2
 80080da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	621a      	str	r2, [r3, #32]
}
 8008100:	bf00      	nop
 8008102:	371c      	adds	r7, #28
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	40010000 	.word	0x40010000
 8008110:	40010400 	.word	0x40010400

08008114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	f023 0210 	bic.w	r2, r3, #16
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800814a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f023 0320 	bic.w	r3, r3, #32
 800815e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a22      	ldr	r2, [pc, #136]	; (80081f8 <TIM_OC2_SetConfig+0xe4>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d003      	beq.n	800817c <TIM_OC2_SetConfig+0x68>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a21      	ldr	r2, [pc, #132]	; (80081fc <TIM_OC2_SetConfig+0xe8>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d10d      	bne.n	8008198 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <TIM_OC2_SetConfig+0xe4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d003      	beq.n	80081a8 <TIM_OC2_SetConfig+0x94>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a16      	ldr	r2, [pc, #88]	; (80081fc <TIM_OC2_SetConfig+0xe8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d113      	bne.n	80081d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	621a      	str	r2, [r3, #32]
}
 80081ea:	bf00      	nop
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	40010000 	.word	0x40010000
 80081fc:	40010400 	.word	0x40010400

08008200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0303 	bic.w	r3, r3, #3
 8008236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	4313      	orrs	r3, r2
 8008254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a21      	ldr	r2, [pc, #132]	; (80082e0 <TIM_OC3_SetConfig+0xe0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d003      	beq.n	8008266 <TIM_OC3_SetConfig+0x66>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a20      	ldr	r2, [pc, #128]	; (80082e4 <TIM_OC3_SetConfig+0xe4>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d10d      	bne.n	8008282 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800826c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	4313      	orrs	r3, r2
 8008278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a16      	ldr	r2, [pc, #88]	; (80082e0 <TIM_OC3_SetConfig+0xe0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_OC3_SetConfig+0x92>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a15      	ldr	r2, [pc, #84]	; (80082e4 <TIM_OC3_SetConfig+0xe4>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d113      	bne.n	80082ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	621a      	str	r2, [r3, #32]
}
 80082d4:	bf00      	nop
 80082d6:	371c      	adds	r7, #28
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40010400 	.word	0x40010400

080082e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800831e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	021b      	lsls	r3, r3, #8
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	031b      	lsls	r3, r3, #12
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a12      	ldr	r2, [pc, #72]	; (800838c <TIM_OC4_SetConfig+0xa4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d003      	beq.n	8008350 <TIM_OC4_SetConfig+0x68>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a11      	ldr	r2, [pc, #68]	; (8008390 <TIM_OC4_SetConfig+0xa8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d109      	bne.n	8008364 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	019b      	lsls	r3, r3, #6
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	621a      	str	r2, [r3, #32]
}
 800837e:	bf00      	nop
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40010000 	.word	0x40010000
 8008390:	40010400 	.word	0x40010400

08008394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	f023 0201 	bic.w	r2, r3, #1
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	011b      	lsls	r3, r3, #4
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f023 030a 	bic.w	r3, r3, #10
 80083d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	621a      	str	r2, [r3, #32]
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b087      	sub	sp, #28
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	f023 0210 	bic.w	r2, r3, #16
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800841c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	031b      	lsls	r3, r3, #12
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4313      	orrs	r3, r2
 8008426:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800842e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	011b      	lsls	r3, r3, #4
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4313      	orrs	r3, r2
 8008438:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	621a      	str	r2, [r3, #32]
}
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008452:	b480      	push	{r7}
 8008454:	b085      	sub	sp, #20
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	f043 0307 	orr.w	r3, r3, #7
 8008474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	609a      	str	r2, [r3, #8]
}
 800847c:	bf00      	nop
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	021a      	lsls	r2, r3, #8
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	431a      	orrs	r2, r3
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	609a      	str	r2, [r3, #8]
}
 80084bc:	bf00      	nop
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f003 031f 	and.w	r3, r3, #31
 80084da:	2201      	movs	r2, #1
 80084dc:	fa02 f303 	lsl.w	r3, r2, r3
 80084e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6a1a      	ldr	r2, [r3, #32]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	43db      	mvns	r3, r3
 80084ea:	401a      	ands	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a1a      	ldr	r2, [r3, #32]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f003 031f 	and.w	r3, r3, #31
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008500:	431a      	orrs	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	621a      	str	r2, [r3, #32]
}
 8008506:	bf00      	nop
 8008508:	371c      	adds	r7, #28
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
	...

08008514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008524:	2b01      	cmp	r3, #1
 8008526:	d101      	bne.n	800852c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008528:	2302      	movs	r3, #2
 800852a:	e05a      	b.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	4313      	orrs	r3, r2
 800855c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a21      	ldr	r2, [pc, #132]	; (80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d022      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008578:	d01d      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a1d      	ldr	r2, [pc, #116]	; (80085f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d018      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a1b      	ldr	r2, [pc, #108]	; (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d013      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a1a      	ldr	r2, [pc, #104]	; (80085fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00e      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a18      	ldr	r2, [pc, #96]	; (8008600 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d009      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a17      	ldr	r2, [pc, #92]	; (8008604 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d004      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a15      	ldr	r2, [pc, #84]	; (8008608 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d10c      	bne.n	80085d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	40010000 	.word	0x40010000
 80085f4:	40000400 	.word	0x40000400
 80085f8:	40000800 	.word	0x40000800
 80085fc:	40000c00 	.word	0x40000c00
 8008600:	40010400 	.word	0x40010400
 8008604:	40014000 	.word	0x40014000
 8008608:	40001800 	.word	0x40001800

0800860c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e03f      	b.n	80086c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7fc ff78 	bl	8005550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2224      	movs	r2, #36	; 0x24
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 ff43 	bl	8009504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	691a      	ldr	r2, [r3, #16]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800868c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	695a      	ldr	r2, [r3, #20]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800869c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2220      	movs	r2, #32
 80086c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08c      	sub	sp, #48	; 0x30
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	4613      	mov	r3, r2
 80086dc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d165      	bne.n	80087b6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <HAL_UART_Transmit_DMA+0x26>
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e05e      	b.n	80087b8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_UART_Transmit_DMA+0x38>
 8008704:	2302      	movs	r3, #2
 8008706:	e057      	b.n	80087b8 <HAL_UART_Transmit_DMA+0xe8>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	88fa      	ldrh	r2, [r7, #6]
 800871a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	88fa      	ldrh	r2, [r7, #6]
 8008720:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2221      	movs	r2, #33	; 0x21
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008734:	4a22      	ldr	r2, [pc, #136]	; (80087c0 <HAL_UART_Transmit_DMA+0xf0>)
 8008736:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873c:	4a21      	ldr	r2, [pc, #132]	; (80087c4 <HAL_UART_Transmit_DMA+0xf4>)
 800873e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008744:	4a20      	ldr	r2, [pc, #128]	; (80087c8 <HAL_UART_Transmit_DMA+0xf8>)
 8008746:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874c:	2200      	movs	r2, #0
 800874e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008750:	f107 0308 	add.w	r3, r7, #8
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	6819      	ldr	r1, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3304      	adds	r3, #4
 8008764:	461a      	mov	r2, r3
 8008766:	88fb      	ldrh	r3, [r7, #6]
 8008768:	f7fd fbcc 	bl	8005f04 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008774:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3314      	adds	r3, #20
 8008784:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	617b      	str	r3, [r7, #20]
   return(result);
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008794:	62bb      	str	r3, [r7, #40]	; 0x28
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3314      	adds	r3, #20
 800879c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800879e:	627a      	str	r2, [r7, #36]	; 0x24
 80087a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	6a39      	ldr	r1, [r7, #32]
 80087a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a6:	e841 2300 	strex	r3, r2, [r1]
 80087aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1e5      	bne.n	800877e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	e000      	b.n	80087b8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80087b6:	2302      	movs	r3, #2
  }
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3730      	adds	r7, #48	; 0x30
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	08008d9d 	.word	0x08008d9d
 80087c4:	08008e37 	.word	0x08008e37
 80087c8:	08008faf 	.word	0x08008faf

080087cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b20      	cmp	r3, #32
 80087e4:	d11d      	bne.n	8008822 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <HAL_UART_Receive_DMA+0x26>
 80087ec:	88fb      	ldrh	r3, [r7, #6]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e016      	b.n	8008824 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d101      	bne.n	8008804 <HAL_UART_Receive_DMA+0x38>
 8008800:	2302      	movs	r3, #2
 8008802:	e00f      	b.n	8008824 <HAL_UART_Receive_DMA+0x58>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008812:	88fb      	ldrh	r3, [r7, #6]
 8008814:	461a      	mov	r2, r3
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fc13 	bl	8009044 <UART_Start_Receive_DMA>
 800881e:	4603      	mov	r3, r0
 8008820:	e000      	b.n	8008824 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008822:	2302      	movs	r3, #2
  }
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b0ba      	sub	sp, #232	; 0xe8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008852:	2300      	movs	r3, #0
 8008854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008858:	2300      	movs	r3, #0
 800885a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800885e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008862:	f003 030f 	and.w	r3, r3, #15
 8008866:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800886a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10f      	bne.n	8008892 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b00      	cmp	r3, #0
 800887c:	d009      	beq.n	8008892 <HAL_UART_IRQHandler+0x66>
 800887e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008882:	f003 0320 	and.w	r3, r3, #32
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fd7f 	bl	800938e <UART_Receive_IT>
      return;
 8008890:	e256      	b.n	8008d40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 80de 	beq.w	8008a58 <HAL_UART_IRQHandler+0x22c>
 800889c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80088a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 80d1 	beq.w	8008a58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80088b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00b      	beq.n	80088da <HAL_UART_IRQHandler+0xae>
 80088c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d005      	beq.n	80088da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	f043 0201 	orr.w	r2, r3, #1
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088de:	f003 0304 	and.w	r3, r3, #4
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00b      	beq.n	80088fe <HAL_UART_IRQHandler+0xd2>
 80088e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d005      	beq.n	80088fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f6:	f043 0202 	orr.w	r2, r3, #2
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00b      	beq.n	8008922 <HAL_UART_IRQHandler+0xf6>
 800890a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d005      	beq.n	8008922 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	f043 0204 	orr.w	r2, r3, #4
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008926:	f003 0308 	and.w	r3, r3, #8
 800892a:	2b00      	cmp	r3, #0
 800892c:	d011      	beq.n	8008952 <HAL_UART_IRQHandler+0x126>
 800892e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d105      	bne.n	8008946 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800893a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894a:	f043 0208 	orr.w	r2, r3, #8
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 81ed 	beq.w	8008d36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800895c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008960:	f003 0320 	and.w	r3, r3, #32
 8008964:	2b00      	cmp	r3, #0
 8008966:	d008      	beq.n	800897a <HAL_UART_IRQHandler+0x14e>
 8008968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800896c:	f003 0320 	and.w	r3, r3, #32
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fd0a 	bl	800938e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008984:	2b40      	cmp	r3, #64	; 0x40
 8008986:	bf0c      	ite	eq
 8008988:	2301      	moveq	r3, #1
 800898a:	2300      	movne	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008996:	f003 0308 	and.w	r3, r3, #8
 800899a:	2b00      	cmp	r3, #0
 800899c:	d103      	bne.n	80089a6 <HAL_UART_IRQHandler+0x17a>
 800899e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d04f      	beq.n	8008a46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fc12 	bl	80091d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b6:	2b40      	cmp	r3, #64	; 0x40
 80089b8:	d141      	bne.n	8008a3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3314      	adds	r3, #20
 80089c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80089d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3314      	adds	r3, #20
 80089e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80089e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80089ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089f6:	e841 2300 	strex	r3, r2, [r1]
 80089fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80089fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1d9      	bne.n	80089ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d013      	beq.n	8008a36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a12:	4a7d      	ldr	r2, [pc, #500]	; (8008c08 <HAL_UART_IRQHandler+0x3dc>)
 8008a14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fd fb3a 	bl	8006094 <HAL_DMA_Abort_IT>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d016      	beq.n	8008a54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a30:	4610      	mov	r0, r2
 8008a32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a34:	e00e      	b.n	8008a54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f99a 	bl	8008d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a3c:	e00a      	b.n	8008a54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f996 	bl	8008d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a44:	e006      	b.n	8008a54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f992 	bl	8008d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008a52:	e170      	b.n	8008d36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a54:	bf00      	nop
    return;
 8008a56:	e16e      	b.n	8008d36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	f040 814a 	bne.w	8008cf6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a66:	f003 0310 	and.w	r3, r3, #16
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 8143 	beq.w	8008cf6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a74:	f003 0310 	and.w	r3, r3, #16
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 813c 	beq.w	8008cf6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a7e:	2300      	movs	r3, #0
 8008a80:	60bb      	str	r3, [r7, #8]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60bb      	str	r3, [r7, #8]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	60bb      	str	r3, [r7, #8]
 8008a92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9e:	2b40      	cmp	r3, #64	; 0x40
 8008aa0:	f040 80b4 	bne.w	8008c0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ab0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 8140 	beq.w	8008d3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	f080 8139 	bcs.w	8008d3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ace:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ada:	f000 8088 	beq.w	8008bee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	330c      	adds	r3, #12
 8008ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008afc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	330c      	adds	r3, #12
 8008b06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008b0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1d9      	bne.n	8008ade <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3314      	adds	r3, #20
 8008b30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b3c:	f023 0301 	bic.w	r3, r3, #1
 8008b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3314      	adds	r3, #20
 8008b4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e1      	bne.n	8008b2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3314      	adds	r3, #20
 8008b6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3314      	adds	r3, #20
 8008b86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1e3      	bne.n	8008b66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	330c      	adds	r3, #12
 8008bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bbe:	f023 0310 	bic.w	r3, r3, #16
 8008bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	330c      	adds	r3, #12
 8008bcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008bd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008bd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bd8:	e841 2300 	strex	r3, r2, [r1]
 8008bdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e3      	bne.n	8008bac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fd f9e3 	bl	8005fb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f8c0 	bl	8008d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c04:	e099      	b.n	8008d3a <HAL_UART_IRQHandler+0x50e>
 8008c06:	bf00      	nop
 8008c08:	08009297 	.word	0x08009297
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 808b 	beq.w	8008d3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 8086 	beq.w	8008d3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	330c      	adds	r3, #12
 8008c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	330c      	adds	r3, #12
 8008c52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008c56:	647a      	str	r2, [r7, #68]	; 0x44
 8008c58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c5e:	e841 2300 	strex	r3, r2, [r1]
 8008c62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1e3      	bne.n	8008c32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3314      	adds	r3, #20
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	623b      	str	r3, [r7, #32]
   return(result);
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	f023 0301 	bic.w	r3, r3, #1
 8008c80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3314      	adds	r3, #20
 8008c8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c8e:	633a      	str	r2, [r7, #48]	; 0x30
 8008c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c96:	e841 2300 	strex	r3, r2, [r1]
 8008c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1e3      	bne.n	8008c6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2220      	movs	r2, #32
 8008ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	330c      	adds	r3, #12
 8008cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	e853 3f00 	ldrex	r3, [r3]
 8008cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0310 	bic.w	r3, r3, #16
 8008cc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	330c      	adds	r3, #12
 8008cd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008cd4:	61fa      	str	r2, [r7, #28]
 8008cd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd8:	69b9      	ldr	r1, [r7, #24]
 8008cda:	69fa      	ldr	r2, [r7, #28]
 8008cdc:	e841 2300 	strex	r3, r2, [r1]
 8008ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1e3      	bne.n	8008cb0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f848 	bl	8008d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cf4:	e023      	b.n	8008d3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d009      	beq.n	8008d16 <HAL_UART_IRQHandler+0x4ea>
 8008d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fad5 	bl	80092be <UART_Transmit_IT>
    return;
 8008d14:	e014      	b.n	8008d40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00e      	beq.n	8008d40 <HAL_UART_IRQHandler+0x514>
 8008d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d008      	beq.n	8008d40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fb15 	bl	800935e <UART_EndTransmit_IT>
    return;
 8008d34:	e004      	b.n	8008d40 <HAL_UART_IRQHandler+0x514>
    return;
 8008d36:	bf00      	nop
 8008d38:	e002      	b.n	8008d40 <HAL_UART_IRQHandler+0x514>
      return;
 8008d3a:	bf00      	nop
 8008d3c:	e000      	b.n	8008d40 <HAL_UART_IRQHandler+0x514>
      return;
 8008d3e:	bf00      	nop
  }
}
 8008d40:	37e8      	adds	r7, #232	; 0xe8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop

08008d48 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b090      	sub	sp, #64	; 0x40
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d137      	bne.n	8008e28 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dba:	2200      	movs	r2, #0
 8008dbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3314      	adds	r3, #20
 8008dc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	623b      	str	r3, [r7, #32]
   return(result);
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3314      	adds	r3, #20
 8008ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dde:	633a      	str	r2, [r7, #48]	; 0x30
 8008de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e5      	bne.n	8008dbe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	330c      	adds	r3, #12
 8008df8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	e853 3f00 	ldrex	r3, [r3]
 8008e00:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34
 8008e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	330c      	adds	r3, #12
 8008e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e12:	61fa      	str	r2, [r7, #28]
 8008e14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	69b9      	ldr	r1, [r7, #24]
 8008e18:	69fa      	ldr	r2, [r7, #28]
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	617b      	str	r3, [r7, #20]
   return(result);
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e5      	bne.n	8008df2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e26:	e002      	b.n	8008e2e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008e28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008e2a:	f7fa ff3d 	bl	8003ca8 <HAL_UART_TxCpltCallback>
}
 8008e2e:	bf00      	nop
 8008e30:	3740      	adds	r7, #64	; 0x40
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f7ff ff7f 	bl	8008d48 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e4a:	bf00      	nop
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b09c      	sub	sp, #112	; 0x70
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d172      	bne.n	8008f54 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e70:	2200      	movs	r2, #0
 8008e72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	330c      	adds	r3, #12
 8008e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e7e:	e853 3f00 	ldrex	r3, [r3]
 8008e82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	330c      	adds	r3, #12
 8008e92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e94:	65ba      	str	r2, [r7, #88]	; 0x58
 8008e96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e9c:	e841 2300 	strex	r3, r2, [r1]
 8008ea0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e5      	bne.n	8008e74 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3314      	adds	r3, #20
 8008eae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eba:	f023 0301 	bic.w	r3, r3, #1
 8008ebe:	667b      	str	r3, [r7, #100]	; 0x64
 8008ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ec8:	647a      	str	r2, [r7, #68]	; 0x44
 8008eca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e5      	bne.n	8008ea8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3314      	adds	r3, #20
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	623b      	str	r3, [r7, #32]
   return(result);
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ef2:	663b      	str	r3, [r7, #96]	; 0x60
 8008ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3314      	adds	r3, #20
 8008efa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008efc:	633a      	str	r2, [r7, #48]	; 0x30
 8008efe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e5      	bne.n	8008edc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f12:	2220      	movs	r2, #32
 8008f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d119      	bne.n	8008f54 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	330c      	adds	r3, #12
 8008f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	e853 3f00 	ldrex	r3, [r3]
 8008f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 0310 	bic.w	r3, r3, #16
 8008f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	330c      	adds	r3, #12
 8008f3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f40:	61fa      	str	r2, [r7, #28]
 8008f42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	69b9      	ldr	r1, [r7, #24]
 8008f46:	69fa      	ldr	r2, [r7, #28]
 8008f48:	e841 2300 	strex	r3, r2, [r1]
 8008f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e5      	bne.n	8008f20 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d106      	bne.n	8008f6a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f60:	4619      	mov	r1, r3
 8008f62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f64:	f7ff ff0e 	bl	8008d84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f68:	e002      	b.n	8008f70 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008f6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f6c:	f7fa feae 	bl	8003ccc <HAL_UART_RxCpltCallback>
}
 8008f70:	bf00      	nop
 8008f72:	3770      	adds	r7, #112	; 0x70
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f84:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d108      	bne.n	8008fa0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f92:	085b      	lsrs	r3, r3, #1
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	4619      	mov	r1, r3
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f7ff fef3 	bl	8008d84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f9e:	e002      	b.n	8008fa6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f7ff fedb 	bl	8008d5c <HAL_UART_RxHalfCpltCallback>
}
 8008fa6:	bf00      	nop
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fca:	2b80      	cmp	r3, #128	; 0x80
 8008fcc:	bf0c      	ite	eq
 8008fce:	2301      	moveq	r3, #1
 8008fd0:	2300      	movne	r3, #0
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b21      	cmp	r3, #33	; 0x21
 8008fe0:	d108      	bne.n	8008ff4 <UART_DMAError+0x46>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d005      	beq.n	8008ff4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2200      	movs	r2, #0
 8008fec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008fee:	68b8      	ldr	r0, [r7, #8]
 8008ff0:	f000 f8c6 	bl	8009180 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffe:	2b40      	cmp	r3, #64	; 0x40
 8009000:	bf0c      	ite	eq
 8009002:	2301      	moveq	r3, #1
 8009004:	2300      	movne	r3, #0
 8009006:	b2db      	uxtb	r3, r3
 8009008:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b22      	cmp	r3, #34	; 0x22
 8009014:	d108      	bne.n	8009028 <UART_DMAError+0x7a>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d005      	beq.n	8009028 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2200      	movs	r2, #0
 8009020:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009022:	68b8      	ldr	r0, [r7, #8]
 8009024:	f000 f8d4 	bl	80091d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902c:	f043 0210 	orr.w	r2, r3, #16
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009034:	68b8      	ldr	r0, [r7, #8]
 8009036:	f7ff fe9b 	bl	8008d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800903a:	bf00      	nop
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b098      	sub	sp, #96	; 0x60
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	4613      	mov	r3, r2
 8009050:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	88fa      	ldrh	r2, [r7, #6]
 800905c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2222      	movs	r2, #34	; 0x22
 8009068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009070:	4a40      	ldr	r2, [pc, #256]	; (8009174 <UART_Start_Receive_DMA+0x130>)
 8009072:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	4a3f      	ldr	r2, [pc, #252]	; (8009178 <UART_Start_Receive_DMA+0x134>)
 800907a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	4a3e      	ldr	r2, [pc, #248]	; (800917c <UART_Start_Receive_DMA+0x138>)
 8009082:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	2200      	movs	r2, #0
 800908a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800908c:	f107 0308 	add.w	r3, r7, #8
 8009090:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3304      	adds	r3, #4
 800909c:	4619      	mov	r1, r3
 800909e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	88fb      	ldrh	r3, [r7, #6]
 80090a4:	f7fc ff2e 	bl	8005f04 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80090a8:	2300      	movs	r3, #0
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	613b      	str	r3, [r7, #16]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	613b      	str	r3, [r7, #16]
 80090bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d019      	beq.n	8009102 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	330c      	adds	r3, #12
 80090d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	330c      	adds	r3, #12
 80090ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 80090f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80090f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80090fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e5      	bne.n	80090ce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3314      	adds	r3, #20
 8009108:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009114:	f043 0301 	orr.w	r3, r3, #1
 8009118:	657b      	str	r3, [r7, #84]	; 0x54
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3314      	adds	r3, #20
 8009120:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009122:	63ba      	str	r2, [r7, #56]	; 0x38
 8009124:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1e5      	bne.n	8009102 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3314      	adds	r3, #20
 800913c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	617b      	str	r3, [r7, #20]
   return(result);
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800914c:	653b      	str	r3, [r7, #80]	; 0x50
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3314      	adds	r3, #20
 8009154:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009156:	627a      	str	r2, [r7, #36]	; 0x24
 8009158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915a:	6a39      	ldr	r1, [r7, #32]
 800915c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915e:	e841 2300 	strex	r3, r2, [r1]
 8009162:	61fb      	str	r3, [r7, #28]
   return(result);
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1e5      	bne.n	8009136 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3760      	adds	r7, #96	; 0x60
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	08008e53 	.word	0x08008e53
 8009178:	08008f79 	.word	0x08008f79
 800917c:	08008faf 	.word	0x08008faf

08009180 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009180:	b480      	push	{r7}
 8009182:	b089      	sub	sp, #36	; 0x24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	330c      	adds	r3, #12
 800918e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	60bb      	str	r3, [r7, #8]
   return(result);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800919e:	61fb      	str	r3, [r7, #28]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	330c      	adds	r3, #12
 80091a6:	69fa      	ldr	r2, [r7, #28]
 80091a8:	61ba      	str	r2, [r7, #24]
 80091aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ac:	6979      	ldr	r1, [r7, #20]
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	e841 2300 	strex	r3, r2, [r1]
 80091b4:	613b      	str	r3, [r7, #16]
   return(result);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e5      	bne.n	8009188 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80091c4:	bf00      	nop
 80091c6:	3724      	adds	r7, #36	; 0x24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b095      	sub	sp, #84	; 0x54
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	330c      	adds	r3, #12
 80091de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e2:	e853 3f00 	ldrex	r3, [r3]
 80091e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	330c      	adds	r3, #12
 80091f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091f8:	643a      	str	r2, [r7, #64]	; 0x40
 80091fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009200:	e841 2300 	strex	r3, r2, [r1]
 8009204:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1e5      	bne.n	80091d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3314      	adds	r3, #20
 8009212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	e853 3f00 	ldrex	r3, [r3]
 800921a:	61fb      	str	r3, [r7, #28]
   return(result);
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	f023 0301 	bic.w	r3, r3, #1
 8009222:	64bb      	str	r3, [r7, #72]	; 0x48
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3314      	adds	r3, #20
 800922a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800922c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800922e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009234:	e841 2300 	strex	r3, r2, [r1]
 8009238:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800923a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1e5      	bne.n	800920c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009244:	2b01      	cmp	r3, #1
 8009246:	d119      	bne.n	800927c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	330c      	adds	r3, #12
 800924e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	e853 3f00 	ldrex	r3, [r3]
 8009256:	60bb      	str	r3, [r7, #8]
   return(result);
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f023 0310 	bic.w	r3, r3, #16
 800925e:	647b      	str	r3, [r7, #68]	; 0x44
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	330c      	adds	r3, #12
 8009266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009268:	61ba      	str	r2, [r7, #24]
 800926a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	6979      	ldr	r1, [r7, #20]
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	e841 2300 	strex	r3, r2, [r1]
 8009274:	613b      	str	r3, [r7, #16]
   return(result);
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e5      	bne.n	8009248 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2220      	movs	r2, #32
 8009280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	631a      	str	r2, [r3, #48]	; 0x30
}
 800928a:	bf00      	nop
 800928c:	3754      	adds	r7, #84	; 0x54
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f7ff fd5d 	bl	8008d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092b6:	bf00      	nop
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092be:	b480      	push	{r7}
 80092c0:	b085      	sub	sp, #20
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b21      	cmp	r3, #33	; 0x21
 80092d0:	d13e      	bne.n	8009350 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092da:	d114      	bne.n	8009306 <UART_Transmit_IT+0x48>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d110      	bne.n	8009306 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	881b      	ldrh	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	1c9a      	adds	r2, r3, #2
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	621a      	str	r2, [r3, #32]
 8009304:	e008      	b.n	8009318 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	1c59      	adds	r1, r3, #1
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	6211      	str	r1, [r2, #32]
 8009310:	781a      	ldrb	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800931c:	b29b      	uxth	r3, r3
 800931e:	3b01      	subs	r3, #1
 8009320:	b29b      	uxth	r3, r3
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	4619      	mov	r1, r3
 8009326:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10f      	bne.n	800934c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800933a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800934a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	e000      	b.n	8009352 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009350:	2302      	movs	r3, #2
  }
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009374:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2220      	movs	r2, #32
 800937a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7fa fc92 	bl	8003ca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b08c      	sub	sp, #48	; 0x30
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b22      	cmp	r3, #34	; 0x22
 80093a0:	f040 80ab 	bne.w	80094fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ac:	d117      	bne.n	80093de <UART_Receive_IT+0x50>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d113      	bne.n	80093de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d6:	1c9a      	adds	r2, r3, #2
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	629a      	str	r2, [r3, #40]	; 0x28
 80093dc:	e026      	b.n	800942c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80093e4:	2300      	movs	r3, #0
 80093e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093f0:	d007      	beq.n	8009402 <UART_Receive_IT+0x74>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10a      	bne.n	8009410 <UART_Receive_IT+0x82>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d106      	bne.n	8009410 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	b2da      	uxtb	r2, r3
 800940a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940c:	701a      	strb	r2, [r3, #0]
 800940e:	e008      	b.n	8009422 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	b2db      	uxtb	r3, r3
 8009418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800941c:	b2da      	uxtb	r2, r3
 800941e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009420:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009430:	b29b      	uxth	r3, r3
 8009432:	3b01      	subs	r3, #1
 8009434:	b29b      	uxth	r3, r3
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	4619      	mov	r1, r3
 800943a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800943c:	2b00      	cmp	r3, #0
 800943e:	d15a      	bne.n	80094f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68da      	ldr	r2, [r3, #12]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f022 0220 	bic.w	r2, r2, #32
 800944e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800945e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	695a      	ldr	r2, [r3, #20]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0201 	bic.w	r2, r2, #1
 800946e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2220      	movs	r2, #32
 8009474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947c:	2b01      	cmp	r3, #1
 800947e:	d135      	bne.n	80094ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	330c      	adds	r3, #12
 800948c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	613b      	str	r3, [r7, #16]
   return(result);
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	f023 0310 	bic.w	r3, r3, #16
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	330c      	adds	r3, #12
 80094a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a6:	623a      	str	r2, [r7, #32]
 80094a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	69f9      	ldr	r1, [r7, #28]
 80094ac:	6a3a      	ldr	r2, [r7, #32]
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e5      	bne.n	8009486 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0310 	and.w	r3, r3, #16
 80094c4:	2b10      	cmp	r3, #16
 80094c6:	d10a      	bne.n	80094de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094c8:	2300      	movs	r3, #0
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	60fb      	str	r3, [r7, #12]
 80094dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff fc4d 	bl	8008d84 <HAL_UARTEx_RxEventCallback>
 80094ea:	e002      	b.n	80094f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7fa fbed 	bl	8003ccc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	e002      	b.n	80094fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	e000      	b.n	80094fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80094fa:	2302      	movs	r3, #2
  }
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3730      	adds	r7, #48	; 0x30
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009508:	b0c0      	sub	sp, #256	; 0x100
 800950a:	af00      	add	r7, sp, #0
 800950c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800951c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009520:	68d9      	ldr	r1, [r3, #12]
 8009522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	ea40 0301 	orr.w	r3, r0, r1
 800952c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800952e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	431a      	orrs	r2, r3
 800953c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	431a      	orrs	r2, r3
 8009544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	4313      	orrs	r3, r2
 800954c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800955c:	f021 010c 	bic.w	r1, r1, #12
 8009560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800956a:	430b      	orrs	r3, r1
 800956c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800956e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800957a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800957e:	6999      	ldr	r1, [r3, #24]
 8009580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	ea40 0301 	orr.w	r3, r0, r1
 800958a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800958c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4b8f      	ldr	r3, [pc, #572]	; (80097d0 <UART_SetConfig+0x2cc>)
 8009594:	429a      	cmp	r2, r3
 8009596:	d005      	beq.n	80095a4 <UART_SetConfig+0xa0>
 8009598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	4b8d      	ldr	r3, [pc, #564]	; (80097d4 <UART_SetConfig+0x2d0>)
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d104      	bne.n	80095ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095a4:	f7fd fea8 	bl	80072f8 <HAL_RCC_GetPCLK2Freq>
 80095a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095ac:	e003      	b.n	80095b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095ae:	f7fd fe8f 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 80095b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ba:	69db      	ldr	r3, [r3, #28]
 80095bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c0:	f040 810c 	bne.w	80097dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095d6:	4622      	mov	r2, r4
 80095d8:	462b      	mov	r3, r5
 80095da:	1891      	adds	r1, r2, r2
 80095dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80095de:	415b      	adcs	r3, r3
 80095e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095e6:	4621      	mov	r1, r4
 80095e8:	eb12 0801 	adds.w	r8, r2, r1
 80095ec:	4629      	mov	r1, r5
 80095ee:	eb43 0901 	adc.w	r9, r3, r1
 80095f2:	f04f 0200 	mov.w	r2, #0
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009606:	4690      	mov	r8, r2
 8009608:	4699      	mov	r9, r3
 800960a:	4623      	mov	r3, r4
 800960c:	eb18 0303 	adds.w	r3, r8, r3
 8009610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009614:	462b      	mov	r3, r5
 8009616:	eb49 0303 	adc.w	r3, r9, r3
 800961a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800961e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800962a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800962e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009632:	460b      	mov	r3, r1
 8009634:	18db      	adds	r3, r3, r3
 8009636:	653b      	str	r3, [r7, #80]	; 0x50
 8009638:	4613      	mov	r3, r2
 800963a:	eb42 0303 	adc.w	r3, r2, r3
 800963e:	657b      	str	r3, [r7, #84]	; 0x54
 8009640:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009644:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009648:	f7f7 fa58 	bl	8000afc <__aeabi_uldivmod>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4b61      	ldr	r3, [pc, #388]	; (80097d8 <UART_SetConfig+0x2d4>)
 8009652:	fba3 2302 	umull	r2, r3, r3, r2
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	011c      	lsls	r4, r3, #4
 800965a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800965e:	2200      	movs	r2, #0
 8009660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009664:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009668:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800966c:	4642      	mov	r2, r8
 800966e:	464b      	mov	r3, r9
 8009670:	1891      	adds	r1, r2, r2
 8009672:	64b9      	str	r1, [r7, #72]	; 0x48
 8009674:	415b      	adcs	r3, r3
 8009676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009678:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800967c:	4641      	mov	r1, r8
 800967e:	eb12 0a01 	adds.w	sl, r2, r1
 8009682:	4649      	mov	r1, r9
 8009684:	eb43 0b01 	adc.w	fp, r3, r1
 8009688:	f04f 0200 	mov.w	r2, #0
 800968c:	f04f 0300 	mov.w	r3, #0
 8009690:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009694:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800969c:	4692      	mov	sl, r2
 800969e:	469b      	mov	fp, r3
 80096a0:	4643      	mov	r3, r8
 80096a2:	eb1a 0303 	adds.w	r3, sl, r3
 80096a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096aa:	464b      	mov	r3, r9
 80096ac:	eb4b 0303 	adc.w	r3, fp, r3
 80096b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096c8:	460b      	mov	r3, r1
 80096ca:	18db      	adds	r3, r3, r3
 80096cc:	643b      	str	r3, [r7, #64]	; 0x40
 80096ce:	4613      	mov	r3, r2
 80096d0:	eb42 0303 	adc.w	r3, r2, r3
 80096d4:	647b      	str	r3, [r7, #68]	; 0x44
 80096d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096de:	f7f7 fa0d 	bl	8000afc <__aeabi_uldivmod>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4611      	mov	r1, r2
 80096e8:	4b3b      	ldr	r3, [pc, #236]	; (80097d8 <UART_SetConfig+0x2d4>)
 80096ea:	fba3 2301 	umull	r2, r3, r3, r1
 80096ee:	095b      	lsrs	r3, r3, #5
 80096f0:	2264      	movs	r2, #100	; 0x64
 80096f2:	fb02 f303 	mul.w	r3, r2, r3
 80096f6:	1acb      	subs	r3, r1, r3
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80096fe:	4b36      	ldr	r3, [pc, #216]	; (80097d8 <UART_SetConfig+0x2d4>)
 8009700:	fba3 2302 	umull	r2, r3, r3, r2
 8009704:	095b      	lsrs	r3, r3, #5
 8009706:	005b      	lsls	r3, r3, #1
 8009708:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800970c:	441c      	add	r4, r3
 800970e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009712:	2200      	movs	r2, #0
 8009714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009718:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800971c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009720:	4642      	mov	r2, r8
 8009722:	464b      	mov	r3, r9
 8009724:	1891      	adds	r1, r2, r2
 8009726:	63b9      	str	r1, [r7, #56]	; 0x38
 8009728:	415b      	adcs	r3, r3
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800972c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009730:	4641      	mov	r1, r8
 8009732:	1851      	adds	r1, r2, r1
 8009734:	6339      	str	r1, [r7, #48]	; 0x30
 8009736:	4649      	mov	r1, r9
 8009738:	414b      	adcs	r3, r1
 800973a:	637b      	str	r3, [r7, #52]	; 0x34
 800973c:	f04f 0200 	mov.w	r2, #0
 8009740:	f04f 0300 	mov.w	r3, #0
 8009744:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009748:	4659      	mov	r1, fp
 800974a:	00cb      	lsls	r3, r1, #3
 800974c:	4651      	mov	r1, sl
 800974e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009752:	4651      	mov	r1, sl
 8009754:	00ca      	lsls	r2, r1, #3
 8009756:	4610      	mov	r0, r2
 8009758:	4619      	mov	r1, r3
 800975a:	4603      	mov	r3, r0
 800975c:	4642      	mov	r2, r8
 800975e:	189b      	adds	r3, r3, r2
 8009760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009764:	464b      	mov	r3, r9
 8009766:	460a      	mov	r2, r1
 8009768:	eb42 0303 	adc.w	r3, r2, r3
 800976c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800977c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009784:	460b      	mov	r3, r1
 8009786:	18db      	adds	r3, r3, r3
 8009788:	62bb      	str	r3, [r7, #40]	; 0x28
 800978a:	4613      	mov	r3, r2
 800978c:	eb42 0303 	adc.w	r3, r2, r3
 8009790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009796:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800979a:	f7f7 f9af 	bl	8000afc <__aeabi_uldivmod>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4b0d      	ldr	r3, [pc, #52]	; (80097d8 <UART_SetConfig+0x2d4>)
 80097a4:	fba3 1302 	umull	r1, r3, r3, r2
 80097a8:	095b      	lsrs	r3, r3, #5
 80097aa:	2164      	movs	r1, #100	; 0x64
 80097ac:	fb01 f303 	mul.w	r3, r1, r3
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	3332      	adds	r3, #50	; 0x32
 80097b6:	4a08      	ldr	r2, [pc, #32]	; (80097d8 <UART_SetConfig+0x2d4>)
 80097b8:	fba2 2303 	umull	r2, r3, r2, r3
 80097bc:	095b      	lsrs	r3, r3, #5
 80097be:	f003 0207 	and.w	r2, r3, #7
 80097c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4422      	add	r2, r4
 80097ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097cc:	e105      	b.n	80099da <UART_SetConfig+0x4d6>
 80097ce:	bf00      	nop
 80097d0:	40011000 	.word	0x40011000
 80097d4:	40011400 	.word	0x40011400
 80097d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097e0:	2200      	movs	r2, #0
 80097e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097ee:	4642      	mov	r2, r8
 80097f0:	464b      	mov	r3, r9
 80097f2:	1891      	adds	r1, r2, r2
 80097f4:	6239      	str	r1, [r7, #32]
 80097f6:	415b      	adcs	r3, r3
 80097f8:	627b      	str	r3, [r7, #36]	; 0x24
 80097fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097fe:	4641      	mov	r1, r8
 8009800:	1854      	adds	r4, r2, r1
 8009802:	4649      	mov	r1, r9
 8009804:	eb43 0501 	adc.w	r5, r3, r1
 8009808:	f04f 0200 	mov.w	r2, #0
 800980c:	f04f 0300 	mov.w	r3, #0
 8009810:	00eb      	lsls	r3, r5, #3
 8009812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009816:	00e2      	lsls	r2, r4, #3
 8009818:	4614      	mov	r4, r2
 800981a:	461d      	mov	r5, r3
 800981c:	4643      	mov	r3, r8
 800981e:	18e3      	adds	r3, r4, r3
 8009820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009824:	464b      	mov	r3, r9
 8009826:	eb45 0303 	adc.w	r3, r5, r3
 800982a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800982e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800983a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800983e:	f04f 0200 	mov.w	r2, #0
 8009842:	f04f 0300 	mov.w	r3, #0
 8009846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800984a:	4629      	mov	r1, r5
 800984c:	008b      	lsls	r3, r1, #2
 800984e:	4621      	mov	r1, r4
 8009850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009854:	4621      	mov	r1, r4
 8009856:	008a      	lsls	r2, r1, #2
 8009858:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800985c:	f7f7 f94e 	bl	8000afc <__aeabi_uldivmod>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4b60      	ldr	r3, [pc, #384]	; (80099e8 <UART_SetConfig+0x4e4>)
 8009866:	fba3 2302 	umull	r2, r3, r3, r2
 800986a:	095b      	lsrs	r3, r3, #5
 800986c:	011c      	lsls	r4, r3, #4
 800986e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009872:	2200      	movs	r2, #0
 8009874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009878:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800987c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009880:	4642      	mov	r2, r8
 8009882:	464b      	mov	r3, r9
 8009884:	1891      	adds	r1, r2, r2
 8009886:	61b9      	str	r1, [r7, #24]
 8009888:	415b      	adcs	r3, r3
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009890:	4641      	mov	r1, r8
 8009892:	1851      	adds	r1, r2, r1
 8009894:	6139      	str	r1, [r7, #16]
 8009896:	4649      	mov	r1, r9
 8009898:	414b      	adcs	r3, r1
 800989a:	617b      	str	r3, [r7, #20]
 800989c:	f04f 0200 	mov.w	r2, #0
 80098a0:	f04f 0300 	mov.w	r3, #0
 80098a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098a8:	4659      	mov	r1, fp
 80098aa:	00cb      	lsls	r3, r1, #3
 80098ac:	4651      	mov	r1, sl
 80098ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098b2:	4651      	mov	r1, sl
 80098b4:	00ca      	lsls	r2, r1, #3
 80098b6:	4610      	mov	r0, r2
 80098b8:	4619      	mov	r1, r3
 80098ba:	4603      	mov	r3, r0
 80098bc:	4642      	mov	r2, r8
 80098be:	189b      	adds	r3, r3, r2
 80098c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098c4:	464b      	mov	r3, r9
 80098c6:	460a      	mov	r2, r1
 80098c8:	eb42 0303 	adc.w	r3, r2, r3
 80098cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80098da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098dc:	f04f 0200 	mov.w	r2, #0
 80098e0:	f04f 0300 	mov.w	r3, #0
 80098e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098e8:	4649      	mov	r1, r9
 80098ea:	008b      	lsls	r3, r1, #2
 80098ec:	4641      	mov	r1, r8
 80098ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098f2:	4641      	mov	r1, r8
 80098f4:	008a      	lsls	r2, r1, #2
 80098f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80098fa:	f7f7 f8ff 	bl	8000afc <__aeabi_uldivmod>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	4b39      	ldr	r3, [pc, #228]	; (80099e8 <UART_SetConfig+0x4e4>)
 8009904:	fba3 1302 	umull	r1, r3, r3, r2
 8009908:	095b      	lsrs	r3, r3, #5
 800990a:	2164      	movs	r1, #100	; 0x64
 800990c:	fb01 f303 	mul.w	r3, r1, r3
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	011b      	lsls	r3, r3, #4
 8009914:	3332      	adds	r3, #50	; 0x32
 8009916:	4a34      	ldr	r2, [pc, #208]	; (80099e8 <UART_SetConfig+0x4e4>)
 8009918:	fba2 2303 	umull	r2, r3, r2, r3
 800991c:	095b      	lsrs	r3, r3, #5
 800991e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009922:	441c      	add	r4, r3
 8009924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009928:	2200      	movs	r2, #0
 800992a:	673b      	str	r3, [r7, #112]	; 0x70
 800992c:	677a      	str	r2, [r7, #116]	; 0x74
 800992e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009932:	4642      	mov	r2, r8
 8009934:	464b      	mov	r3, r9
 8009936:	1891      	adds	r1, r2, r2
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	415b      	adcs	r3, r3
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009942:	4641      	mov	r1, r8
 8009944:	1851      	adds	r1, r2, r1
 8009946:	6039      	str	r1, [r7, #0]
 8009948:	4649      	mov	r1, r9
 800994a:	414b      	adcs	r3, r1
 800994c:	607b      	str	r3, [r7, #4]
 800994e:	f04f 0200 	mov.w	r2, #0
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800995a:	4659      	mov	r1, fp
 800995c:	00cb      	lsls	r3, r1, #3
 800995e:	4651      	mov	r1, sl
 8009960:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009964:	4651      	mov	r1, sl
 8009966:	00ca      	lsls	r2, r1, #3
 8009968:	4610      	mov	r0, r2
 800996a:	4619      	mov	r1, r3
 800996c:	4603      	mov	r3, r0
 800996e:	4642      	mov	r2, r8
 8009970:	189b      	adds	r3, r3, r2
 8009972:	66bb      	str	r3, [r7, #104]	; 0x68
 8009974:	464b      	mov	r3, r9
 8009976:	460a      	mov	r2, r1
 8009978:	eb42 0303 	adc.w	r3, r2, r3
 800997c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800997e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	663b      	str	r3, [r7, #96]	; 0x60
 8009988:	667a      	str	r2, [r7, #100]	; 0x64
 800998a:	f04f 0200 	mov.w	r2, #0
 800998e:	f04f 0300 	mov.w	r3, #0
 8009992:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009996:	4649      	mov	r1, r9
 8009998:	008b      	lsls	r3, r1, #2
 800999a:	4641      	mov	r1, r8
 800999c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099a0:	4641      	mov	r1, r8
 80099a2:	008a      	lsls	r2, r1, #2
 80099a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80099a8:	f7f7 f8a8 	bl	8000afc <__aeabi_uldivmod>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	4b0d      	ldr	r3, [pc, #52]	; (80099e8 <UART_SetConfig+0x4e4>)
 80099b2:	fba3 1302 	umull	r1, r3, r3, r2
 80099b6:	095b      	lsrs	r3, r3, #5
 80099b8:	2164      	movs	r1, #100	; 0x64
 80099ba:	fb01 f303 	mul.w	r3, r1, r3
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	3332      	adds	r3, #50	; 0x32
 80099c4:	4a08      	ldr	r2, [pc, #32]	; (80099e8 <UART_SetConfig+0x4e4>)
 80099c6:	fba2 2303 	umull	r2, r3, r2, r3
 80099ca:	095b      	lsrs	r3, r3, #5
 80099cc:	f003 020f 	and.w	r2, r3, #15
 80099d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4422      	add	r2, r4
 80099d8:	609a      	str	r2, [r3, #8]
}
 80099da:	bf00      	nop
 80099dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099e0:	46bd      	mov	sp, r7
 80099e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099e6:	bf00      	nop
 80099e8:	51eb851f 	.word	0x51eb851f

080099ec <__cxa_pure_virtual>:
 80099ec:	b508      	push	{r3, lr}
 80099ee:	f000 f80d 	bl	8009a0c <_ZSt9terminatev>

080099f2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80099f2:	b508      	push	{r3, lr}
 80099f4:	4780      	blx	r0
 80099f6:	f000 fa14 	bl	8009e22 <abort>
	...

080099fc <_ZSt13get_terminatev>:
 80099fc:	4b02      	ldr	r3, [pc, #8]	; (8009a08 <_ZSt13get_terminatev+0xc>)
 80099fe:	6818      	ldr	r0, [r3, #0]
 8009a00:	f3bf 8f5b 	dmb	ish
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	2000000c 	.word	0x2000000c

08009a0c <_ZSt9terminatev>:
 8009a0c:	b508      	push	{r3, lr}
 8009a0e:	f7ff fff5 	bl	80099fc <_ZSt13get_terminatev>
 8009a12:	f7ff ffee 	bl	80099f2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08009a18 <exp>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	ed2d 8b02 	vpush	{d8}
 8009a1e:	ec55 4b10 	vmov	r4, r5, d0
 8009a22:	f000 f841 	bl	8009aa8 <__ieee754_exp>
 8009a26:	eeb0 8a40 	vmov.f32	s16, s0
 8009a2a:	eef0 8a60 	vmov.f32	s17, s1
 8009a2e:	ec45 4b10 	vmov	d0, r4, r5
 8009a32:	f000 f9eb 	bl	8009e0c <finite>
 8009a36:	b168      	cbz	r0, 8009a54 <exp+0x3c>
 8009a38:	a317      	add	r3, pc, #92	; (adr r3, 8009a98 <exp+0x80>)
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	4620      	mov	r0, r4
 8009a40:	4629      	mov	r1, r5
 8009a42:	f7f7 f829 	bl	8000a98 <__aeabi_dcmpgt>
 8009a46:	b160      	cbz	r0, 8009a62 <exp+0x4a>
 8009a48:	f000 f9f2 	bl	8009e30 <__errno>
 8009a4c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8009a88 <exp+0x70>
 8009a50:	2322      	movs	r3, #34	; 0x22
 8009a52:	6003      	str	r3, [r0, #0]
 8009a54:	eeb0 0a48 	vmov.f32	s0, s16
 8009a58:	eef0 0a68 	vmov.f32	s1, s17
 8009a5c:	ecbd 8b02 	vpop	{d8}
 8009a60:	bd38      	pop	{r3, r4, r5, pc}
 8009a62:	a30f      	add	r3, pc, #60	; (adr r3, 8009aa0 <exp+0x88>)
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	4620      	mov	r0, r4
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f7f6 fff6 	bl	8000a5c <__aeabi_dcmplt>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d0ef      	beq.n	8009a54 <exp+0x3c>
 8009a74:	f000 f9dc 	bl	8009e30 <__errno>
 8009a78:	2322      	movs	r3, #34	; 0x22
 8009a7a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8009a90 <exp+0x78>
 8009a7e:	6003      	str	r3, [r0, #0]
 8009a80:	e7e8      	b.n	8009a54 <exp+0x3c>
 8009a82:	bf00      	nop
 8009a84:	f3af 8000 	nop.w
 8009a88:	00000000 	.word	0x00000000
 8009a8c:	7ff00000 	.word	0x7ff00000
	...
 8009a98:	fefa39ef 	.word	0xfefa39ef
 8009a9c:	40862e42 	.word	0x40862e42
 8009aa0:	d52d3051 	.word	0xd52d3051
 8009aa4:	c0874910 	.word	0xc0874910

08009aa8 <__ieee754_exp>:
 8009aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aac:	ec55 4b10 	vmov	r4, r5, d0
 8009ab0:	49b5      	ldr	r1, [pc, #724]	; (8009d88 <__ieee754_exp+0x2e0>)
 8009ab2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009ab6:	428b      	cmp	r3, r1
 8009ab8:	ed2d 8b04 	vpush	{d8-d9}
 8009abc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8009ac0:	d93d      	bls.n	8009b3e <__ieee754_exp+0x96>
 8009ac2:	49b2      	ldr	r1, [pc, #712]	; (8009d8c <__ieee754_exp+0x2e4>)
 8009ac4:	428b      	cmp	r3, r1
 8009ac6:	d918      	bls.n	8009afa <__ieee754_exp+0x52>
 8009ac8:	ee10 3a10 	vmov	r3, s0
 8009acc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	d009      	beq.n	8009ae8 <__ieee754_exp+0x40>
 8009ad4:	ee10 2a10 	vmov	r2, s0
 8009ad8:	462b      	mov	r3, r5
 8009ada:	4620      	mov	r0, r4
 8009adc:	4629      	mov	r1, r5
 8009ade:	f7f6 fb95 	bl	800020c <__adddf3>
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	460d      	mov	r5, r1
 8009ae6:	e002      	b.n	8009aee <__ieee754_exp+0x46>
 8009ae8:	b10e      	cbz	r6, 8009aee <__ieee754_exp+0x46>
 8009aea:	2400      	movs	r4, #0
 8009aec:	2500      	movs	r5, #0
 8009aee:	ecbd 8b04 	vpop	{d8-d9}
 8009af2:	ec45 4b10 	vmov	d0, r4, r5
 8009af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afa:	a38d      	add	r3, pc, #564	; (adr r3, 8009d30 <__ieee754_exp+0x288>)
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	ee10 0a10 	vmov	r0, s0
 8009b04:	4629      	mov	r1, r5
 8009b06:	f7f6 ffc7 	bl	8000a98 <__aeabi_dcmpgt>
 8009b0a:	4607      	mov	r7, r0
 8009b0c:	b130      	cbz	r0, 8009b1c <__ieee754_exp+0x74>
 8009b0e:	ecbd 8b04 	vpop	{d8-d9}
 8009b12:	2000      	movs	r0, #0
 8009b14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b18:	f000 b96f 	b.w	8009dfa <__math_oflow>
 8009b1c:	a386      	add	r3, pc, #536	; (adr r3, 8009d38 <__ieee754_exp+0x290>)
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	4620      	mov	r0, r4
 8009b24:	4629      	mov	r1, r5
 8009b26:	f7f6 ff99 	bl	8000a5c <__aeabi_dcmplt>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	f000 808b 	beq.w	8009c46 <__ieee754_exp+0x19e>
 8009b30:	ecbd 8b04 	vpop	{d8-d9}
 8009b34:	4638      	mov	r0, r7
 8009b36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b3a:	f000 b955 	b.w	8009de8 <__math_uflow>
 8009b3e:	4a94      	ldr	r2, [pc, #592]	; (8009d90 <__ieee754_exp+0x2e8>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	f240 80ac 	bls.w	8009c9e <__ieee754_exp+0x1f6>
 8009b46:	4a93      	ldr	r2, [pc, #588]	; (8009d94 <__ieee754_exp+0x2ec>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d87c      	bhi.n	8009c46 <__ieee754_exp+0x19e>
 8009b4c:	4b92      	ldr	r3, [pc, #584]	; (8009d98 <__ieee754_exp+0x2f0>)
 8009b4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	ee10 0a10 	vmov	r0, s0
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	f7f6 fb54 	bl	8000208 <__aeabi_dsub>
 8009b60:	4b8e      	ldr	r3, [pc, #568]	; (8009d9c <__ieee754_exp+0x2f4>)
 8009b62:	00f7      	lsls	r7, r6, #3
 8009b64:	443b      	add	r3, r7
 8009b66:	ed93 7b00 	vldr	d7, [r3]
 8009b6a:	f1c6 0a01 	rsb	sl, r6, #1
 8009b6e:	4680      	mov	r8, r0
 8009b70:	4689      	mov	r9, r1
 8009b72:	ebaa 0a06 	sub.w	sl, sl, r6
 8009b76:	eeb0 8a47 	vmov.f32	s16, s14
 8009b7a:	eef0 8a67 	vmov.f32	s17, s15
 8009b7e:	ec53 2b18 	vmov	r2, r3, d8
 8009b82:	4640      	mov	r0, r8
 8009b84:	4649      	mov	r1, r9
 8009b86:	f7f6 fb3f 	bl	8000208 <__aeabi_dsub>
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	460d      	mov	r5, r1
 8009b8e:	4622      	mov	r2, r4
 8009b90:	462b      	mov	r3, r5
 8009b92:	4620      	mov	r0, r4
 8009b94:	4629      	mov	r1, r5
 8009b96:	f7f6 fcef 	bl	8000578 <__aeabi_dmul>
 8009b9a:	a369      	add	r3, pc, #420	; (adr r3, 8009d40 <__ieee754_exp+0x298>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	460f      	mov	r7, r1
 8009ba4:	f7f6 fce8 	bl	8000578 <__aeabi_dmul>
 8009ba8:	a367      	add	r3, pc, #412	; (adr r3, 8009d48 <__ieee754_exp+0x2a0>)
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	f7f6 fb2b 	bl	8000208 <__aeabi_dsub>
 8009bb2:	4632      	mov	r2, r6
 8009bb4:	463b      	mov	r3, r7
 8009bb6:	f7f6 fcdf 	bl	8000578 <__aeabi_dmul>
 8009bba:	a365      	add	r3, pc, #404	; (adr r3, 8009d50 <__ieee754_exp+0x2a8>)
 8009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc0:	f7f6 fb24 	bl	800020c <__adddf3>
 8009bc4:	4632      	mov	r2, r6
 8009bc6:	463b      	mov	r3, r7
 8009bc8:	f7f6 fcd6 	bl	8000578 <__aeabi_dmul>
 8009bcc:	a362      	add	r3, pc, #392	; (adr r3, 8009d58 <__ieee754_exp+0x2b0>)
 8009bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd2:	f7f6 fb19 	bl	8000208 <__aeabi_dsub>
 8009bd6:	4632      	mov	r2, r6
 8009bd8:	463b      	mov	r3, r7
 8009bda:	f7f6 fccd 	bl	8000578 <__aeabi_dmul>
 8009bde:	a360      	add	r3, pc, #384	; (adr r3, 8009d60 <__ieee754_exp+0x2b8>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	f7f6 fb12 	bl	800020c <__adddf3>
 8009be8:	4632      	mov	r2, r6
 8009bea:	463b      	mov	r3, r7
 8009bec:	f7f6 fcc4 	bl	8000578 <__aeabi_dmul>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	f7f6 fb06 	bl	8000208 <__aeabi_dsub>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	4606      	mov	r6, r0
 8009c02:	460f      	mov	r7, r1
 8009c04:	4620      	mov	r0, r4
 8009c06:	4629      	mov	r1, r5
 8009c08:	f7f6 fcb6 	bl	8000578 <__aeabi_dmul>
 8009c0c:	ec41 0b19 	vmov	d9, r0, r1
 8009c10:	f1ba 0f00 	cmp.w	sl, #0
 8009c14:	d15d      	bne.n	8009cd2 <__ieee754_exp+0x22a>
 8009c16:	2200      	movs	r2, #0
 8009c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	4639      	mov	r1, r7
 8009c20:	f7f6 faf2 	bl	8000208 <__aeabi_dsub>
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	ec51 0b19 	vmov	r0, r1, d9
 8009c2c:	f7f6 fdce 	bl	80007cc <__aeabi_ddiv>
 8009c30:	4622      	mov	r2, r4
 8009c32:	462b      	mov	r3, r5
 8009c34:	f7f6 fae8 	bl	8000208 <__aeabi_dsub>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	4958      	ldr	r1, [pc, #352]	; (8009da0 <__ieee754_exp+0x2f8>)
 8009c40:	f7f6 fae2 	bl	8000208 <__aeabi_dsub>
 8009c44:	e74d      	b.n	8009ae2 <__ieee754_exp+0x3a>
 8009c46:	4857      	ldr	r0, [pc, #348]	; (8009da4 <__ieee754_exp+0x2fc>)
 8009c48:	a347      	add	r3, pc, #284	; (adr r3, 8009d68 <__ieee754_exp+0x2c0>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8009c52:	4629      	mov	r1, r5
 8009c54:	4620      	mov	r0, r4
 8009c56:	f7f6 fc8f 	bl	8000578 <__aeabi_dmul>
 8009c5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c5e:	f7f6 fad5 	bl	800020c <__adddf3>
 8009c62:	f7f6 ff23 	bl	8000aac <__aeabi_d2iz>
 8009c66:	4682      	mov	sl, r0
 8009c68:	f7f6 fc1c 	bl	80004a4 <__aeabi_i2d>
 8009c6c:	a340      	add	r3, pc, #256	; (adr r3, 8009d70 <__ieee754_exp+0x2c8>)
 8009c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c72:	4606      	mov	r6, r0
 8009c74:	460f      	mov	r7, r1
 8009c76:	f7f6 fc7f 	bl	8000578 <__aeabi_dmul>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4620      	mov	r0, r4
 8009c80:	4629      	mov	r1, r5
 8009c82:	f7f6 fac1 	bl	8000208 <__aeabi_dsub>
 8009c86:	a33c      	add	r3, pc, #240	; (adr r3, 8009d78 <__ieee754_exp+0x2d0>)
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	4689      	mov	r9, r1
 8009c90:	4630      	mov	r0, r6
 8009c92:	4639      	mov	r1, r7
 8009c94:	f7f6 fc70 	bl	8000578 <__aeabi_dmul>
 8009c98:	ec41 0b18 	vmov	d8, r0, r1
 8009c9c:	e76f      	b.n	8009b7e <__ieee754_exp+0xd6>
 8009c9e:	4a42      	ldr	r2, [pc, #264]	; (8009da8 <__ieee754_exp+0x300>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d811      	bhi.n	8009cc8 <__ieee754_exp+0x220>
 8009ca4:	a336      	add	r3, pc, #216	; (adr r3, 8009d80 <__ieee754_exp+0x2d8>)
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	ee10 0a10 	vmov	r0, s0
 8009cae:	4629      	mov	r1, r5
 8009cb0:	f7f6 faac 	bl	800020c <__adddf3>
 8009cb4:	4b3a      	ldr	r3, [pc, #232]	; (8009da0 <__ieee754_exp+0x2f8>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f7f6 feee 	bl	8000a98 <__aeabi_dcmpgt>
 8009cbc:	b138      	cbz	r0, 8009cce <__ieee754_exp+0x226>
 8009cbe:	4b38      	ldr	r3, [pc, #224]	; (8009da0 <__ieee754_exp+0x2f8>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	e70a      	b.n	8009ade <__ieee754_exp+0x36>
 8009cc8:	f04f 0a00 	mov.w	sl, #0
 8009ccc:	e75f      	b.n	8009b8e <__ieee754_exp+0xe6>
 8009cce:	4682      	mov	sl, r0
 8009cd0:	e75d      	b.n	8009b8e <__ieee754_exp+0xe6>
 8009cd2:	4632      	mov	r2, r6
 8009cd4:	463b      	mov	r3, r7
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009cdc:	f7f6 fa94 	bl	8000208 <__aeabi_dsub>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	ec51 0b19 	vmov	r0, r1, d9
 8009ce8:	f7f6 fd70 	bl	80007cc <__aeabi_ddiv>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	ec51 0b18 	vmov	r0, r1, d8
 8009cf4:	f7f6 fa88 	bl	8000208 <__aeabi_dsub>
 8009cf8:	4642      	mov	r2, r8
 8009cfa:	464b      	mov	r3, r9
 8009cfc:	f7f6 fa84 	bl	8000208 <__aeabi_dsub>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	2000      	movs	r0, #0
 8009d06:	4926      	ldr	r1, [pc, #152]	; (8009da0 <__ieee754_exp+0x2f8>)
 8009d08:	f7f6 fa7e 	bl	8000208 <__aeabi_dsub>
 8009d0c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8009d10:	4592      	cmp	sl, r2
 8009d12:	db02      	blt.n	8009d1a <__ieee754_exp+0x272>
 8009d14:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009d18:	e6e3      	b.n	8009ae2 <__ieee754_exp+0x3a>
 8009d1a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8009d1e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009d22:	2200      	movs	r2, #0
 8009d24:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8009d28:	f7f6 fc26 	bl	8000578 <__aeabi_dmul>
 8009d2c:	e6d9      	b.n	8009ae2 <__ieee754_exp+0x3a>
 8009d2e:	bf00      	nop
 8009d30:	fefa39ef 	.word	0xfefa39ef
 8009d34:	40862e42 	.word	0x40862e42
 8009d38:	d52d3051 	.word	0xd52d3051
 8009d3c:	c0874910 	.word	0xc0874910
 8009d40:	72bea4d0 	.word	0x72bea4d0
 8009d44:	3e663769 	.word	0x3e663769
 8009d48:	c5d26bf1 	.word	0xc5d26bf1
 8009d4c:	3ebbbd41 	.word	0x3ebbbd41
 8009d50:	af25de2c 	.word	0xaf25de2c
 8009d54:	3f11566a 	.word	0x3f11566a
 8009d58:	16bebd93 	.word	0x16bebd93
 8009d5c:	3f66c16c 	.word	0x3f66c16c
 8009d60:	5555553e 	.word	0x5555553e
 8009d64:	3fc55555 	.word	0x3fc55555
 8009d68:	652b82fe 	.word	0x652b82fe
 8009d6c:	3ff71547 	.word	0x3ff71547
 8009d70:	fee00000 	.word	0xfee00000
 8009d74:	3fe62e42 	.word	0x3fe62e42
 8009d78:	35793c76 	.word	0x35793c76
 8009d7c:	3dea39ef 	.word	0x3dea39ef
 8009d80:	8800759c 	.word	0x8800759c
 8009d84:	7e37e43c 	.word	0x7e37e43c
 8009d88:	40862e41 	.word	0x40862e41
 8009d8c:	7fefffff 	.word	0x7fefffff
 8009d90:	3fd62e42 	.word	0x3fd62e42
 8009d94:	3ff0a2b1 	.word	0x3ff0a2b1
 8009d98:	0800a4b8 	.word	0x0800a4b8
 8009d9c:	0800a4c8 	.word	0x0800a4c8
 8009da0:	3ff00000 	.word	0x3ff00000
 8009da4:	0800a4a8 	.word	0x0800a4a8
 8009da8:	3defffff 	.word	0x3defffff

08009dac <with_errno>:
 8009dac:	b570      	push	{r4, r5, r6, lr}
 8009dae:	4604      	mov	r4, r0
 8009db0:	460d      	mov	r5, r1
 8009db2:	4616      	mov	r6, r2
 8009db4:	f000 f83c 	bl	8009e30 <__errno>
 8009db8:	4629      	mov	r1, r5
 8009dba:	6006      	str	r6, [r0, #0]
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	bd70      	pop	{r4, r5, r6, pc}

08009dc0 <xflow>:
 8009dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dc2:	4614      	mov	r4, r2
 8009dc4:	461d      	mov	r5, r3
 8009dc6:	b108      	cbz	r0, 8009dcc <xflow+0xc>
 8009dc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009dcc:	e9cd 2300 	strd	r2, r3, [sp]
 8009dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f7f6 fbce 	bl	8000578 <__aeabi_dmul>
 8009ddc:	2222      	movs	r2, #34	; 0x22
 8009dde:	b003      	add	sp, #12
 8009de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009de4:	f7ff bfe2 	b.w	8009dac <with_errno>

08009de8 <__math_uflow>:
 8009de8:	b508      	push	{r3, lr}
 8009dea:	2200      	movs	r2, #0
 8009dec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009df0:	f7ff ffe6 	bl	8009dc0 <xflow>
 8009df4:	ec41 0b10 	vmov	d0, r0, r1
 8009df8:	bd08      	pop	{r3, pc}

08009dfa <__math_oflow>:
 8009dfa:	b508      	push	{r3, lr}
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009e02:	f7ff ffdd 	bl	8009dc0 <xflow>
 8009e06:	ec41 0b10 	vmov	d0, r0, r1
 8009e0a:	bd08      	pop	{r3, pc}

08009e0c <finite>:
 8009e0c:	b082      	sub	sp, #8
 8009e0e:	ed8d 0b00 	vstr	d0, [sp]
 8009e12:	9801      	ldr	r0, [sp, #4]
 8009e14:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009e18:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009e1c:	0fc0      	lsrs	r0, r0, #31
 8009e1e:	b002      	add	sp, #8
 8009e20:	4770      	bx	lr

08009e22 <abort>:
 8009e22:	b508      	push	{r3, lr}
 8009e24:	2006      	movs	r0, #6
 8009e26:	f000 f873 	bl	8009f10 <raise>
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	f7fa fe78 	bl	8004b20 <_exit>

08009e30 <__errno>:
 8009e30:	4b01      	ldr	r3, [pc, #4]	; (8009e38 <__errno+0x8>)
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	20000010 	.word	0x20000010

08009e3c <__libc_init_array>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	4d0d      	ldr	r5, [pc, #52]	; (8009e74 <__libc_init_array+0x38>)
 8009e40:	4c0d      	ldr	r4, [pc, #52]	; (8009e78 <__libc_init_array+0x3c>)
 8009e42:	1b64      	subs	r4, r4, r5
 8009e44:	10a4      	asrs	r4, r4, #2
 8009e46:	2600      	movs	r6, #0
 8009e48:	42a6      	cmp	r6, r4
 8009e4a:	d109      	bne.n	8009e60 <__libc_init_array+0x24>
 8009e4c:	4d0b      	ldr	r5, [pc, #44]	; (8009e7c <__libc_init_array+0x40>)
 8009e4e:	4c0c      	ldr	r4, [pc, #48]	; (8009e80 <__libc_init_array+0x44>)
 8009e50:	f000 f9b0 	bl	800a1b4 <_init>
 8009e54:	1b64      	subs	r4, r4, r5
 8009e56:	10a4      	asrs	r4, r4, #2
 8009e58:	2600      	movs	r6, #0
 8009e5a:	42a6      	cmp	r6, r4
 8009e5c:	d105      	bne.n	8009e6a <__libc_init_array+0x2e>
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e64:	4798      	blx	r3
 8009e66:	3601      	adds	r6, #1
 8009e68:	e7ee      	b.n	8009e48 <__libc_init_array+0xc>
 8009e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e6e:	4798      	blx	r3
 8009e70:	3601      	adds	r6, #1
 8009e72:	e7f2      	b.n	8009e5a <__libc_init_array+0x1e>
 8009e74:	0800a4e0 	.word	0x0800a4e0
 8009e78:	0800a4e0 	.word	0x0800a4e0
 8009e7c:	0800a4e0 	.word	0x0800a4e0
 8009e80:	0800a4ec 	.word	0x0800a4ec

08009e84 <memcpy>:
 8009e84:	440a      	add	r2, r1
 8009e86:	4291      	cmp	r1, r2
 8009e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e8c:	d100      	bne.n	8009e90 <memcpy+0xc>
 8009e8e:	4770      	bx	lr
 8009e90:	b510      	push	{r4, lr}
 8009e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e9a:	4291      	cmp	r1, r2
 8009e9c:	d1f9      	bne.n	8009e92 <memcpy+0xe>
 8009e9e:	bd10      	pop	{r4, pc}

08009ea0 <memset>:
 8009ea0:	4402      	add	r2, r0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d100      	bne.n	8009eaa <memset+0xa>
 8009ea8:	4770      	bx	lr
 8009eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8009eae:	e7f9      	b.n	8009ea4 <memset+0x4>

08009eb0 <realloc>:
 8009eb0:	4b02      	ldr	r3, [pc, #8]	; (8009ebc <realloc+0xc>)
 8009eb2:	460a      	mov	r2, r1
 8009eb4:	4601      	mov	r1, r0
 8009eb6:	6818      	ldr	r0, [r3, #0]
 8009eb8:	f000 b8da 	b.w	800a070 <_realloc_r>
 8009ebc:	20000010 	.word	0x20000010

08009ec0 <_raise_r>:
 8009ec0:	291f      	cmp	r1, #31
 8009ec2:	b538      	push	{r3, r4, r5, lr}
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	460d      	mov	r5, r1
 8009ec8:	d904      	bls.n	8009ed4 <_raise_r+0x14>
 8009eca:	2316      	movs	r3, #22
 8009ecc:	6003      	str	r3, [r0, #0]
 8009ece:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ed6:	b112      	cbz	r2, 8009ede <_raise_r+0x1e>
 8009ed8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009edc:	b94b      	cbnz	r3, 8009ef2 <_raise_r+0x32>
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 f830 	bl	8009f44 <_getpid_r>
 8009ee4:	462a      	mov	r2, r5
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	4620      	mov	r0, r4
 8009eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eee:	f000 b817 	b.w	8009f20 <_kill_r>
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d00a      	beq.n	8009f0c <_raise_r+0x4c>
 8009ef6:	1c59      	adds	r1, r3, #1
 8009ef8:	d103      	bne.n	8009f02 <_raise_r+0x42>
 8009efa:	2316      	movs	r3, #22
 8009efc:	6003      	str	r3, [r0, #0]
 8009efe:	2001      	movs	r0, #1
 8009f00:	e7e7      	b.n	8009ed2 <_raise_r+0x12>
 8009f02:	2400      	movs	r4, #0
 8009f04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f08:	4628      	mov	r0, r5
 8009f0a:	4798      	blx	r3
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e7e0      	b.n	8009ed2 <_raise_r+0x12>

08009f10 <raise>:
 8009f10:	4b02      	ldr	r3, [pc, #8]	; (8009f1c <raise+0xc>)
 8009f12:	4601      	mov	r1, r0
 8009f14:	6818      	ldr	r0, [r3, #0]
 8009f16:	f7ff bfd3 	b.w	8009ec0 <_raise_r>
 8009f1a:	bf00      	nop
 8009f1c:	20000010 	.word	0x20000010

08009f20 <_kill_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4d07      	ldr	r5, [pc, #28]	; (8009f40 <_kill_r+0x20>)
 8009f24:	2300      	movs	r3, #0
 8009f26:	4604      	mov	r4, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	f7fa fde7 	bl	8004b00 <_kill>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	d102      	bne.n	8009f3c <_kill_r+0x1c>
 8009f36:	682b      	ldr	r3, [r5, #0]
 8009f38:	b103      	cbz	r3, 8009f3c <_kill_r+0x1c>
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	bd38      	pop	{r3, r4, r5, pc}
 8009f3e:	bf00      	nop
 8009f40:	20001ea8 	.word	0x20001ea8

08009f44 <_getpid_r>:
 8009f44:	f7fa bdd4 	b.w	8004af0 <_getpid>

08009f48 <sbrk_aligned>:
 8009f48:	b570      	push	{r4, r5, r6, lr}
 8009f4a:	4e0e      	ldr	r6, [pc, #56]	; (8009f84 <sbrk_aligned+0x3c>)
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	6831      	ldr	r1, [r6, #0]
 8009f50:	4605      	mov	r5, r0
 8009f52:	b911      	cbnz	r1, 8009f5a <sbrk_aligned+0x12>
 8009f54:	f000 f8bc 	bl	800a0d0 <_sbrk_r>
 8009f58:	6030      	str	r0, [r6, #0]
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f000 f8b7 	bl	800a0d0 <_sbrk_r>
 8009f62:	1c43      	adds	r3, r0, #1
 8009f64:	d00a      	beq.n	8009f7c <sbrk_aligned+0x34>
 8009f66:	1cc4      	adds	r4, r0, #3
 8009f68:	f024 0403 	bic.w	r4, r4, #3
 8009f6c:	42a0      	cmp	r0, r4
 8009f6e:	d007      	beq.n	8009f80 <sbrk_aligned+0x38>
 8009f70:	1a21      	subs	r1, r4, r0
 8009f72:	4628      	mov	r0, r5
 8009f74:	f000 f8ac 	bl	800a0d0 <_sbrk_r>
 8009f78:	3001      	adds	r0, #1
 8009f7a:	d101      	bne.n	8009f80 <sbrk_aligned+0x38>
 8009f7c:	f04f 34ff 	mov.w	r4, #4294967295
 8009f80:	4620      	mov	r0, r4
 8009f82:	bd70      	pop	{r4, r5, r6, pc}
 8009f84:	20001ea4 	.word	0x20001ea4

08009f88 <_malloc_r>:
 8009f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8c:	1ccd      	adds	r5, r1, #3
 8009f8e:	f025 0503 	bic.w	r5, r5, #3
 8009f92:	3508      	adds	r5, #8
 8009f94:	2d0c      	cmp	r5, #12
 8009f96:	bf38      	it	cc
 8009f98:	250c      	movcc	r5, #12
 8009f9a:	2d00      	cmp	r5, #0
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	db01      	blt.n	8009fa4 <_malloc_r+0x1c>
 8009fa0:	42a9      	cmp	r1, r5
 8009fa2:	d905      	bls.n	8009fb0 <_malloc_r+0x28>
 8009fa4:	230c      	movs	r3, #12
 8009fa6:	603b      	str	r3, [r7, #0]
 8009fa8:	2600      	movs	r6, #0
 8009faa:	4630      	mov	r0, r6
 8009fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb0:	4e2e      	ldr	r6, [pc, #184]	; (800a06c <_malloc_r+0xe4>)
 8009fb2:	f000 f89d 	bl	800a0f0 <__malloc_lock>
 8009fb6:	6833      	ldr	r3, [r6, #0]
 8009fb8:	461c      	mov	r4, r3
 8009fba:	bb34      	cbnz	r4, 800a00a <_malloc_r+0x82>
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	f7ff ffc2 	bl	8009f48 <sbrk_aligned>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	d14d      	bne.n	800a066 <_malloc_r+0xde>
 8009fca:	6834      	ldr	r4, [r6, #0]
 8009fcc:	4626      	mov	r6, r4
 8009fce:	2e00      	cmp	r6, #0
 8009fd0:	d140      	bne.n	800a054 <_malloc_r+0xcc>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	4631      	mov	r1, r6
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	eb04 0803 	add.w	r8, r4, r3
 8009fdc:	f000 f878 	bl	800a0d0 <_sbrk_r>
 8009fe0:	4580      	cmp	r8, r0
 8009fe2:	d13a      	bne.n	800a05a <_malloc_r+0xd2>
 8009fe4:	6821      	ldr	r1, [r4, #0]
 8009fe6:	3503      	adds	r5, #3
 8009fe8:	1a6d      	subs	r5, r5, r1
 8009fea:	f025 0503 	bic.w	r5, r5, #3
 8009fee:	3508      	adds	r5, #8
 8009ff0:	2d0c      	cmp	r5, #12
 8009ff2:	bf38      	it	cc
 8009ff4:	250c      	movcc	r5, #12
 8009ff6:	4629      	mov	r1, r5
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	f7ff ffa5 	bl	8009f48 <sbrk_aligned>
 8009ffe:	3001      	adds	r0, #1
 800a000:	d02b      	beq.n	800a05a <_malloc_r+0xd2>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	442b      	add	r3, r5
 800a006:	6023      	str	r3, [r4, #0]
 800a008:	e00e      	b.n	800a028 <_malloc_r+0xa0>
 800a00a:	6822      	ldr	r2, [r4, #0]
 800a00c:	1b52      	subs	r2, r2, r5
 800a00e:	d41e      	bmi.n	800a04e <_malloc_r+0xc6>
 800a010:	2a0b      	cmp	r2, #11
 800a012:	d916      	bls.n	800a042 <_malloc_r+0xba>
 800a014:	1961      	adds	r1, r4, r5
 800a016:	42a3      	cmp	r3, r4
 800a018:	6025      	str	r5, [r4, #0]
 800a01a:	bf18      	it	ne
 800a01c:	6059      	strne	r1, [r3, #4]
 800a01e:	6863      	ldr	r3, [r4, #4]
 800a020:	bf08      	it	eq
 800a022:	6031      	streq	r1, [r6, #0]
 800a024:	5162      	str	r2, [r4, r5]
 800a026:	604b      	str	r3, [r1, #4]
 800a028:	4638      	mov	r0, r7
 800a02a:	f104 060b 	add.w	r6, r4, #11
 800a02e:	f000 f865 	bl	800a0fc <__malloc_unlock>
 800a032:	f026 0607 	bic.w	r6, r6, #7
 800a036:	1d23      	adds	r3, r4, #4
 800a038:	1af2      	subs	r2, r6, r3
 800a03a:	d0b6      	beq.n	8009faa <_malloc_r+0x22>
 800a03c:	1b9b      	subs	r3, r3, r6
 800a03e:	50a3      	str	r3, [r4, r2]
 800a040:	e7b3      	b.n	8009faa <_malloc_r+0x22>
 800a042:	6862      	ldr	r2, [r4, #4]
 800a044:	42a3      	cmp	r3, r4
 800a046:	bf0c      	ite	eq
 800a048:	6032      	streq	r2, [r6, #0]
 800a04a:	605a      	strne	r2, [r3, #4]
 800a04c:	e7ec      	b.n	800a028 <_malloc_r+0xa0>
 800a04e:	4623      	mov	r3, r4
 800a050:	6864      	ldr	r4, [r4, #4]
 800a052:	e7b2      	b.n	8009fba <_malloc_r+0x32>
 800a054:	4634      	mov	r4, r6
 800a056:	6876      	ldr	r6, [r6, #4]
 800a058:	e7b9      	b.n	8009fce <_malloc_r+0x46>
 800a05a:	230c      	movs	r3, #12
 800a05c:	603b      	str	r3, [r7, #0]
 800a05e:	4638      	mov	r0, r7
 800a060:	f000 f84c 	bl	800a0fc <__malloc_unlock>
 800a064:	e7a1      	b.n	8009faa <_malloc_r+0x22>
 800a066:	6025      	str	r5, [r4, #0]
 800a068:	e7de      	b.n	800a028 <_malloc_r+0xa0>
 800a06a:	bf00      	nop
 800a06c:	20001ea0 	.word	0x20001ea0

0800a070 <_realloc_r>:
 800a070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a074:	4680      	mov	r8, r0
 800a076:	4614      	mov	r4, r2
 800a078:	460e      	mov	r6, r1
 800a07a:	b921      	cbnz	r1, 800a086 <_realloc_r+0x16>
 800a07c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a080:	4611      	mov	r1, r2
 800a082:	f7ff bf81 	b.w	8009f88 <_malloc_r>
 800a086:	b92a      	cbnz	r2, 800a094 <_realloc_r+0x24>
 800a088:	f000 f83e 	bl	800a108 <_free_r>
 800a08c:	4625      	mov	r5, r4
 800a08e:	4628      	mov	r0, r5
 800a090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a094:	f000 f884 	bl	800a1a0 <_malloc_usable_size_r>
 800a098:	4284      	cmp	r4, r0
 800a09a:	4607      	mov	r7, r0
 800a09c:	d802      	bhi.n	800a0a4 <_realloc_r+0x34>
 800a09e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0a2:	d812      	bhi.n	800a0ca <_realloc_r+0x5a>
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	4640      	mov	r0, r8
 800a0a8:	f7ff ff6e 	bl	8009f88 <_malloc_r>
 800a0ac:	4605      	mov	r5, r0
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d0ed      	beq.n	800a08e <_realloc_r+0x1e>
 800a0b2:	42bc      	cmp	r4, r7
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	4631      	mov	r1, r6
 800a0b8:	bf28      	it	cs
 800a0ba:	463a      	movcs	r2, r7
 800a0bc:	f7ff fee2 	bl	8009e84 <memcpy>
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	f000 f820 	bl	800a108 <_free_r>
 800a0c8:	e7e1      	b.n	800a08e <_realloc_r+0x1e>
 800a0ca:	4635      	mov	r5, r6
 800a0cc:	e7df      	b.n	800a08e <_realloc_r+0x1e>
	...

0800a0d0 <_sbrk_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4d06      	ldr	r5, [pc, #24]	; (800a0ec <_sbrk_r+0x1c>)
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	602b      	str	r3, [r5, #0]
 800a0dc:	f7fa fd2a 	bl	8004b34 <_sbrk>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d102      	bne.n	800a0ea <_sbrk_r+0x1a>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	b103      	cbz	r3, 800a0ea <_sbrk_r+0x1a>
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	20001ea8 	.word	0x20001ea8

0800a0f0 <__malloc_lock>:
 800a0f0:	4801      	ldr	r0, [pc, #4]	; (800a0f8 <__malloc_lock+0x8>)
 800a0f2:	f000 b85d 	b.w	800a1b0 <__retarget_lock_acquire_recursive>
 800a0f6:	bf00      	nop
 800a0f8:	20001eac 	.word	0x20001eac

0800a0fc <__malloc_unlock>:
 800a0fc:	4801      	ldr	r0, [pc, #4]	; (800a104 <__malloc_unlock+0x8>)
 800a0fe:	f000 b858 	b.w	800a1b2 <__retarget_lock_release_recursive>
 800a102:	bf00      	nop
 800a104:	20001eac 	.word	0x20001eac

0800a108 <_free_r>:
 800a108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a10a:	2900      	cmp	r1, #0
 800a10c:	d044      	beq.n	800a198 <_free_r+0x90>
 800a10e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a112:	9001      	str	r0, [sp, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	f1a1 0404 	sub.w	r4, r1, #4
 800a11a:	bfb8      	it	lt
 800a11c:	18e4      	addlt	r4, r4, r3
 800a11e:	f7ff ffe7 	bl	800a0f0 <__malloc_lock>
 800a122:	4a1e      	ldr	r2, [pc, #120]	; (800a19c <_free_r+0x94>)
 800a124:	9801      	ldr	r0, [sp, #4]
 800a126:	6813      	ldr	r3, [r2, #0]
 800a128:	b933      	cbnz	r3, 800a138 <_free_r+0x30>
 800a12a:	6063      	str	r3, [r4, #4]
 800a12c:	6014      	str	r4, [r2, #0]
 800a12e:	b003      	add	sp, #12
 800a130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a134:	f7ff bfe2 	b.w	800a0fc <__malloc_unlock>
 800a138:	42a3      	cmp	r3, r4
 800a13a:	d908      	bls.n	800a14e <_free_r+0x46>
 800a13c:	6825      	ldr	r5, [r4, #0]
 800a13e:	1961      	adds	r1, r4, r5
 800a140:	428b      	cmp	r3, r1
 800a142:	bf01      	itttt	eq
 800a144:	6819      	ldreq	r1, [r3, #0]
 800a146:	685b      	ldreq	r3, [r3, #4]
 800a148:	1949      	addeq	r1, r1, r5
 800a14a:	6021      	streq	r1, [r4, #0]
 800a14c:	e7ed      	b.n	800a12a <_free_r+0x22>
 800a14e:	461a      	mov	r2, r3
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	b10b      	cbz	r3, 800a158 <_free_r+0x50>
 800a154:	42a3      	cmp	r3, r4
 800a156:	d9fa      	bls.n	800a14e <_free_r+0x46>
 800a158:	6811      	ldr	r1, [r2, #0]
 800a15a:	1855      	adds	r5, r2, r1
 800a15c:	42a5      	cmp	r5, r4
 800a15e:	d10b      	bne.n	800a178 <_free_r+0x70>
 800a160:	6824      	ldr	r4, [r4, #0]
 800a162:	4421      	add	r1, r4
 800a164:	1854      	adds	r4, r2, r1
 800a166:	42a3      	cmp	r3, r4
 800a168:	6011      	str	r1, [r2, #0]
 800a16a:	d1e0      	bne.n	800a12e <_free_r+0x26>
 800a16c:	681c      	ldr	r4, [r3, #0]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	6053      	str	r3, [r2, #4]
 800a172:	4421      	add	r1, r4
 800a174:	6011      	str	r1, [r2, #0]
 800a176:	e7da      	b.n	800a12e <_free_r+0x26>
 800a178:	d902      	bls.n	800a180 <_free_r+0x78>
 800a17a:	230c      	movs	r3, #12
 800a17c:	6003      	str	r3, [r0, #0]
 800a17e:	e7d6      	b.n	800a12e <_free_r+0x26>
 800a180:	6825      	ldr	r5, [r4, #0]
 800a182:	1961      	adds	r1, r4, r5
 800a184:	428b      	cmp	r3, r1
 800a186:	bf04      	itt	eq
 800a188:	6819      	ldreq	r1, [r3, #0]
 800a18a:	685b      	ldreq	r3, [r3, #4]
 800a18c:	6063      	str	r3, [r4, #4]
 800a18e:	bf04      	itt	eq
 800a190:	1949      	addeq	r1, r1, r5
 800a192:	6021      	streq	r1, [r4, #0]
 800a194:	6054      	str	r4, [r2, #4]
 800a196:	e7ca      	b.n	800a12e <_free_r+0x26>
 800a198:	b003      	add	sp, #12
 800a19a:	bd30      	pop	{r4, r5, pc}
 800a19c:	20001ea0 	.word	0x20001ea0

0800a1a0 <_malloc_usable_size_r>:
 800a1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1a4:	1f18      	subs	r0, r3, #4
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	bfbc      	itt	lt
 800a1aa:	580b      	ldrlt	r3, [r1, r0]
 800a1ac:	18c0      	addlt	r0, r0, r3
 800a1ae:	4770      	bx	lr

0800a1b0 <__retarget_lock_acquire_recursive>:
 800a1b0:	4770      	bx	lr

0800a1b2 <__retarget_lock_release_recursive>:
 800a1b2:	4770      	bx	lr

0800a1b4 <_init>:
 800a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b6:	bf00      	nop
 800a1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ba:	bc08      	pop	{r3}
 800a1bc:	469e      	mov	lr, r3
 800a1be:	4770      	bx	lr

0800a1c0 <_fini>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	bf00      	nop
 800a1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c6:	bc08      	pop	{r3}
 800a1c8:	469e      	mov	lr, r3
 800a1ca:	4770      	bx	lr
